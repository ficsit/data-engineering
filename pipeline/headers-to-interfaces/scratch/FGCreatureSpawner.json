[
  {
    "kind": "class",
    "name": "FSpawnData",
    "category": "USTRUCT",
    "comment": "Data we need to know/save about spawns in this spawner",
    "extends": [],
    "methods": [
      {
        "name": "FSpawnData"
      }
    ],
    "properties": [
      {
        "name": "SpawnLocation",
        "comment": "Location where we want to spawn",
        "type": "FVector"
      },
      {
        "name": "Creature",
        "comment": "Reference to creature",
        "type": "classAFGCreature*"
      },
      {
        "name": "WasKilled",
        "comment": "We save if the creature was killed so we know if we want to respawn the creature when in range of the spawner",
        "type": "bool"
      },
      {
        "name": "KilledOnDayNr",
        "comment": "What day we were killed ( -1 if we haven't been killed yet )",
        "type": "int32"
      },
      {
        "name": "CreatureClassOverride",
        "comment": "Overriden subclass of creature to spawn",
        "type": "TSubclassOf<classAFGCreature>"
      }
    ]
  },
  {
    "kind": "class",
    "name": "AFGCreatureSpawner",
    "category": "UCLASS",
    "extends": [
      "AActor",
      "IFGSaveInterface"
    ],
    "methods": [
      {
        "name": "AFGCreatureSpawner",
        "comment": "Sets default values for this actor's properties"
      },
      {
        "name": "BeginPlay",
        "comment": "BEGIN AActor interface",
        "returnType": "void"
      },
      {
        "name": "PostEditMove",
        "comment": "Moved in the editor, on done, calculate spawn locations",
        "returnType": "void"
      },
      {
        "name": "PreSaveGame_Implementation",
        "comment": "Begin IFGSaveInterface",
        "returnType": "void"
      },
      {
        "name": "PostSaveGame_Implementation",
        "returnType": "void"
      },
      {
        "name": "PreLoadGame_Implementation",
        "returnType": "void"
      },
      {
        "name": "PostLoadGame_Implementation",
        "returnType": "void"
      },
      {
        "name": "GatherDependencies_Implementation",
        "returnType": "void"
      },
      {
        "name": "NeedTransform_Implementation",
        "returnType": "bool"
      },
      {
        "name": "ShouldSave_Implementation",
        "returnType": "bool"
      },
      {
        "name": "GetSpawnLocations",
        "comment": "Get all spawn locations that's been calculated",
        "returnType": "void"
      },
      {
        "name": "GetCreatureToSpawn",
        "comment": "Get the creature that we will spawn",
        "returnType": "TSubclassOf<classAFGCreature>"
      },
      {
        "name": "GetSpawnRadius",
        "comment": "Radius that we will spawn creatures within",
        "returnType": "float"
      },
      {
        "name": "GetSpawnHalfHeight",
        "comment": "Height that we will search for ground within",
        "returnType": "float"
      },
      {
        "name": "GetSplines",
        "comment": "Gets all splines assigned to this spawner",
        "returnType": "TArray<classAFGSplinePath*>"
      },
      {
        "name": "SetSpawnerActive",
        "comment": "Sets active state of a spawner",
        "returnType": "void"
      },
      {
        "name": "IsSpawnerActive",
        "comment": "Is this spawner within active distance?",
        "returnType": "bool"
      },
      {
        "name": "SpawnCreatures",
        "comment": " Server only - Handles logic for creating creatures when the spawners becomes active",
        "returnType": "void"
      },
      {
        "name": "DestroyCreatures",
        "comment": "Server only - Handles logic for destroying creatures when the spawners becomes active",
        "returnType": "void"
      },
      {
        "name": "ShouldResetKillStatus",
        "comment": "Returns true if all conditions for resetting the WasKilled status of an entry in SpawnData are met",
        "returnType": "bool"
      },
      {
        "name": "UpdateKillStatus",
        "comment": "Goes through all spawndata and sets correct WasKilled depending on how many days have passed",
        "returnType": "void"
      },
      {
        "name": "IsTimeForCreature",
        "comment": "Should this creature exist at this time? ( day/night )",
        "returnType": "bool"
      },
      {
        "name": "TrySpawnCreatures",
        "comment": "If all conditions are met ( day/night spawning, reset kill status when days have passed etc ) we spawn creatures",
        "returnType": "void"
      },
      {
        "name": "CreatureDied",
        "comment": "Called when a creature died, need to be UFUNCTION as it's bound as a delegate",
        "returnType": "void"
      },
      {
        "name": "CalculateSpawningLocations",
        "comment": "@returns false if we didn't manage to fit all the enemies is the radius\n",
        "returnType": "bool"
      },
      {
        "name": "AddCreature",
        "comment": "Adds a creature to be handled by spawner",
        "returnType": "void"
      },
      {
        "name": "TryFindNonOverlappingLocation",
        "comment": "Randoms a location within range of this actor, and randoms new locations trying to find a unused location numRetries times",
        "returnType": "bool"
      },
      {
        "name": "IsLocationNonOverlapping",
        "comment": "Check through usedLocations so that location isn't overlapping another location (using mCreatureClass radius)",
        "returnType": "bool"
      },
      {
        "name": "CleanupCreatureList",
        "comment": "Remove entries that were added dynamically and now has WasKilled status",
        "returnType": "void"
      }
    ],
    "properties": [
      {
        "name": "mDebugComponent",
        "comment": "For showing a preview of what will happen in the editor",
        "type": "classUFGCreatureSpawnerDebugComponent*"
      },
      {
        "name": "mEditorSprite",
        "type": "classUBillboardComponent*"
      },
      {
        "name": "mCapsuleComponent",
        "type": "classUCapsuleComponent*"
      },
      {
        "name": "mCreatureClass",
        "comment": "The creature we should spawn",
        "type": "TSubclassOf<classAFGCreature>"
      },
      {
        "name": "mNumberOfCreatures",
        "comment": "The number of enemies to spawn, used offline",
        "type": "FInt32Interval"
      },
      {
        "name": "mSpawnRadius",
        "comment": "Within what radius do you want to spawn the enemies (the won't go outside of this radius)",
        "type": "float"
      },
      {
        "name": "mSpawnHalfHeight",
        "comment": "How much up/down our spawner tries to search for a placeable location",
        "type": "float"
      },
      {
        "name": "mIsActive",
        "comment": "Indicates if we have spawned our enemies",
        "type": "bool"
      },
      {
        "name": "mSpawnData",
        "comment": "Structure for keeping all data saved about enemies spawned",
        "type": "TArray<FSpawnData>"
      },
      {
        "name": "mSplines",
        "comment": "Path splines that enemies in this spawner should set to follow",
        "type": "TArray<classAFGSplinePath*>"
      },
      {
        "name": "mCachedIsNearBase",
        "comment": "cached value to see if spawner is near a base",
        "type": "bool"
      },
      {
        "name": "mRandomSeed",
        "type": "int32"
      },
      {
        "name": "mRespawnTimeIndays",
        "comment": "How many days should pass before creatures start to respawn ( -1 means never )",
        "type": "int32"
      }
    ]
  }
]