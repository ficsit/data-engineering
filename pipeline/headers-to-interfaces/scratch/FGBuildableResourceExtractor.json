[
  {
    "kind": "class",
    "name": "AFGBuildableResourceExtractor",
    "category": "UCLASS",
    "comment": "The base class for all resource extractors, i.e. miners and pumps.",
    "extends": [
      "AFGBuildableFactory"
    ],
    "methods": [
      {
        "name": "GetLifetimeReplicatedProps",
        "comment": "Decide on what properties to replicate",
        "returnType": "void"
      },
      {
        "name": "PreReplication",
        "returnType": "void"
      },
      {
        "name": "AFGBuildableResourceExtractor",
        "comment": "Ctor"
      },
      {
        "name": "BeginPlay",
        "comment": "Begin AActor interface",
        "returnType": "void"
      },
      {
        "name": "Destroyed",
        "returnType": "void"
      },
      {
        "name": "DisconnectExtractableResource",
        "returnType": "bool"
      },
      {
        "name": "CanProduce_Implementation",
        "comment": "Begin AFGBuildableFactory interface",
        "returnType": "bool"
      },
      {
        "name": "GetProductionCycleTime",
        "returnType": "float"
      },
      {
        "name": "GetProductionProgress",
        "returnType": "float"
      },
      {
        "name": "CalcProductionCycleTimeForPotential",
        "returnType": "float"
      },
      {
        "name": "PostLoadGame_Implementation",
        "comment": "Begin Save Interface",
        "returnType": "void"
      },
      {
        "name": "GetResourceNode",
        "comment": "[DEPRECATED] - Use GetExtractableResource() instead.\nGet the resource node this miner is mining from.",
        "returnType": "classAFGResourceNode*"
      },
      {
        "name": "GetExtractableResource",
        "comment": "Get the extractable resource interface this miner is extracting from",
        "returnType": "TScriptInterface<IFGExtractableResourceInterface>"
      },
      {
        "name": "GetOutputInventory",
        "comment": "Get the inventory we output the extracted resources to",
        "returnType": "classUFGInventoryComponent*"
      },
      {
        "name": "GetNumExtractedItemsPerCycle",
        "comment": "Get the quantity of items mined each production cycle",
        "returnType": "int32"
      },
      {
        "name": "GetNumExtractedItemsPerCycleConverted",
        "comment": "Get the quantity of items extracted each cycle converted for displaying in the UI",
        "returnType": "float"
      },
      {
        "name": "SetExtractableResource",
        "comment": "Set the extractable resource interface this miner is extracting from",
        "returnType": "void"
      },
      {
        "name": "SetResourceNode",
        "comment": "Set this resource node as our current, also claiming it",
        "returnType": "void"
      },
      {
        "name": "GetAllowedResourceForms",
        "comment": "Get all the allowed resource forms that this resource extractor is allowed to extract",
        "returnType": "void"
      },
      {
        "name": "OnlyAllowSpecifiedResources",
        "comment": "Does this Miner specify only certain resources to be gathered?",
        "returnType": "bool"
      },
      {
        "name": "GetAllowedResources",
        "comment": "Get all resources that are allowed to be mined / pumped. Only relevant if mOnlyAllowCertainResources is marked true.",
        "returnType": "void"
      },
      {
        "name": "GetMiningParticle",
        "comment": "Gets particle for mining",
        "returnType": "classUParticleSystem*"
      },
      {
        "name": "IsStartupComplete",
        "comment": "Are we done with startup animation",
        "returnType": "bool"
      },
      {
        "name": "GetFlowRateSmoothed",
        "comment": "Get the smoothed flow rate out of the extractor in m^3/s. Only valid for Liquid or Gas extractors",
        "returnType": "float"
      },
      {
        "name": "GetMaxFlowRate",
        "comment": "Return the maximum out flow from inventory to pipeline conversion in m^3/s",
        "returnType": "float"
      },
      {
        "name": "GetExtractorTypeName",
        "comment": "type names are used to match types for upgrades and such",
        "returnType": "FName"
      },
      {
        "name": "Factory_StartProducing",
        "comment": "Begin Factory_ Interface",
        "returnType": "void"
      },
      {
        "name": "Factory_TickProducing",
        "returnType": "void"
      },
      {
        "name": "Factory_PushPipeOutput_Implementation",
        "returnType": "void"
      }
    ],
    "properties": [
      {
        "name": "mExtractStartupTime",
        "comment": "Power up time for the extraction process, e.g. the time it takes for a drill to start spinning.",
        "type": "float"
      },
      {
        "name": "mExtractStartupTimer",
        "comment": "How much time we have left of the start up time for the extraction process (mExtractStartupTime).",
        "type": "float"
      },
      {
        "name": "mExtractCycleTime",
        "comment": "How long does it take to complete one mining cycle. In seconds.",
        "type": "float"
      },
      {
        "name": "mItemsPerCycle",
        "comment": "How many items are extracted per cycle",
        "type": "int32"
      },
      {
        "name": "mAllowedResourceForms",
        "comment": "Can we mine solids, liquids, gases or many of the types.",
        "type": "TArray<EResourceForm>"
      },
      {
        "name": "mRequireResourceAtMinimumDepthChecks",
        "comment": "(For Hologram) Require resource at minimum depth checks?\nIf true, this will ensure placement is only allowed where a minimum depth trace collides with the resource class this extractor is snapped to",
        "type": "bool"
      },
      {
        "name": "mMinimumDepthForPlacement",
        "comment": "(For Hologram) Minimum depth to collision this extractor requires to be placed ( tex. Water Pumps need to be at least X distance above floor )",
        "type": "float"
      },
      {
        "name": "mDepthTraceOriginOffset",
        "comment": "Offset from hologram origin to begin and end traces When performing minimum depth checks ( if enabled for this buildable ) during placement",
        "type": "FVector"
      },
      {
        "name": "mOnlyAllowCertainResources",
        "comment": "Should this extractor only allow extracting from specified resources?\n@note - mAllowedResourceForms will still affect placement validation.",
        "type": "bool"
      },
      {
        "name": "mAllowedResources",
        "comment": "List of acceptable resources this extractor can mine / pump",
        "type": "TArray<TSubclassOf<UFGResourceDescriptor>>"
      },
      {
        "name": "mExtractionOffset",
        "type": "FVector"
      },
      {
        "name": "mMustPlaceOnResourceDisqualifier",
        "comment": "Class disqualifier to use when this resource extractor is not placed on a matching resource node ( used in the hologram )",
        "type": "TSubclassOf<classUFGConstructDisqualifier>"
      },
      {
        "name": "mExtractorTypeName",
        "comment": "name used to mathc types of extractros for compatiblility when upgrading",
        "type": "FName"
      },
      {
        "name": "mIsLiquidOrGasType",
        "comment": "Cached property indicating that this Extractor is extracting a non-solid resource. This is used as a replication condition so FlowRate is not included for all extractors",
        "type": "bool"
      },
      {
        "name": "mExtractResourceNode",
        "comment": "DEPRICATED - Only used for old save support. Use mExtractableResource instead.\n  The resource node we want to extract from.",
        "type": "classAFGResourceNode*"
      },
      {
        "name": "mExtractableResource",
        "type": "AActor*"
      },
      {
        "name": "mCurrentExtractProgress",
        "comment": "Current extract progress in the range [0, 1]",
        "type": "float"
      },
      {
        "name": "mPipeOutputConnections",
        "comment": "Cached pipe output connections",
        "type": "TArray<classUFGPipeConnectionComponent*>"
      },
      {
        "name": "mOutputInventory",
        "comment": "Our output inventory,",
        "type": "classUFGInventoryComponent*"
      },
      {
        "name": "mFluidMovedLastProducingTick",
        "comment": "Last content value when updating flow rate",
        "type": "int32"
      },
      {
        "name": "mSmoothedFlowRate",
        "comment": "Current smoothed flow rate",
        "type": "float"
      },
      {
        "name": "mUpdateReplicatedFlowFrequency",
        "comment": "How frequently to update flow rate ( both clients and server will use the replicated value in the UI )",
        "type": "float"
      },
      {
        "name": "mTimeSinceLastFlowUpdate",
        "comment": "How long since the last replicated flow assignment",
        "type": "float"
      },
      {
        "name": "mReplicatedFlowRate",
        "comment": "Replicated smoothed flow rate",
        "type": "float"
      }
    ]
  }
]