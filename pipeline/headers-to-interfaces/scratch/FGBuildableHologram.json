[
  {
    "kind": "class",
    "name": "AFGBuildableHologram",
    "category": "UCLASS",
    "comment": "Snapping functionality when building.\nConstructing the buildable.",
    "extends": [
      "AFGHologram"
    ],
    "methods": [
      {
        "name": "GetLifetimeReplicatedProps",
        "comment": "Replication",
        "returnType": "void"
      },
      {
        "name": "AFGBuildableHologram",
        "comment": "Ctor"
      },
      {
        "name": "SetBuildableClass",
        "comment": "Set the buildable class for this hologram. Called from when spawning an hologram, before before BeginPlay is called.",
        "returnType": "void"
      },
      {
        "name": "BeginPlay",
        "comment": "Begin AActor interface",
        "returnType": "void"
      },
      {
        "name": "SerializeConstructMessage",
        "comment": "Net Construction Messages",
        "returnType": "void"
      },
      {
        "name": "IsValidHitResult",
        "returnType": "bool"
      },
      {
        "name": "SetHologramLocationAndRotation",
        "returnType": "void"
      },
      {
        "name": "ApplyBuildingClearnaceSnapping",
        "returnType": "bool"
      },
      {
        "name": "AdjustForGround",
        "comment": "Let holograms adjust legs of the building. If no legs are defined this function does nothing.",
        "returnType": "void"
      },
      {
        "name": "Construct",
        "returnType": "AActor*"
      },
      {
        "name": "ScrollRotate",
        "returnType": "void"
      },
      {
        "name": "GetSnappedBuilding",
        "comment": "End AFGHologram interface",
        "returnType": "classAFGBuildable*"
      },
      {
        "name": "SetupComponent",
        "comment": "Begin AFGHologram interface",
        "returnType": "USceneComponent*"
      },
      {
        "name": "CheckValidPlacement",
        "returnType": "void"
      },
      {
        "name": "GetRotationStep",
        "returnType": "int32"
      },
      {
        "name": "SnapToFloor",
        "comment": "Helper function to snap to the factory building grid.",
        "returnType": "void"
      },
      {
        "name": "CheckValidFloor",
        "comment": "Helper to check if the floor is valid.\n@return - true if the floor is valid; false if the floor is to steep, another building etc.",
        "returnType": "void"
      },
      {
        "name": "GetMinPlacementFloorZ",
        "comment": "Minimum Z value for a floor normal. If less the hologram is not placeable.",
        "returnType": "float"
      },
      {
        "name": "CheckClearance",
        "comment": "Helper to check if we stay clear of other buildings.\n@return true if we stay clear of other buildings; false in we're overlapping other buildings clearance.",
        "returnType": "void"
      },
      {
        "name": "CheckClearanceForPrimitive",
        "comment": "Do not override this, use CheckClearance in subclasses.\n@return true if check found an overlap and added an disqualifier.",
        "returnType": "bool"
      },
      {
        "name": "CheckClearanceForShapeSimple",
        "comment": "Check clearance for specific shape and adds appropriate disqualifiers.\nUsed if a hologram needs cheap manual shape construction and checking and don't want any of the snapping logics and such",
        "returnType": "bool"
      },
      {
        "name": "ConfigureSnappedBuilding",
        "comment": "@param inBuildable - The resulting buildable placed in the world that we are to configure before it's finished.\nConfigure the snapping to a building, i.e. foundation, floor etc.",
        "returnType": "void"
      },
      {
        "name": "ConfigureSnappedPower",
        "comment": "@param inBuildable - The resulting buildable placed in the world that we are to configure before it's finished.\nConfigure snapping to a power grid, i.e. when placing a buildable on a foundation it should hook up to any powered walls.",
        "returnType": "void"
      },
      {
        "name": "ConfigureActor",
        "comment": "@param inBuildable - The resulting buildable placed in the world that we are to configure before it's finished.\n@note DO NOT TOUCH COMPONENTS HERE as they'll be overwritten! Use ConfigureComponents for that",
        "returnType": "void"
      },
      {
        "name": "ReceiveConfigureActor",
        "comment": "@param inBuildable - The resulting buildable placed in the world that we are to configure before it's finished.\n@note DO NOT TOUCH COMPONENTS HERE as they'll be overwritten! Use ConfigureComponents for that",
        "returnType": "void"
      },
      {
        "name": "ConfigureComponents",
        "comment": "@param inBuildable - The resulting buildable placed in the world that we are to configure before it's finished.\n@note This is a good place to initialize snapped connections etc.",
        "returnType": "void"
      },
      {
        "name": "ReceiveConfigureComponents",
        "comment": "@param inBuildable - The resulting buildable placed in the world that we are to configure before it's finished.\n@note This is a good place to initialize snapped connections etc.",
        "returnType": "void"
      },
      {
        "name": "OnHologramTransformUpdated",
        "comment": "OnHologramTransformUpdated\nLet's holograms react to rotation and location chnages applied after the initial move. Currently used for stuff like snapping and having sub holograms like hub parts update.",
        "returnType": "void"
      },
      {
        "name": "ConfigureBuildEffect",
        "comment": "Configures the build effect for the constructed actor.",
        "returnType": "void"
      },
      {
        "name": "SetupClearance",
        "comment": "Begin AFGHologram interface",
        "returnType": "void"
      },
      {
        "name": "SetMaterial",
        "returnType": "void"
      },
      {
        "name": "SetupFactoryConnectionMesh",
        "comment": "Setup the mesh for visualizing connections.",
        "returnType": "void"
      },
      {
        "name": "SetupPowerConnectionMesh",
        "returnType": "void"
      },
      {
        "name": "SetupPipeConnectionMesh",
        "returnType": "void"
      },
      {
        "name": "GetDefaultBuildable",
        "comment": "Useful for getting the default buildable",
        "returnType": "TBuildableClass*"
      }
    ],
    "properties": [
      {
        "name": "mInputConnectionMeshTag",
        "comment": "Tags for marking components in the hologram.",
        "type": "staticFName"
      },
      {
        "name": "mOutputConnectionMeshTag",
        "type": "staticFName"
      },
      {
        "name": "mNeutralConnectionMeshTag",
        "type": "staticFName"
      },
      {
        "name": "mClearanceComponentName",
        "type": "staticFName"
      },
      {
        "name": "mPowerConnectionMeshTag",
        "type": "staticFName"
      },
      {
        "name": "mMaxPlacementFloorAngle",
        "comment": "The maximum allowed angle on the floor for this hologram to be placed on (in degrees).",
        "type": "float"
      },
      {
        "name": "mLegs",
        "type": "classUFGFactoryLegsComponent*"
      },
      {
        "name": "mOriginalPlacementLocation",
        "comment": "used to revert back placement modifications if the placement failed",
        "type": "FVector"
      },
      {
        "name": "mHasSetOriginalPlacementLocation",
        "type": "bool"
      },
      {
        "name": "mPlacingOnSnapGrid",
        "comment": "used for the overlap snap logics on fonudations",
        "type": "bool"
      },
      {
        "name": "mHaveSnappedWithPlacementOverlap",
        "comment": "used to make sure we only do snapping once, or we might get pushed back in to what we moved out from",
        "type": "bool"
      },
      {
        "name": "mUseGradualFoundationRotations",
        "comment": "If set to true, the building will be allowed to snap to 45 degree intervals on fonudations instead of only 90 as the default.",
        "type": "bool"
      },
      {
        "name": "mUseConveyorConnectionFrameMesh",
        "comment": "If the frame mesh should be used to highlight connections in hologram.",
        "type": "uint32"
      },
      {
        "name": "mUseConveyorConnectionArrowMesh",
        "comment": "If the arrow mesh should be used to highlight a connection's direction in hologram.",
        "type": "uint32"
      },
      {
        "name": "mUsePipeConnectionFrameMesh",
        "comment": "If the frame mesh should be used to highlight the pipe connections in hologram",
        "type": "uint32"
      },
      {
        "name": "mUsePipeConnectionArrowMesh",
        "comment": "If the arrow should be used to highlight the pipe connections in hologram",
        "type": "uint32"
      },
      {
        "name": "mClearanceBox",
        "comment": "Component to check build clearance to other buildings.",
        "type": "classUBoxComponent*"
      },
      {
        "name": "mSnappedBuilding",
        "comment": "If we have snapped to another buildable, i.e. foundation, floor etc, this is it.",
        "type": "classAFGBuildable*"
      },
      {
        "name": "mIsAimingAtOtherBuilding",
        "type": "bool"
      },
      {
        "name": "mDidSnapDuetoClearance",
        "type": "bool"
      }
    ]
  }
]