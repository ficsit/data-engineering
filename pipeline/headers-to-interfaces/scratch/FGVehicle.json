[
  {
    "kind": "class",
    "name": "FVehiclePhysicsData",
    "category": "USTRUCT",
    "comment": "Physics data we want to be able to restore, we store the bone name to be able to change the bone structure in updates",
    "extends": [],
    "methods": [
      {
        "name": "FVehiclePhysicsData",
        "comment": "Default ctor"
      },
      {
        "name": "operator<<",
        "returnType": "FArchive&"
      }
    ],
    "properties": [
      {
        "name": "BoneName",
        "comment": "Bone that have this information",
        "type": "FName"
      },
      {
        "name": "BodyState",
        "comment": "Linear velocity of the bone",
        "type": "FRigidBodyState"
      }
    ]
  },
  {
    "kind": "class",
    "name": "UFGUseState_VehicleHasDriver",
    "category": "UCLASS",
    "comment": "Vehicle has a driver but has empty passenger seats",
    "extends": [
      "UFGUseState"
    ],
    "methods": [
      {
        "name": "UFGUseState_VehicleHasDriver"
      }
    ],
    "properties": []
  },
  {
    "kind": "class",
    "name": "UFGUseState_VehicleInWater",
    "category": "UCLASS",
    "comment": "Vehicle is in water, can't enter",
    "extends": [
      "UFGUseState"
    ],
    "methods": [
      {
        "name": "UFGUseState_VehicleInWater"
      }
    ],
    "properties": []
  },
  {
    "kind": "class",
    "name": "UFGUseState_VehicleOccupied",
    "category": "UCLASS",
    "comment": "Vehicle is fully occupied",
    "extends": [
      "UFGUseState"
    ],
    "methods": [
      {
        "name": "UFGUseState_VehicleOccupied"
      }
    ],
    "properties": []
  },
  {
    "kind": "class",
    "name": "FVehicleSeat",
    "category": "USTRUCT",
    "extends": [],
    "methods": [
      {
        "name": "FVehicleSeat"
      }
    ],
    "properties": [
      {
        "name": "SeatClass",
        "comment": "Seat class to spawn.",
        "type": "TSubclassOf<classAFGPassengerSeat>"
      },
      {
        "name": "SitSocket",
        "comment": "Socket to attach character to.",
        "type": "FName"
      },
      {
        "name": "IsVisible",
        "comment": "Is seat and characters in this seat visible.",
        "type": "bool"
      },
      {
        "name": "SitAnimation",
        "comment": "Animation to play on characters in this seat.",
        "type": "UAnimSequence*"
      },
      {
        "name": "DamageMultiplier",
        "comment": "How much damage do we take in this seat.",
        "type": "float"
      },
      {
        "name": "mSeatPawn",
        "comment": "Pawn we possess when entering this seat.",
        "type": "classAFGDriveablePawn*"
      },
      {
        "name": "mCharacter",
        "comment": "Info about the character in this seat.",
        "type": "classAFGCharacterPlayer*"
      },
      {
        "name": "mController",
        "type": "classAController*"
      }
    ]
  },
  {
    "kind": "class",
    "name": "AFGVehicle",
    "category": "UCLASS",
    "comment": "Base class for all vehicles in the game, cars, train etc.",
    "extends": [
      "AFGDriveablePawn",
      "IFGUseableInterface",
      "IFGDismantleInterface",
      "IFGAggroTargetInterface",
      "IFGDockableInterface",
      "IFGColorInterface",
      "IFGSignificanceInterface"
    ],
    "methods": [
      {
        "name": "GetLifetimeReplicatedProps",
        "returnType": "void"
      },
      {
        "name": "IsRelevancyOwnerFor",
        "returnType": "bool"
      },
      {
        "name": "AFGVehicle"
      },
      {
        "name": "BeginPlay",
        "comment": "Begin AActor interface",
        "returnType": "void"
      },
      {
        "name": "EndPlay",
        "returnType": "void"
      },
      {
        "name": "Tick",
        "returnType": "void"
      },
      {
        "name": "TakeDamage",
        "returnType": "float"
      },
      {
        "name": "DisplayDebug",
        "returnType": "void"
      },
      {
        "name": "GetMovementComponent",
        "comment": "Begin APawn interface",
        "returnType": "classUPawnMovementComponent*"
      },
      {
        "name": "Serialize",
        "comment": "Begin UObject interface",
        "returnType": "void"
      },
      {
        "name": "PreSaveGame_Implementation",
        "comment": "Begin IFGSaveInterface",
        "returnType": "void"
      },
      {
        "name": "PostLoadGame_Implementation",
        "returnType": "void"
      },
      {
        "name": "GainedSignificance_Implementation",
        "comment": "Begin IFGSignificanceInterface",
        "returnType": "void"
      },
      {
        "name": "LostSignificance_Implementation",
        "returnType": "void"
      },
      {
        "name": "GetSignificanceBias",
        "returnType": "float"
      },
      {
        "name": "GetSignificanceRange",
        "returnType": "float"
      },
      {
        "name": "GetPrimaryColor_Implementation",
        "comment": "~ Begin IFGColorInterface",
        "returnType": "FLinearColor"
      },
      {
        "name": "GetSecondaryColor_Implementation",
        "returnType": "FLinearColor"
      },
      {
        "name": "GetCanBeColored_Implementation",
        "returnType": "bool"
      },
      {
        "name": "StartIsAimedAtForColor_Implementation",
        "returnType": "void"
      },
      {
        "name": "StopIsAimedAtForColor_Implementation",
        "returnType": "void"
      },
      {
        "name": "CanDock_Implementation",
        "comment": "~ Begin IFGDockableInterface",
        "returnType": "bool"
      },
      {
        "name": "GetDockInventory_Implementation",
        "returnType": "classUFGInventoryComponent*"
      },
      {
        "name": "GetDockFuelInventory_Implementation",
        "returnType": "classUFGInventoryComponent*"
      },
      {
        "name": "WasDocked_Implementation",
        "returnType": "void"
      },
      {
        "name": "WasUndocked_Implementation",
        "returnType": "void"
      },
      {
        "name": "OnBeginLoadVehicle_Implementation",
        "returnType": "void"
      },
      {
        "name": "OnBeginUnloadVehicle_Implementation",
        "returnType": "void"
      },
      {
        "name": "OnTransferComplete_Implementation",
        "returnType": "void"
      },
      {
        "name": "UpdateUseState_Implementation",
        "comment": "~ Begin IFGUseableInterface",
        "returnType": "void"
      },
      {
        "name": "OnUse_Implementation",
        "returnType": "void"
      },
      {
        "name": "OnUseStop_Implementation",
        "returnType": "void"
      },
      {
        "name": "IsUseable_Implementation",
        "returnType": "bool"
      },
      {
        "name": "StartIsLookedAt_Implementation",
        "returnType": "void"
      },
      {
        "name": "StopIsLookedAt_Implementation",
        "returnType": "void"
      },
      {
        "name": "GetLookAtDecription_Implementation",
        "returnType": "FText"
      },
      {
        "name": "RegisterInteractingPlayer_Implementation",
        "returnType": "void"
      },
      {
        "name": "UnregisterInteractingPlayer_Implementation",
        "returnType": "void"
      },
      {
        "name": "CanDismantle_Implementation",
        "comment": "~ Begin IFGDismantleInterface",
        "returnType": "bool"
      },
      {
        "name": "GetDismantleRefund_Implementation",
        "returnType": "void"
      },
      {
        "name": "GetRefundSpawnLocationAndArea_Implementation",
        "returnType": "FVector"
      },
      {
        "name": "PreUpgrade_Implementation",
        "returnType": "void"
      },
      {
        "name": "Upgrade_Implementation",
        "returnType": "void"
      },
      {
        "name": "Dismantle_Implementation",
        "returnType": "void"
      },
      {
        "name": "StartIsLookedAtForDismantle_Implementation",
        "returnType": "void"
      },
      {
        "name": "StopIsLookedAtForDismantle_Implementation",
        "returnType": "void"
      },
      {
        "name": "RegisterIncomingAttacker_Implementation",
        "comment": "Begin IFGAggroTargetInterface",
        "returnType": "void"
      },
      {
        "name": "UnregisterAttacker_Implementation",
        "returnType": "void"
      },
      {
        "name": "GetActor_Implementation",
        "returnType": "AActor*"
      },
      {
        "name": "GetEnemyTargetDesirability_Implementation",
        "returnType": "float"
      },
      {
        "name": "ShouldAutoregisterAsTargetable_Implementation",
        "returnType": "bool"
      },
      {
        "name": "GetTargetComponent_Implementation",
        "returnType": "classUPrimitiveComponent*"
      },
      {
        "name": "IsAlive_Implementation",
        "returnType": "bool"
      },
      {
        "name": "GetAttackLocation_Implementation",
        "returnType": "FVector"
      },
      {
        "name": "GetIsSignificant",
        "comment": "Getter for significance",
        "returnType": "bool"
      },
      {
        "name": "SetBuiltWithRecipe",
        "comment": "Called in Construct from the hologram.",
        "returnType": "void"
      },
      {
        "name": "GetBuiltWithRecipe",
        "comment": "Getter for the built with recipe.",
        "returnType": "TSubclassOf<classUFGRecipe>"
      },
      {
        "name": "GetMesh",
        "comment": "Skel mesh for this vehicle",
        "returnType": "classUSkeletalMeshComponent*"
      },
      {
        "name": "GetHealthComponent",
        "comment": "Health component for this vehicle",
        "returnType": "classUFGHealthComponent*"
      },
      {
        "name": "IsDestructible",
        "comment": "Is this vehicle destructible",
        "returnType": "bool"
      },
      {
        "name": "DriverEnter",
        "comment": "Overridden to reset self driving status",
        "returnType": "bool"
      },
      {
        "name": "DriverLeave",
        "returnType": "bool"
      },
      {
        "name": "CanSelfDriverEnter",
        "comment": "@return true if an ai can start driving this vehicle; false otherwise. (server only)",
        "returnType": "bool"
      },
      {
        "name": "SelfDriverEnter",
        "comment": "Let an ai enter the vehicle. Will not succeed if there is a human driver in the vehicle already.",
        "returnType": "bool"
      },
      {
        "name": "IsSelfDriving",
        "comment": "@return true if there's an ai controlling this vehicle; false otherwise.",
        "returnType": "bool"
      },
      {
        "name": "HasAnyPassengerSeatAvailable",
        "comment": "Check if any passenger seats are available",
        "returnType": "bool"
      },
      {
        "name": "KickAllPlayers",
        "comment": "Kicks out all players in the vehicle including its passengers\nCan be called on both client and server.",
        "returnType": "void"
      },
      {
        "name": "AddPushedCharacter",
        "comment": "Adds the pushed character to the mPushedCharacters array",
        "returnType": "void"
      },
      {
        "name": "HasPushedCharacter",
        "comment": "returns true if this vehicle has already pushed this character",
        "returnType": "bool"
      },
      {
        "name": "Stat_Cost",
        "comment": "Begin FFactoryStatHelpers Functions",
        "returnType": "void"
      },
      {
        "name": "Stat_StockInventory",
        "returnType": "void"
      },
      {
        "name": "SetNetConstructionID",
        "comment": "Getter and setter for the construction ID issued by server used to identify buildables when constructed on client",
        "returnType": "void"
      },
      {
        "name": "GetNetConstructionID",
        "returnType": "FNetConstructionID"
      },
      {
        "name": "OnTakeDamage",
        "comment": "Notifies from our health component",
        "returnType": "void"
      },
      {
        "name": "Died",
        "returnType": "void"
      },
      {
        "name": "NotifyOnTakeDamage",
        "comment": "We have taken damage",
        "returnType": "void"
      },
      {
        "name": "ReceiveDied",
        "comment": "We have died",
        "returnType": "void"
      },
      {
        "name": "OnDrivingStatusChanged",
        "comment": "Begin AFGDriveablePawn interface",
        "returnType": "void"
      },
      {
        "name": "ReceiveOnVehicleStartup",
        "comment": "Called when the vehicle (engine) is started.",
        "returnType": "void"
      },
      {
        "name": "ReceiveOnVehicleShutDown",
        "comment": "Called when the vehicle (engine) is shut down.",
        "returnType": "void"
      },
      {
        "name": "UpdateSubmergedInWater",
        "comment": "Update if we are submerged in water, SERVER ONLY",
        "returnType": "void"
      },
      {
        "name": "SubmergedInWaterUpdated",
        "comment": "Our status of being submerged in water has updated",
        "returnType": "void"
      },
      {
        "name": "IsSubmergedInWater",
        "comment": "Returns true if we are submerged in water",
        "returnType": "bool"
      },
      {
        "name": "GetDismantleRefundReturns",
        "comment": "How much do we get back when selling this vehicle. Not consolidated.",
        "returnType": "void"
      },
      {
        "name": "GetDismantleInventoryReturns",
        "comment": "How much do we get from the inventories when selling this vehicle. Not consolidated.",
        "returnType": "void"
      },
      {
        "name": "GetDismantleBlueprintReturns",
        "comment": "If blueprint has anything to return when this vehicle is dismantled. Not consolidated.",
        "returnType": "void"
      },
      {
        "name": "DestroyVehicle",
        "comment": "Destroy this vehicle. Used by dismantle.",
        "returnType": "void"
      },
      {
        "name": "ShowOutline",
        "comment": "Show the outline for the vehicle.",
        "returnType": "void"
      },
      {
        "name": "HideOutline",
        "comment": "Hide the outline for the vehicle.",
        "returnType": "void"
      },
      {
        "name": "SetSelfDriving",
        "comment": "Helpers",
        "returnType": "void"
      },
      {
        "name": "UpdatePhysicsVolume",
        "comment": "Notifies from out mesh",
        "returnType": "void"
      }
    ],
    "properties": [
      {
        "name": "VehicleMeshComponentName",
        "comment": "Name of the MeshComponent. Use this name if you want to prevent creation of the component (with ObjectInitializer.DoNotCreateDefaultSubobject).",
        "type": "staticFName"
      },
      {
        "name": "mDisplayName",
        "comment": "The human readable name for this vehicle.",
        "type": "FText"
      },
      {
        "name": "mDescription",
        "comment": "The human readable description for this vehicle.",
        "type": "FText"
      },
      {
        "name": "mHologramClass",
        "comment": "Hologram to build this class with.",
        "type": "TSubclassOf<classAFGHologram>"
      },
      {
        "name": "mMesh",
        "comment": "The main skeletal mesh associated with this Vehicle",
        "type": "classUSkeletalMeshComponent*"
      },
      {
        "name": "mHealthComponent",
        "comment": "Keeps track of our current health",
        "type": "classUFGHealthComponent*"
      },
      {
        "name": "mDisabledByWaterLocations",
        "comment": "If any of these locations enters water, then we are unusable",
        "type": "TArray<FVector>"
      },
      {
        "name": "mIsDismantled",
        "comment": "Flag for whether this vehicle is being dismantled",
        "type": "uint8"
      },
      {
        "name": "mPendingDismantleHighlighted",
        "comment": "Flag to indicate whether the dismantle material should be active",
        "type": "uint8"
      },
      {
        "name": "mNetConstructionID",
        "comment": "ID given from server when constructed. Has not been assigned a value by server if 0.",
        "type": "FNetConstructionID"
      },
      {
        "name": "mBuiltWithRecipe",
        "comment": "Recipe this vehicle was built with, e.g. used for refunds and stats.",
        "type": "TSubclassOf<classUFGRecipe>"
      },
      {
        "name": "mPrimaryColor",
        "comment": "The primary color of this buildable",
        "type": "FLinearColor"
      },
      {
        "name": "mSecondaryColor",
        "comment": "The primary color of this buildable",
        "type": "FLinearColor"
      },
      {
        "name": "mIsSelfDriving",
        "comment": "If this vehicle is self driving.",
        "type": "bool"
      },
      {
        "name": "mSelfDrivingController",
        "comment": "The AI that controls this vehicle when self-driving is activated.",
        "type": "classAAIController*"
      },
      {
        "name": "mStoredPhysicsData",
        "comment": "Saved like this, as we can't store it in serialize, as it will be killed",
        "type": "TArray<FVehiclePhysicsData>"
      },
      {
        "name": "mPushedCharacters",
        "comment": "Characters we pushed this frame. Reset every frame.",
        "type": "TArray<AFGCharacterBase*>"
      },
      {
        "name": "mConstructSound",
        "comment": "Sound played when this vehicle is created",
        "type": "classUAkAudioEvent*"
      },
      {
        "name": "mIsDestructible",
        "comment": "Can this vehicle be destroyed by damage?",
        "type": "uint8"
      },
      {
        "name": "mTouchingWater",
        "comment": "If true, then we are touching a water volume",
        "type": "uint8"
      },
      {
        "name": "mIsSubmergedInWater",
        "comment": "If true, then we are submerged in water",
        "type": "uint8"
      },
      {
        "name": "mBaseAngularDamping",
        "comment": "base damping forces to revert to in case a vehicle is no longer submerged",
        "type": "float"
      },
      {
        "name": "mBaseLinearDamping",
        "type": "float"
      },
      {
        "name": "mSubmergedAngularDamping",
        "comment": "increased angular damping when vehicle is under water",
        "type": "float"
      },
      {
        "name": "mSubmergedLinearDamping",
        "comment": "increased linear damping when vehicle is under water",
        "type": "float"
      },
      {
        "name": "mSubmergedBouyantForce",
        "comment": "upwards force applied to vehicles when underwater",
        "type": "float"
      },
      {
        "name": "mGasDamageType",
        "comment": "Gas damage typ that should be redirected to the driver",
        "type": "TSubclassOf<classUFGDamageType>"
      },
      {
        "name": "mIsSignificant",
        "comment": "Indicates if the vehicle is within significance distance",
        "type": "uint8"
      },
      {
        "name": "mSignificanceBias",
        "comment": "A bias to the significance value",
        "type": "float"
      },
      {
        "name": "mAddToSignificanceManager",
        "comment": "Indicates if the vehicle should be handled by significance manager",
        "type": "uint8"
      },
      {
        "name": "mSignificanceRange",
        "comment": "Range that this vehicle should be significant within",
        "type": "float"
      }
    ]
  }
]