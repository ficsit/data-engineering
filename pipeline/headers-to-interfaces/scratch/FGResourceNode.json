[
  {
    "kind": "enum",
    "name": "EResourceAmount",
    "comment": "How much resources this node contains, a rich vein will deplete later",
    "entries": [
      {
        "name": "RA_Poor",
        "displayName": "Poor"
      },
      {
        "name": "RA_Normal",
        "displayName": "Normal"
      },
      {
        "name": "RA_Rich",
        "displayName": "Rich"
      },
      {
        "name": "RA_Infinite",
        "displayName": "Infinite"
      },
      {
        "name": "RA_MAX"
      }
    ]
  },
  {
    "kind": "enum",
    "name": "EResourcePurity",
    "comment": "How how fast it is to mine the resource",
    "entries": [
      {
        "name": "RP_Inpure",
        "displayName": "Impure"
      },
      {
        "name": "RP_Normal",
        "displayName": "Normal"
      },
      {
        "name": "RP_Pure",
        "displayName": "Pure"
      },
      {
        "name": "RP_MAX"
      }
    ]
  },
  {
    "kind": "class",
    "name": "FPurityTextPair",
    "category": "USTRUCT",
    "extends": [],
    "methods": [
      {
        "name": "FPurityTextPair"
      }
    ],
    "properties": [
      {
        "name": "Text",
        "comment": "Localizable text",
        "type": "FText"
      },
      {
        "name": "Purity",
        "comment": "Enum to localize",
        "type": "TEnumAsByte<EResourcePurity>"
      }
    ]
  },
  {
    "kind": "class",
    "name": "UFGUseState_NodeFullInventory",
    "category": "UCLASS",
    "comment": "Use state when inventory of player looking at the node has a full inventory",
    "extends": [
      "UFGUseState"
    ],
    "methods": [
      {
        "name": "UFGUseState_NodeFullInventory"
      }
    ],
    "properties": []
  },
  {
    "kind": "class",
    "name": "UFGUseState_NonConveyorResource",
    "category": "UCLASS",
    "comment": "The resource we are trying to pick can't be on a conveyor belt.",
    "extends": [
      "UFGUseState"
    ],
    "methods": [
      {
        "name": "UFGUseState_NonConveyorResource"
      }
    ],
    "properties": []
  },
  {
    "kind": "class",
    "name": "AFGResourceNode",
    "category": "UCLASS",
    "extends": [
      "AActor",
      "IFGExtractableResourceInterface",
      "IFGSaveInterface",
      "IFGUseableInterface",
      "IFGSignificanceInterface"
    ],
    "methods": [
      {
        "name": "GetLifetimeReplicatedProps",
        "comment": "Decide on what properties to replicate",
        "returnType": "void"
      },
      {
        "name": "AFGResourceNode",
        "comment": "Sets default values for this actor's properties"
      },
      {
        "name": "PostLoad",
        "comment": "Begin UObject interface",
        "returnType": "void"
      },
      {
        "name": "BeginPlay",
        "comment": "Begin AActor interface",
        "returnType": "void"
      },
      {
        "name": "EndPlay",
        "returnType": "void"
      },
      {
        "name": "GainedSignificance_Implementation",
        "comment": "Begin IFGSignificanceInterface",
        "returnType": "void"
      },
      {
        "name": "LostSignificance_Implementation",
        "returnType": "void"
      },
      {
        "name": "PreSaveGame_Implementation",
        "comment": "Begin IFGSaveInterface",
        "returnType": "void"
      },
      {
        "name": "PostSaveGame_Implementation",
        "returnType": "void"
      },
      {
        "name": "PreLoadGame_Implementation",
        "returnType": "void"
      },
      {
        "name": "PostLoadGame_Implementation",
        "returnType": "void"
      },
      {
        "name": "GatherDependencies_Implementation",
        "returnType": "void"
      },
      {
        "name": "NeedTransform_Implementation",
        "returnType": "bool"
      },
      {
        "name": "ShouldSave_Implementation",
        "returnType": "bool"
      },
      {
        "name": "UpdateUseState_Implementation",
        "comment": "~ Begin IFGUseableInterface",
        "returnType": "void"
      },
      {
        "name": "OnUse_Implementation",
        "returnType": "void"
      },
      {
        "name": "OnUseStop_Implementation",
        "returnType": "void"
      },
      {
        "name": "IsUseable_Implementation",
        "returnType": "bool"
      },
      {
        "name": "StartIsLookedAt_Implementation",
        "returnType": "void"
      },
      {
        "name": "GetLookAtDecription_Implementation",
        "returnType": "FText"
      },
      {
        "name": "StopIsLookedAt_Implementation",
        "returnType": "void"
      },
      {
        "name": "RegisterInteractingPlayer_Implementation",
        "returnType": "void"
      },
      {
        "name": "UnregisterInteractingPlayer_Implementation",
        "returnType": "void"
      },
      {
        "name": "SetIsOccupied_Implementation",
        "comment": "Begin IFGExtractableResourceInterface",
        "returnType": "void"
      },
      {
        "name": "IsOccupied_Implementation",
        "returnType": "bool"
      },
      {
        "name": "CanBecomeOccupied_Implementation",
        "returnType": "bool"
      },
      {
        "name": "HasAnyResources_Implementation",
        "returnType": "bool"
      },
      {
        "name": "GetResourceClass_Implementation",
        "returnType": "TSubclassOf<UFGResourceDescriptor>"
      },
      {
        "name": "ExtractResource_Implementation",
        "returnType": "int32"
      },
      {
        "name": "GetExtractionSpeedMultiplier_Implementation",
        "returnType": "float"
      },
      {
        "name": "GetPlacementLocation_Implementation",
        "returnType": "FVector"
      },
      {
        "name": "CanPlaceResourceExtractor_Implementation",
        "returnType": "bool"
      },
      {
        "name": "GetResourceName",
        "comment": "Localized name",
        "returnType": "FText"
      },
      {
        "name": "GetResourceForm",
        "comment": "What kind of form is the resource in",
        "returnType": "EResourceForm"
      },
      {
        "name": "InitResource",
        "comment": "Setup the resource so it's usable, sets up amount left",
        "returnType": "void"
      },
      {
        "name": "GetResoucesLeftText",
        "comment": "For UI",
        "returnType": "FText"
      },
      {
        "name": "GetResoucePurityText",
        "comment": "For UI",
        "returnType": "FText"
      },
      {
        "name": "GetResoucePurity",
        "comment": "For UI, returns the enum",
        "returnType": "EResourcePurity"
      },
      {
        "name": "GetIsLonerNode",
        "comment": "If true, this node will NEVER join another cluster of nodes, regardless of proximity.",
        "returnType": "bool"
      },
      {
        "name": "OnRep_IsOccupied",
        "comment": "Let the client know when we changed. mIsOccupied",
        "returnType": "void"
      },
      {
        "name": "OnIsOccupiedChanged",
        "comment": "Let's blueprint know that we have changed occupied states",
        "returnType": "void"
      },
      {
        "name": "GetResourceAmount",
        "comment": "The range of a resource for a amount",
        "returnType": "FInt32Interval&"
      },
      {
        "name": "GetRandomResourceAmount",
        "comment": "Get a random resource amount",
        "returnType": "int32"
      },
      {
        "name": "ToggleResourcePickUI",
        "comment": "Opens or closes the picking ui",
        "returnType": "void"
      },
      {
        "name": "ExtractResourceAndGiveToPlayer",
        "comment": "Gives one resource to a player",
        "returnType": "void"
      },
      {
        "name": "GetExtractMultiplier",
        "comment": "Getter for extract multiplier",
        "returnType": "int32"
      },
      {
        "name": "GetResourceAmount",
        "comment": "Returns the mAmount",
        "returnType": "EResourceAmount"
      },
      {
        "name": "ClearWidget",
        "comment": "Cleanup function for UI. Placed here so that both nodes and deposits can take the same code path",
        "returnType": "void"
      },
      {
        "name": "GetNumResourcesPerExtract",
        "returnType": "int32"
      },
      {
        "name": "IsGeyserDescButNotGeyserNode",
        "returnType": "bool"
      },
      {
        "name": "PostEditChangeProperty",
        "comment": "When this is changed in the editor, propagate the changes to the preview window",
        "returnType": "void"
      },
      {
        "name": "CheckForErrors",
        "returnType": "void"
      },
      {
        "name": "UpdateMeshFromDescriptor",
        "comment": "Used by the descriptor, so that all meshes in the world can get their mesh updated",
        "returnType": "void"
      },
      {
        "name": "AddRevealedOnMapBy",
        "comment": "Used by the radar tower to show this actor on the map",
        "returnType": "void"
      },
      {
        "name": "RemoveRevealedOnMapBy",
        "comment": "Used by the radar tower to hide this actor on the map",
        "returnType": "void"
      },
      {
        "name": "ConditionallySetupComponents",
        "returnType": "void"
      },
      {
        "name": "InitRadioactivity",
        "comment": "Setup radiation emitters for radioactive resources.",
        "returnType": "void"
      },
      {
        "name": "UpdateRadioactivity",
        "comment": "Called when a resource is extracted. Never called on infinite resource nodes.",
        "returnType": "void"
      }
    ],
    "properties": [
      {
        "name": "mResourceClass",
        "comment": "Type of resource",
        "type": "TSubclassOf<UFGResourceDescriptor>"
      },
      {
        "name": "mPurity",
        "comment": "How pure the resource is",
        "type": "TEnumAsByte<EResourcePurity>"
      },
      {
        "name": "mAmount",
        "comment": "How pure the resource is",
        "type": "TEnumAsByte<EResourceAmount>"
      },
      {
        "name": "mDecalComponent",
        "comment": "the decal that used for displaying the resource",
        "type": "UDecalComponent*"
      },
      {
        "name": "mBoxComponent",
        "comment": "If we have no static mesh but a decal, then we use this for collision",
        "type": "UBoxComponent*"
      },
      {
        "name": "mResourcesLeft",
        "comment": "How much resources is left in this node",
        "type": "int32"
      },
      {
        "name": "mIsOccupied",
        "comment": "If true, then we are occupied by something // [Dylan 3/2/2020] - Removed savegame meta",
        "type": "bool"
      },
      {
        "name": "mRevealedOnMapBy",
        "comment": "Radar tower modifies this to show this resource node in the map",
        "type": "TArray<UObject*>"
      },
      {
        "name": "mIsLonerNode",
        "comment": "If true, this node will NEVER join another cluster of nodes, regardless of proximity.",
        "type": "bool"
      },
      {
        "name": "mCanPlaceResourceExtractor",
        "comment": "Can this resource node be used for placing resource extractors on",
        "type": "bool"
      },
      {
        "name": "mExtractMultiplier",
        "comment": "Multiplier that is applied in the end of extraction calculations. Is used for making deposits extract more than regular nodes",
        "type": "int32"
      },
      {
        "name": "mPurityTextArray",
        "comment": "Text mapped to resource purity",
        "type": "TArray<FPurityTextPair>"
      },
      {
        "name": "mLastFlushFrame",
        "comment": "Last frame we flushed net dormancy",
        "type": "uint64"
      },
      {
        "name": "mCanPlacePortableMiner",
        "comment": "Can this resource node be used for placing portable miners on",
        "type": "bool"
      },
      {
        "name": "mHighlightParticleSystemTemplate",
        "comment": "Particle system component",
        "type": "classUParticleSystem*"
      },
      {
        "name": "mHighlightParticleSystemComponent",
        "comment": "Particle system component",
        "type": "classUParticleSystemComponent*"
      },
      {
        "name": "mDoSpawnParticle",
        "comment": "Bool for is we should spawn particle - @todo Do we really need to save this? //[Dylan 3/2/2020]",
        "type": "bool"
      }
    ]
  }
]