[
  {
    "kind": "enum",
    "name": "EJoinSessionState",
    "entries": [
      {
        "name": "JSS_NotJoiningSession"
      },
      {
        "name": "JSS_WaitingForLoginToComplete"
      },
      {
        "name": "JSS_QueryingHostsId"
      },
      {
        "name": "JSS_DestroyingOldSession"
      },
      {
        "name": "JSS_ConnectingToHost"
      }
    ]
  },
  {
    "kind": "class",
    "name": "FOnJoinSessionData",
    "category": "USTRUCT",
    "extends": [],
    "methods": [
      {
        "name": "Init",
        "returnType": "void"
      },
      {
        "name": "Done",
        "returnType": "void"
      },
      {
        "name": "SetState",
        "returnType": "void"
      },
      {
        "name": "GetState",
        "returnType": "EJoinSessionState"
      }
    ],
    "properties": [
      {
        "name": "LocalPlayer",
        "comment": "Player that want to join the session",
        "type": "classUFGLocalPlayer*"
      },
      {
        "name": "Session",
        "comment": "Session to join",
        "type": "FOnlineSessionSearchResult"
      },
      {
        "name": "JoinInProgress",
        "comment": "True if we are currently joining a session",
        "type": "uint8"
      },
      {
        "name": "State",
        "type": "EJoinSessionState"
      }
    ]
  },
  {
    "kind": "class",
    "name": "FFGModPackage",
    "category": "USTRUCT",
    "extends": [],
    "methods": [
      {
        "name": "FFGModPackage"
      }
    ],
    "properties": [
      {
        "name": "ModPath",
        "type": "FName"
      },
      {
        "name": "HasFGMods",
        "type": "bool"
      },
      {
        "name": "Author",
        "type": "FString"
      },
      {
        "name": "Version",
        "type": "FString"
      },
      {
        "name": "Description",
        "type": "FString"
      }
    ]
  },
  {
    "kind": "class",
    "name": "FFGGameNetworkErrorMsg",
    "category": "USTRUCT",
    "extends": [],
    "methods": [
      {
        "name": "FFGGameNetworkErrorMsg"
      },
      {
        "name": "FFGGameNetworkErrorMsg"
      }
    ],
    "properties": [
      {
        "name": "errorType",
        "type": "TEnumAsByte<ENetworkFailure::Type>"
      },
      {
        "name": "errorMsg",
        "type": "FString"
      }
    ]
  },
  {
    "kind": "class",
    "name": "UFGGameInstance",
    "category": "UCLASS",
    "comment": "We have two ways of joining sessions, invites or through joining someones presence. This is done through the UGameInstance::JoinSession\ncall. This will automatically tear down our current session. Leave the current game and join the new session",
    "extends": [
      "UGameInstance"
    ],
    "methods": [
      {
        "name": "UFGGameInstance"
      },
      {
        "name": "Init",
        "comment": "Begin UGameInstance interface",
        "returnType": "void"
      },
      {
        "name": "JoinSession",
        "returnType": "bool"
      },
      {
        "name": "GetMusicManager",
        "comment": "Get the music manager",
        "returnType": "classUFGMusicManager*"
      },
      {
        "name": "GetSaveSystem",
        "comment": "Access the save system",
        "returnType": "classUFGSaveSystem*"
      },
      {
        "name": "GetOnlineSessionClass",
        "comment": "@return OnlineSession class to use for this game instance",
        "returnType": "TSubclassOf<UOnlineSession>"
      },
      {
        "name": "GetAnalyticsService",
        "comment": "Service provider for analytics",
        "returnType": "classUAnalyticsService*"
      },
      {
        "name": "GetGameAnalyticsService",
        "comment": "Returns the relative analytics services from the world context holder",
        "returnType": "UAnalyticsService*"
      },
      {
        "name": "GetAnalyticsServiceFromWorld",
        "comment": "Returns the relative analytics services from the world context holder",
        "returnType": "UAnalyticsService*"
      },
      {
        "name": "PushError",
        "comment": "@todo: Move error functions to a \"message bus\" class\nPushes a error to the game, that handles it appropriately",
        "returnType": "void"
      },
      {
        "name": "PushError",
        "comment": "Pushes a error to the game, that handles it appropriately",
        "returnType": "void"
      },
      {
        "name": "GetNextError",
        "comment": "Get the next error and removes it from the error queue, returns null when there is no more errors",
        "returnType": "classUFGErrorMessage*"
      },
      {
        "name": "GetNextError",
        "comment": "Get the next error and removes it from the error queue, returns null when there is no more errors",
        "returnType": "classUFGErrorMessage*"
      },
      {
        "name": "PeekNextError",
        "comment": "Peek at the next error and keep it in the error queue, returns null when there is no more errors",
        "returnType": "classUFGErrorMessage*"
      },
      {
        "name": "PeekNextError",
        "comment": "Peek at the next error and keep it in the error queue, returns null when there is no more errors",
        "returnType": "classUFGErrorMessage*"
      },
      {
        "name": "SetHasSeenAlphaInfoScreen",
        "comment": "Set if the player has seen alpha info screen",
        "returnType": "void"
      },
      {
        "name": "HasPlayerSeenAlphaInfoScreen",
        "comment": "Has the player seen the alpha info screen?",
        "returnType": "bool"
      },
      {
        "name": "FindModPackages",
        "comment": "Finds non-original content and populates ModPackages",
        "returnType": "bool"
      },
      {
        "name": "GetFGUGC",
        "comment": "Populates UGC arrays with data from ModPackages, Updates ModPackages Information with contents",
        "returnType": "void"
      },
      {
        "name": "Shutdown",
        "comment": "Called when exiting to desktop/shutting down",
        "returnType": "void"
      },
      {
        "name": "SetSkipOnboarding",
        "comment": "Setter for  mSkipOnboarding",
        "returnType": "void"
      },
      {
        "name": "GetSkipOnboarding",
        "comment": "Getter for  mSkipOnboarding",
        "returnType": "bool"
      },
      {
        "name": "QueryNATType",
        "comment": "Query our current NAT-type",
        "returnType": "void"
      },
      {
        "name": "GetCachedNATType",
        "comment": "Get cached NAT-type",
        "returnType": "ECachedNATType"
      },
      {
        "name": "GetLatestNetworkError",
        "comment": "returns true if there were an error, and fills in the enum and string. If there were no error the type and msg will be undefined, and the function returns false. To get the next message or reset the error state, call PopLatestNetworkError function",
        "returnType": "bool"
      },
      {
        "name": "PopLatestNetworkError",
        "comment": "Pops the latest network message, removing it from the queue and resetting the error state. If there is more messages left after the pop it will return true, otherwise false.",
        "returnType": "bool"
      },
      {
        "name": "GetCurrentJoinSessionState",
        "returnType": "EJoinSessionState"
      },
      {
        "name": "LoadComplete",
        "comment": "Called when a map has loaded properly in Standalone",
        "returnType": "void"
      },
      {
        "name": "OnDestroySessionComplete_JoinSession",
        "comment": "Called after we have destroyed a old session for joining a new session",
        "returnType": "void"
      },
      {
        "name": "OnQueryFriendProductIdCompleted_JoinSession",
        "comment": "Called after we have queried a friends product id",
        "returnType": "void"
      },
      {
        "name": "PollHostProductUserId_JoinSession",
        "comment": "Called after we have queried a friends product id",
        "returnType": "void"
      },
      {
        "name": "OnNATQueryCompleted",
        "comment": "Called when we receive a callback about our current NAT-type",
        "returnType": "void"
      },
      {
        "name": "OnJoinSessionComplete",
        "comment": "Called after we have joined a session, makes sure we copy the session settings from the host",
        "returnType": "void"
      },
      {
        "name": "SendRecievedNetworkErrorOnDelegate",
        "returnType": "void"
      },
      {
        "name": "OnPreLoadMap",
        "returnType": "void"
      },
      {
        "name": "OnPostLoadMap",
        "returnType": "void"
      },
      {
        "name": "OnWorldDestroy",
        "comment": "Usually called when loading save/exiting to menu",
        "returnType": "void"
      },
      {
        "name": "InitGameAnalytics",
        "comment": "Initializes the Game Analytics Service. Requires that the Epic Online Services handle has been created beforehand.",
        "returnType": "void"
      },
      {
        "name": "JoinSession_Internal",
        "returnType": "void"
      }
    ],
    "properties": [
      {
        "name": "mSaveSystem",
        "comment": "The global save system",
        "type": "classUFGSaveSystem*"
      },
      {
        "name": "mOnNewError",
        "comment": "@todo: Make accessors for this when moving this to FGErrorBus or similar\nCalled whenever a new error is added that doesn't send you to main menu",
        "type": "FOnNewError"
      },
      {
        "name": "mNetworkErrorQueue",
        "type": "TArray<FFGGameNetworkErrorMsg>"
      },
      {
        "name": "mOnNetworkErrorRecieved",
        "type": "FOnNetworkErrorRecieved"
      },
      {
        "name": "mAnalyticsService",
        "comment": "The global Analytics Service",
        "type": "classUAnalyticsService*"
      },
      {
        "name": "mErrorList",
        "comment": "List of errors that we should pop",
        "type": "TArray<classUFGErrorMessage*>"
      },
      {
        "name": "mJoinSessionData",
        "comment": "Storing data for joining a session",
        "type": "FOnJoinSessionData"
      },
      {
        "name": "mOnJoinSessionStateUpdated",
        "comment": "Called when the state of joining session has been updated",
        "type": "FOnJoinSessionStateChanged"
      },
      {
        "name": "mOnJoinSessionCompleteHandle",
        "comment": "Join session complete handle",
        "type": "FDelegateHandle"
      },
      {
        "name": "mSkipOnboarding",
        "comment": "Has the player chosen to skip the onboarding?",
        "type": "bool"
      },
      {
        "name": "mOnNatTypeUpdated",
        "comment": "Called when nat-type is updated",
        "type": "FOnNatTypeUpdated"
      },
      {
        "name": "mEpicPeerManager",
        "comment": "Used to query NAT type, nothing more",
        "type": "TUniquePtr<classFEpicPeerManager>"
      },
      {
        "name": "mCachedNATType",
        "comment": "Our last seen NAT-type",
        "type": "ECachedNATType"
      },
      {
        "name": "mCachedEOSManager",
        "comment": "The handle for the Epic Online Services manager. Is initialized in Init().",
        "type": "classUEOSManager*"
      },
      {
        "name": "ModPackages",
        "comment": "Mod packages found - valid or invalid",
        "type": "TArray<FFGModPackage>"
      },
      {
        "name": "mMusicManager",
        "comment": "Controlling our music since... 2018",
        "type": "classUFGMusicManager*"
      },
      {
        "name": "mHasSeenAlphaInfo",
        "comment": "Has the player seen the alpha info screen, used to only show it once per session",
        "type": "bool"
      }
    ]
  }
]