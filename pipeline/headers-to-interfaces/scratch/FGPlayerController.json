[
  {
    "kind": "class",
    "name": "AFGPlayerController",
    "category": "UCLASS",
    "extends": [
      "AFGPlayerControllerBase"
    ],
    "methods": [
      {
        "name": "AFGPlayerController"
      },
      {
        "name": "ProcessConsoleExec",
        "comment": "Begin UObject interface",
        "returnType": "bool"
      },
      {
        "name": "GetLifetimeReplicatedProps",
        "comment": "Begin AActor interface",
        "returnType": "void"
      },
      {
        "name": "ReplicateSubobjects",
        "returnType": "bool"
      },
      {
        "name": "PostInitializeComponents",
        "returnType": "void"
      },
      {
        "name": "BeginPlay",
        "returnType": "void"
      },
      {
        "name": "Destroyed",
        "returnType": "void"
      },
      {
        "name": "OnRep_PlayerState",
        "comment": "Begin AController interface",
        "returnType": "void"
      },
      {
        "name": "SetPawn",
        "returnType": "void"
      },
      {
        "name": "PawnLeavingGame",
        "comment": "Begin APlayerController interface",
        "returnType": "void"
      },
      {
        "name": "PlayerTick",
        "returnType": "void"
      },
      {
        "name": "PreClientTravel",
        "returnType": "void"
      },
      {
        "name": "NotifyLoadedWorld",
        "returnType": "void"
      },
      {
        "name": "GetRemoteCallObjectOfClass",
        "comment": "Get the RCO of the given class.",
        "returnType": "classUFGRemoteCallObject*"
      },
      {
        "name": "RegisterRemoteCallObjectClass",
        "returnType": "classUFGRemoteCallObject*"
      },
      {
        "name": "StartRespawn",
        "comment": "\t//@todonow I do not think respawn works entirely correct for vehicles.\n\t/\n Begin respawning this controllers pawn, call Respawn when done playing any respawn effects.",
        "returnType": "void"
      },
      {
        "name": "Server_Respawn",
        "comment": "Respawns the pawn, do not call this directly to respawn in-game, call StartRespawn instead.",
        "returnType": "void"
      },
      {
        "name": "Suicide",
        "comment": "Suicide if we have a valid pawn",
        "returnType": "void"
      },
      {
        "name": "NeedRespawn",
        "comment": "@return true if this player controller needs to respawn it's pawn, e.g. the pawn is dead.",
        "returnType": "bool"
      },
      {
        "name": "IsRespawning",
        "comment": "@return true if we're currently respawning.",
        "returnType": "bool"
      },
      {
        "name": "SetRespawningFromDeath",
        "comment": "Set our suicide status",
        "returnType": "void"
      },
      {
        "name": "GetRespawningFromDeath",
        "comment": "Did we just kill ourselves",
        "returnType": "bool"
      },
      {
        "name": "ExecuteShortcut",
        "comment": "Execute the hotbar shortcut with the specified index",
        "returnType": "void"
      },
      {
        "name": "GetAllShortcuts",
        "comment": "Get all hotbar shortcuts",
        "returnType": "void"
      },
      {
        "name": "GetValidShortcuts",
        "comment": "Get all valid shortcuts",
        "returnType": "void"
      },
      {
        "name": "SetRecipeShortcutOnIndex",
        "comment": "Set the specified hotbar shortcut on the index if it's valid",
        "returnType": "void"
      },
      {
        "name": "GetRecipeShortcutIndex",
        "comment": "Get the shortcut index of a recipe, -1 if it doesn't have any shortcut index assigned",
        "returnType": "int32"
      },
      {
        "name": "SetDismantleShortcutOnIndex",
        "comment": "Set the specified shortcut on the index if it's valid",
        "returnType": "void"
      },
      {
        "name": "GetDismantleShortcutIndex",
        "comment": "Get the shortcut index dismantle have, -1 if it doesn't have any shortcut index assigned",
        "returnType": "int32"
      },
      {
        "name": "GetShortcutIndexFromKey",
        "comment": "Converts a keyEvent to what shortcut it's associated with\n@return -1 if not associated with any shortcut, else the shortcut index",
        "returnType": "int32"
      },
      {
        "name": "Server_RequestFogOfWarData",
        "comment": "Tells the server to start transferring fog of war data to the requesting client",
        "returnType": "void"
      },
      {
        "name": "Client_TransferFogOfWarData",
        "comment": "Transfer fog of war data to the client",
        "returnType": "void"
      },
      {
        "name": "GetObjectScreenRadius",
        "comment": "Gets the size on the viewport of the given actor",
        "returnType": "float"
      },
      {
        "name": "GetScreenBasedObjectRadius",
        "comment": "Gets the object radius for a given actor in order to align with a desired screen space radius",
        "returnType": "float"
      },
      {
        "name": "Client_AddMessage",
        "comment": "Gets called on the client",
        "returnType": "void"
      },
      {
        "name": "GetPlayerHasMessage",
        "comment": "Gets called on the client",
        "returnType": "bool"
      },
      {
        "name": "GetMapAreaTexture",
        "returnType": "classUFGMapAreaTexture*"
      },
      {
        "name": "GetDisabledInputGate",
        "comment": "\t/\n Getter for current disabled input states",
        "returnType": "FDisabledInputGate"
      },
      {
        "name": "IsInTutorialMode",
        "returnType": "bool"
      },
      {
        "name": "SetTutorialMode",
        "comment": "Set when a player is added to the TutorialManager",
        "returnType": "void"
      },
      {
        "name": "Server_DealImpactDamage",
        "comment": "Deals the damage on an impact from a projectile fired by a weapon",
        "returnType": "void"
      },
      {
        "name": "Server_DealRadialDamage",
        "comment": "Deals the radial damage from an exploding projectile fired by a weapon",
        "returnType": "void"
      },
      {
        "name": "CreateSequenceList",
        "comment": "Used to create our list of sequences",
        "returnType": "void"
      },
      {
        "name": "GetScreenshotPath",
        "returnType": "FString"
      },
      {
        "name": "DestroyNetworkActorHandled",
        "returnType": "bool"
      },
      {
        "name": "AcknowledgePossession",
        "returnType": "void"
      },
      {
        "name": "GetProximitySubsystem",
        "comment": "Getter for proximity subsystem",
        "returnType": "classAFGProximitySubsystem*"
      },
      {
        "name": "PonderRemoveDeadPawn",
        "comment": "Pontentially spawns deathcreate when disconnecting if we are dead",
        "returnType": "void"
      },
      {
        "name": "GetControlledCharacter",
        "comment": "Get the character we are controlling (if we are in vehicles, this finds our pawn in the vehicle), can return null if we don't control any character",
        "returnType": "classAFGCharacterBase*"
      },
      {
        "name": "ControlledCharacterIsAliveAndWell",
        "comment": "Return false if we don't control anything",
        "returnType": "bool"
      },
      {
        "name": "OnStartRespawn",
        "comment": "Called on owning client when respawning starts",
        "returnType": "void"
      },
      {
        "name": "OnFinishRespawn",
        "comment": "Called on owning client when respawning starts",
        "returnType": "void"
      },
      {
        "name": "OnSetupMovementWind",
        "comment": "Called on start of a local client player. Reutrn the component that should handle the wind for the player",
        "returnType": "UAkComponent*"
      },
      {
        "name": "OnPrimaryFire",
        "comment": "User pressed primary fire button",
        "returnType": "void"
      },
      {
        "name": "SetupInputComponent",
        "comment": "Begin APlayerController interface",
        "returnType": "void"
      },
      {
        "name": "BuildInputStack",
        "returnType": "void"
      },
      {
        "name": "OnAttentionPingPressed",
        "comment": "Sends a ping to the other players at the look at location",
        "returnType": "void"
      },
      {
        "name": "OnDismantlePortableMiner",
        "comment": "Temp Nativized event to reduce refernces in RCO.",
        "returnType": "void"
      },
      {
        "name": "OnDismantleGolfCart",
        "comment": "Temp Nativized event to reduce refernces in RCO.",
        "returnType": "void"
      },
      {
        "name": "CheckPawnMapArea",
        "comment": "Function that checks which map area our pawn is in",
        "returnType": "void"
      },
      {
        "name": "InitMapAreaCheckFunction",
        "comment": "Caches a lot off stuff needed for the map area checks",
        "returnType": "bool"
      },
      {
        "name": "GetCurrentMapArea",
        "comment": "Returns the map area that the pawn is currently in",
        "returnType": "TSubclassOf<UFGMapArea>"
      },
      {
        "name": "EnterChatMessage",
        "returnType": "void"
      },
      {
        "name": "OnDisabledInputGateChanged",
        "returnType": "void"
      },
      {
        "name": "EnablePhotoMode",
        "returnType": "void"
      },
      {
        "name": "TakePhoto",
        "returnType": "void"
      },
      {
        "name": "TogglePhotoModeInstructionsWidget",
        "returnType": "void"
      },
      {
        "name": "TogglePhotoMode",
        "returnType": "void"
      },
      {
        "name": "ToggleHiResPhotoMode",
        "returnType": "void"
      },
      {
        "name": "IncrementPhotoModeFOV",
        "returnType": "void"
      },
      {
        "name": "DecrementPhotoModeFOV",
        "returnType": "void"
      },
      {
        "name": "GetPhotoModeFOV",
        "returnType": "int32"
      },
      {
        "name": "GetIsPhotoMode",
        "returnType": "bool"
      },
      {
        "name": "GetHiResPhotoModeEnabled",
        "returnType": "bool"
      },
      {
        "name": "SetupTutorial",
        "comment": "Begins the setup of the tutorial subsystem",
        "returnType": "void"
      },
      {
        "name": "FinishRespawn",
        "comment": "Called when the server and client is done waiting for level streaming etc.",
        "returnType": "void"
      },
      {
        "name": "Server_SetRecipeShortcutOnIndex",
        "returnType": "void"
      },
      {
        "name": "Server_SetDismantleShortcutOnIndex",
        "returnType": "void"
      },
      {
        "name": "Server_SendChatMessage",
        "returnType": "void"
      },
      {
        "name": "Server_SpawnAttentionPingActor",
        "returnType": "void"
      },
      {
        "name": "Server_Suicide",
        "returnType": "void"
      },
      {
        "name": "Server_StartRespawn",
        "returnType": "void"
      },
      {
        "name": "Server_FinishRespawn",
        "returnType": "void"
      },
      {
        "name": "Server_WaitForLevelStreaming",
        "comment": "These are called in the respawn/join logic to let the server and client wait for the level streaming.",
        "returnType": "void"
      },
      {
        "name": "Client_WaitForLevelStreaming",
        "returnType": "void"
      },
      {
        "name": "OnRep_IsRespawning",
        "returnType": "void"
      },
      {
        "name": "DisablePawnMovement",
        "returnType": "void"
      },
      {
        "name": "OnShortcutsReplicated",
        "returnType": "void"
      },
      {
        "name": "testAndProcesAdaMessages",
        "returnType": "void"
      }
    ],
    "properties": [
      {
        "name": "OnShortcutsLayoutChanged",
        "comment": "Called when the shortcuts layout have changed, e.g. shortcut added.",
        "type": "FOnShortcutsLayoutChanged"
      },
      {
        "name": "OnShortcutChanged",
        "comment": "Called when a shortcut has changed, e.g. activated or inactivated",
        "type": "FOnShortcutChanged"
      },
      {
        "name": "OnToggleInventory",
        "comment": "Called when the player opens or closes the inventory",
        "type": "FOnToggleInventory"
      },
      {
        "name": "OnToggleInteractionUI",
        "comment": "Called when the player opens or closes the inventory",
        "type": "FOnToggleInteractionUI"
      },
      {
        "name": "MapAreaEntered",
        "comment": "Called when the pawn this controller is controlling enters a map area",
        "type": "FPlayerEnteredAreaDelegate"
      },
      {
        "name": "PawnChanged",
        "comment": "Called when the pawn this controller is controlling changes to other than nullPeter",
        "type": "FPawnChangedDelegate"
      },
      {
        "name": "mDisabledInputGateChanged",
        "type": "FDisabledInputGateDelegate"
      },
      {
        "name": "mCanAffectAudioVolumes",
        "comment": "Indicates if this playercontroller should trigger sound volumes",
        "type": "bool"
      },
      {
        "name": "mConsoleCommandManager",
        "comment": "Object that manages non-cheat commands. Instantiated in shipping builds.",
        "type": "classUFGConsoleCommandManager*"
      },
      {
        "name": "mRemoteCallObjects",
        "comment": "The array of all remote call objects this player controller has",
        "type": "TArray<UFGRemoteCallObject*>"
      },
      {
        "name": "mInputComponentChords",
        "comment": "This input component should only be used for chords, Alt/Ctrl/Shift/Cmd + Any Key.\nThis will be on top of stack, since it only consumes input if entire chord is pressed, so a single left click will be let through",
        "type": "classUInputComponent*"
      },
      {
        "name": "mAttentionPingActorClass",
        "comment": "The class of the attention ping actor we want to use",
        "type": "TSubclassOf<classAFGAttentionPingActor>"
      },
      {
        "name": "mMapAreaCheckInterval",
        "comment": "How often should we check which map area the pawn is in?",
        "type": "float"
      },
      {
        "name": "mCurrentMapArea",
        "comment": "In what map area is our pawn right now ?",
        "type": "TSubclassOf<classUFGMapArea>"
      },
      {
        "name": "mMovementWindComp",
        "type": "UAkComponent*"
      },
      {
        "name": "mMovementWindVelocityBuffer",
        "type": "FVector"
      },
      {
        "name": "mTurnOffMovementWindTimer",
        "type": "float"
      },
      {
        "name": "mMovementWindInAirTimer",
        "type": "float"
      },
      {
        "name": "mMovementSpeedSoft",
        "comment": "Used to detect changes in movement speed",
        "type": "float"
      },
      {
        "name": "mIsRespawning",
        "comment": "If we're currently in the state of respawning",
        "type": "bool"
      },
      {
        "name": "mAreaCheckTimerHandle",
        "comment": "Handler for the timer that checks which map area the pawn is in",
        "type": "FTimerHandle"
      },
      {
        "name": "mCachedMapAreaTexture",
        "comment": "Cached info about the map areas",
        "type": "classUFGMapAreaTexture*"
      },
      {
        "name": "mInTutorialMode",
        "comment": "If the tutorial is currently active and affecting the player controller",
        "type": "bool"
      },
      {
        "name": "mRespawnFromDeath",
        "comment": "Did we died",
        "type": "bool"
      },
      {
        "name": "mRespawnFromJoin",
        "comment": "Did we died",
        "type": "bool"
      },
      {
        "name": "mCurrentFOV",
        "comment": "Current field of view",
        "type": "int32"
      },
      {
        "name": "mDisabledInputGate",
        "type": "FDisabledInputGate"
      },
      {
        "name": "mPhotoModeFOV",
        "comment": "Photo mode",
        "type": "int32"
      },
      {
        "name": "mPhotoModeEnabled",
        "type": "bool"
      },
      {
        "name": "mHiResPhotoMode",
        "type": "bool"
      },
      {
        "name": "mMinPhotoModeFOV",
        "type": "int32"
      },
      {
        "name": "mMaxPhotoModeFOV",
        "type": "int32"
      },
      {
        "name": "mPhotomodeInputComponent",
        "type": "classUInputComponent*"
      },
      {
        "name": "mProximitySubsystem",
        "comment": "Subsystem that keeps track of effects in proximity to the player",
        "type": "classAFGProximitySubsystem*"
      }
    ]
  }
]