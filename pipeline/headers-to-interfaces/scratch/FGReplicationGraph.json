[
  {
    "kind": "enum",
    "name": "EClassRepPolicy",
    "comment": "Copyright 2019 Coffee Stain Studios. All Rights Reserved.",
    "entries": [
      {
        "name": "CRP_NotRouted",
        "comment": "Doesn't map to any node. Used for special case actors that handled by special case nodes (UShooterReplicationGraphNode_PlayerStateFrequencyLimiter)"
      },
      {
        "name": "CRP_RelevantAllConnections",
        "comment": "Routes to mAlwaysRelevantNode or mAlwaysRelevantStreamingLevelNode node"
      },
      {
        "name": "CRP_ConditionalRelevant",
        "comment": "Routes to mConditionalRelevantNode that runs IsNetRelevantFor() on each actor. Expects each actor to be relevant for all connections"
      },
      {
        "name": "CRP_Spatialize_Static",
        "comment": "Spatialized routes into the grid node\nRoutes to mGridNode: these actors don't move and don't need to be updated every frame."
      },
      {
        "name": "CRP_Spatialize_Dynamic",
        "comment": "Routes to mGridNode: these actors move frequently and are updated once per frame."
      },
      {
        "name": "CRP_Spatialize_Dormancy",
        "comment": "Routes to mGridNode: While dormant we treat as static. When flushed/not dormant dynamic. Note this is for things that \"move while not dormant\"."
      },
      {
        "name": "CRP_Spatialize_Prioritized_Dynamic",
        "comment": "Routes to mPrioritizedGridNode: these actors are updated in the same manner as the regular dynamic nodes, but their replication rate is not distributed over frames"
      }
    ]
  },
  {
    "kind": "class",
    "name": "FConnectionAlwaysRelevant_NodePair",
    "category": "USTRUCT",
    "extends": [],
    "methods": [
      {
        "name": "FConnectionAlwaysRelevant_NodePair"
      },
      {
        "name": "FConnectionAlwaysRelevant_NodePair"
      },
      {
        "name": "operator==",
        "returnType": "bool"
      }
    ],
    "properties": [
      {
        "name": "NetConnection",
        "type": "UNetConnection*"
      },
      {
        "name": "Node",
        "type": "UReplicationGraphNode_AlwaysRelevant_ForConnection*"
      }
    ]
  },
  {
    "kind": "class",
    "name": "UFGReplicationGraph",
    "category": "UCLASS",
    "extends": [
      "UReplicationGraph"
    ],
    "methods": [
      {
        "name": "ResetGameWorldState",
        "comment": "~ begin UReplicationGraph implementation",
        "returnType": "void"
      },
      {
        "name": "InitConnectionGraphNodes",
        "returnType": "void"
      },
      {
        "name": "InitGlobalActorClassSettings",
        "returnType": "void"
      },
      {
        "name": "InitGlobalGraphNodes",
        "returnType": "void"
      },
      {
        "name": "RouteAddNetworkActorToNodes",
        "returnType": "void"
      },
      {
        "name": "RouteRemoveNetworkActorToNodes",
        "returnType": "void"
      },
      {
        "name": "ServerReplicateActors",
        "returnType": "int32"
      },
      {
        "name": "NotifyActorDormancyChange",
        "returnType": "void"
      },
      {
        "name": "InitClassReplicationInfo",
        "comment": "Sets the class replication info for a class",
        "returnType": "void"
      },
      {
        "name": "AddPersistentDependencyActor",
        "comment": "Actor Dependencies\nCallback on when actor dependencies for character players that should always exist for the pawn is spawned",
        "returnType": "void"
      },
      {
        "name": "AddReplicationDependencyActor",
        "comment": "Callbacks for handling replication detail actors for manufacturers",
        "returnType": "void"
      },
      {
        "name": "RemoveReplicationDependencyActor",
        "returnType": "void"
      },
      {
        "name": "OnReplicationDetailActorStateChange",
        "returnType": "void"
      },
      {
        "name": "OnCharacterPlayerEquip",
        "comment": "Callback to handle when a player equips any equipment and add it to the pawns dependency list",
        "returnType": "void"
      },
      {
        "name": "OnCharacterPlayerUnequip",
        "comment": "Callback to handle when a player unequips any equipment and removes it to the pawns dependency list",
        "returnType": "void"
      },
      {
        "name": "OnCharacterPlayerFoliagePickupSpawned",
        "comment": "Callback on when the foliage pickup proxy has spawned for a player",
        "returnType": "void"
      },
      {
        "name": "OnBuildableRegistedPlayerChanged",
        "comment": "Callback to when a building registers (or unregisters) a player. Handles dormancy state changes for buildables in these cases.",
        "returnType": "void"
      },
      {
        "name": "OnFactoryProductionStatusChanged",
        "comment": "Callback on when buildables production status changes. Handles any replication needed behavior for buildables when this happens.",
        "returnType": "void"
      },
      {
        "name": "IsSpatialized",
        "comment": "Whether the given mapping is spatialized in any way",
        "returnType": "bool"
      },
      {
        "name": "GetMappingPolicy",
        "comment": "Gets the mapping to be used for the given class",
        "returnType": "EClassRepPolicy"
      },
      {
        "name": "LogCurrentActorDependencyList",
        "returnType": "void"
      },
      {
        "name": "GetAlwaysRelevantNodeForConnection",
        "returnType": "UReplicationGraphNode_AlwaysRelevant_ForConnection*"
      }
    ],
    "properties": [
      {
        "name": "mSpatializedClasses",
        "type": "TArray<UClass*>"
      },
      {
        "name": "mNonSpatializedClasses",
        "type": "TArray<UClass*>"
      },
      {
        "name": "mAlwaysRelevantClasses",
        "type": "TArray<UClass*>"
      },
      {
        "name": "mGridNode",
        "comment": "Grid Node that divides the map into grids and determines if an actor should send network updates to a connection depending on the different pre-defined grids.",
        "type": "UReplicationGraphNode_GridSpatialization2D*"
      },
      {
        "name": "mPrioritizedGridNode",
        "comment": "Grid Node that is dedicated for more frequently updated actors. Does not divide cells into buckets.",
        "type": "UReplicationGraphNode_GridSpatialization2D*"
      },
      {
        "name": "mAlwaysRelevantNode",
        "comment": "Node that holds a list of actors that are always Net Relevant.",
        "type": "UReplicationGraphNode_ActorList*"
      },
      {
        "name": "mConditionalRelevancyNode",
        "type": "UFGReplicationGraphNode_ConditionallyAlwaysRelevant*"
      },
      {
        "name": "mAlwaysRelevantForConnectionList",
        "type": "TArray<FConnectionAlwaysRelevant_NodePair>"
      },
      {
        "name": "mAlwaysRelevantStreamingLevelActors",
        "comment": "Maps the actors that need to be always relevant across streaming levels",
        "type": "TMap<FName,FActorRepListRefView>"
      },
      {
        "name": "mPersistentDependencyClasses",
        "comment": "Class types of equipment who's dependency to the pawn shouldn't be removed if they're unequipped.",
        "type": "TSet<UClass*>"
      },
      {
        "name": "mClassRepPolicies",
        "type": "TClassMap<EClassRepPolicy>"
      },
      {
        "name": "mGridCellSize",
        "comment": "The size in uunits of each grid cell",
        "type": "float"
      },
      {
        "name": "mSpatialBiasX",
        "comment": "Essentially \"Min X\" for replication. This is just an initial value. The system will reset itself if actors appears outside of this.",
        "type": "float"
      },
      {
        "name": "mSpatialBiasY",
        "comment": "Essentially \"Min Y\" for replication. This is just an initial value. The system will reset itself if actors appears outside of this.",
        "type": "float"
      },
      {
        "name": "mDynamicActorFrequencyBuckets",
        "comment": "How many buckets to spread dynamic, spatialized actors across. High number = more buckets = smaller effective replication frequency. This happens before individual actors do their own NetUpdateFrequency check.",
        "type": "float"
      },
      {
        "name": "mDisableSpatialRebuild",
        "comment": "\tRebuilds were causing a crash in world tick as the level was still being streamed and did not flush.\n\tSidenote: This crash has been around for awhile with low counts. If a client joins for the first time while the server is streaming a level it will also trigger a rebuild and crash",
        "type": "bool"
      },
      {
        "name": "mActorsWithoutNetConnection",
        "comment": "Actors that are only supposed to replicate to their owning connection, but that did not have a connection on spawn",
        "type": "TArray<AActor*>"
      }
    ]
  },
  {
    "kind": "class",
    "name": "UFGReplicationGraphNode_ConditionallyAlwaysRelevant",
    "category": "UCLASS",
    "extends": [
      "UReplicationGraphNode_ActorList"
    ],
    "methods": [
      {
        "name": "GatherActorListsForConnection",
        "comment": "~ begin UReplicationGraphNode_AlwaysRelevant_ForConnection implementation",
        "returnType": "void"
      },
      {
        "name": "NotifyAddNetworkActor",
        "returnType": "void"
      },
      {
        "name": "NotifyRemoveNetworkActor",
        "returnType": "bool"
      },
      {
        "name": "NotifyResetAllNetworkActors",
        "returnType": "void"
      }
    ],
    "properties": [
      {
        "name": "mAllReplicationActors",
        "type": "FActorRepListRefView"
      }
    ]
  },
  {
    "kind": "class",
    "name": "UFGReplicationGraphNode_AlwaysRelevant_ForConnection",
    "category": "UCLASS",
    "extends": [
      "UReplicationGraphNode_AlwaysRelevant_ForConnection"
    ],
    "methods": [
      {
        "name": "GatherActorListsForConnection",
        "comment": "~ begin UReplicationGraphNode_AlwaysRelevant_ForConnection implementation",
        "returnType": "void"
      },
      {
        "name": "OnLevelVisibilityAdd",
        "comment": "~ end UReplicationGraphNode_AlwaysRelevant_ForConnection implementation",
        "returnType": "void"
      },
      {
        "name": "OnLevelVisibilityRemove",
        "returnType": "void"
      },
      {
        "name": "ResetWorldGameWorldState",
        "returnType": "void"
      }
    ],
    "properties": [
      {
        "name": "mAlwaysRelevantStremingLevels",
        "comment": "Stores levelstreaming actors",
        "type": "TArray<FName,TInlineAllocator<64>>"
      },
      {
        "name": "mInitializedPlayerState",
        "type": "bool"
      }
    ]
  }
]