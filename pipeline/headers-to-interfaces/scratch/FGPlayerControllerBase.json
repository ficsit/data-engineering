[
  {
    "kind": "class",
    "name": "AFGPlayerControllerBase",
    "category": "UCLASS",
    "extends": [
      "APlayerController"
    ],
    "methods": [
      {
        "name": "AFGPlayerControllerBase",
        "comment": "Ctor"
      },
      {
        "name": "GetLifetimeReplicatedProps",
        "comment": "Begin AActor interface",
        "returnType": "void"
      },
      {
        "name": "BeginPlay",
        "returnType": "void"
      },
      {
        "name": "ReplicateSubobjects",
        "returnType": "bool"
      },
      {
        "name": "ClientRestart_Implementation",
        "comment": "Begin APlayerController interface",
        "returnType": "void"
      },
      {
        "name": "AddCheats",
        "returnType": "void"
      },
      {
        "name": "GetIsUsingGamepad",
        "comment": "End APlayerController interface",
        "returnType": "bool"
      },
      {
        "name": "SetIsUsingGamepad",
        "returnType": "void"
      },
      {
        "name": "OnControlledCharacterDied",
        "comment": "@param character - the character that died\n",
        "returnType": "void"
      },
      {
        "name": "OnControlledCharacterRevived",
        "comment": "\n @param character - the character that was revived\n",
        "returnType": "void"
      },
      {
        "name": "FlushPressedKeys",
        "comment": "Exposing flushPressedKeys to BP",
        "returnType": "void"
      },
      {
        "name": "RebindActionKey",
        "comment": "Used for rebinding keys",
        "returnType": "bool"
      },
      {
        "name": "ResetInputBindings",
        "comment": "Removes custom bindings and restores to default",
        "returnType": "void"
      },
      {
        "name": "UpdatePlayerInput",
        "comment": "Inject the input that was rebinded and remove old default",
        "returnType": "void"
      },
      {
        "name": "SetMouseSensitivity",
        "comment": "Sets mouse sensitivity",
        "returnType": "void"
      },
      {
        "name": "GetMouseSensitivity",
        "comment": "Get current sensitivity",
        "returnType": "float"
      },
      {
        "name": "GetMouseSensitivityX",
        "comment": "Get current sensitivity in X axis",
        "returnType": "float"
      },
      {
        "name": "GetMouseSensitivityY",
        "comment": "Get current sensitivity in X axis",
        "returnType": "float"
      },
      {
        "name": "GetDefaultMouseSensitivity",
        "comment": "Get default value for mouse sensitivity",
        "returnType": "float"
      },
      {
        "name": "GetDefaultMouseSensitivityX",
        "comment": "Get default value for mouse sensitivity in X axis",
        "returnType": "float"
      },
      {
        "name": "GetDefaultMouseSensitivityY",
        "comment": "Get default value for mouse sensitivity in Y axis",
        "returnType": "float"
      },
      {
        "name": "GetKeyNameForAction",
        "comment": "Returns readable name for an action",
        "returnType": "FText"
      },
      {
        "name": "GetPresenceString",
        "returnType": "FString"
      },
      {
        "name": "Client_UpdateCappedBandwidth",
        "comment": "Set CurrentNetSpeed to the lower of its current value and Cap, can update during the game to the new value if server updates it's bandwith due to options",
        "returnType": "void"
      },
      {
        "name": "Server_UpdateCappedBandwidth",
        "comment": "Set CurrentNetSpeed to the lower of its current value and Cap, can update during the game to the new value if client updates it's bandwidth",
        "returnType": "void"
      },
      {
        "name": "AdminLogin",
        "returnType": "void"
      },
      {
        "name": "Server_AdminLogin",
        "comment": "Login a player controller with a password, response comes later",
        "returnType": "void"
      },
      {
        "name": "OnAdminRightsGranted",
        "comment": "Setup additional things if we have been granted admin access",
        "returnType": "void"
      },
      {
        "name": "OnAdminRightsRevoked",
        "comment": "Logged out as admin",
        "returnType": "void"
      },
      {
        "name": "Admin",
        "comment": "Try to run a command on the server, require admin rights",
        "returnType": "void"
      },
      {
        "name": "ServerAdmin",
        "returnType": "void"
      },
      {
        "name": "GetAdminInterface",
        "comment": "@return the admin interface if we are logged in as server admin",
        "returnType": "classAFGAdminInterface*"
      },
      {
        "name": "DiscardInput",
        "comment": "Used to discard any input when we are dead",
        "returnType": "void"
      },
      {
        "name": "EnablePlayerInput",
        "comment": "\n @param enable - if true, then we enable our input, false we disable it",
        "returnType": "void"
      },
      {
        "name": "InitDeathInput",
        "comment": "Setup the input component that filters out the input that's used when dead",
        "returnType": "void"
      }
    ],
    "properties": [
      {
        "name": "OnInputChanged",
        "comment": "Called when we rebind any key",
        "type": "FOnInputChanged"
      },
      {
        "name": "mAdminInterface",
        "comment": "Admin interface if we have one available",
        "type": "classAFGAdminInterface*"
      },
      {
        "name": "mReplicatedCheatManager",
        "comment": "If we are allowed to cheat, then we replicate the cheat manager",
        "type": "classUFGCheatManager*"
      },
      {
        "name": "mDisableInputComponent",
        "comment": "The input component used when we want to disable our input",
        "type": "classUInputComponent*"
      },
      {
        "name": "mEnableInputComponent",
        "comment": "The input component used when we want to enable our input",
        "type": "classUInputComponent*"
      },
      {
        "name": "mAllowedInputWhenDead",
        "comment": "Input that's allowed when you are dead",
        "type": "TArray<FName>"
      },
      {
        "name": "mInputEnabled",
        "comment": "If true, the our input is enabled",
        "type": "uint8"
      },
      {
        "name": "mIsUsingGamepad",
        "comment": "Are we using gamepad?",
        "type": "bool"
      }
    ]
  }
]