[
  {
    "kind": "enum",
    "name": "EResourceForm",
    "comment": "The form this item is in, i.e. does it require pipes or conveyors, can the player pick it up etc.",
    "entries": [
      {
        "name": "RF_INVALID",
        "displayName": "Invalid"
      },
      {
        "name": "RF_SOLID",
        "displayName": "Solid"
      },
      {
        "name": "RF_LIQUID",
        "displayName": "Liquid"
      },
      {
        "name": "RF_GAS",
        "displayName": "Gas"
      },
      {
        "name": "RF_HEAT",
        "displayName": "Heat"
      },
      {
        "name": "RF_LAST_ENUM"
      }
    ]
  },
  {
    "kind": "enum",
    "name": "EStackSize",
    "comment": "Stack Size for items",
    "entries": [
      {
        "name": "SS_ONE",
        "displayName": "One"
      },
      {
        "name": "SS_SMALL",
        "displayName": "Small"
      },
      {
        "name": "SS_MEDIUM",
        "displayName": "Medium"
      },
      {
        "name": "SS_BIG",
        "displayName": "Big"
      },
      {
        "name": "SS_HUGE",
        "displayName": "Huge"
      },
      {
        "name": "SS_FLUID",
        "displayName": "Fluid"
      },
      {
        "name": "SS_LAST_ENUM"
      }
    ]
  },
  {
    "kind": "class",
    "name": "FItemView",
    "category": "USTRUCT",
    "extends": [],
    "methods": [
      {
        "name": "FItemView"
      }
    ],
    "properties": [
      {
        "name": "Distance",
        "comment": "The distance to the object when creating it's view",
        "type": "float"
      },
      {
        "name": "FocalOffset",
        "comment": "Where should the camera focus offsetted on the mesh",
        "type": "FVector"
      },
      {
        "name": "CameraPitch",
        "comment": "How much \"down or up\" the camera should be angeled (in degrees) when crating the view",
        "type": "float"
      }
    ]
  },
  {
    "kind": "class",
    "name": "UFGItemDescriptor",
    "category": "UCLASS",
    "comment": "Base for all descriptors in the game like resource, equipment etc.",
    "extends": [
      "UObject"
    ],
    "methods": [
      {
        "name": "UFGItemDescriptor"
      },
      {
        "name": "PostEditChangeProperty",
        "returnType": "void"
      },
      {
        "name": "Serialize",
        "comment": "Begin UObject interface",
        "returnType": "void"
      },
      {
        "name": "PostLoad",
        "returnType": "void"
      },
      {
        "name": "GetForm",
        "comment": "The state of this resource.",
        "returnType": "EResourceForm"
      },
      {
        "name": "GetEnergyValue",
        "comment": "Energy value for this resource if used as fuel.",
        "returnType": "float"
      },
      {
        "name": "GetRadioactiveDecay",
        "comment": "How much radiation this item gives out, 0 means it's not radioactive.",
        "returnType": "float"
      },
      {
        "name": "GetItemName",
        "comment": "Used to get the resource name in blueprints",
        "returnType": "FText"
      },
      {
        "name": "GetItemDescription",
        "comment": "Used to get the resource description in blueprints",
        "returnType": "FText"
      },
      {
        "name": "GetAbbreviatedDisplayName",
        "comment": "Used to get the abbreviated name of the item in blueprints",
        "returnType": "FText"
      },
      {
        "name": "GetPreviewView",
        "comment": "Get the view to use when previewing this item",
        "returnType": "void"
      },
      {
        "name": "GetIconView",
        "comment": "Get the view to use when previewing this item",
        "returnType": "void"
      },
      {
        "name": "GetItemIcon",
        "comment": "@todo This has been deprecated for a while, cleanup crew? G2 2019-06-12\nThe icon to be used in UI.",
        "returnType": "FSlateBrush"
      },
      {
        "name": "GetSmallIcon",
        "comment": "The small icon of the item",
        "returnType": "UTexture2D*"
      },
      {
        "name": "GetBigIcon",
        "comment": "The big icon of the item",
        "returnType": "UTexture2D*"
      },
      {
        "name": "GetItemMesh",
        "comment": "The static mesh we want for representing the resource when they are in the production line.\n@return The items mesh; a default mesh if the item has no mesh specified, nullptr if inClass is nullptr.",
        "returnType": "classUStaticMesh*"
      },
      {
        "name": "GetStackSize",
        "comment": "Returns the number of items of a certain type we can stack in one inventory slot",
        "returnType": "int32"
      },
      {
        "name": "GetStackSizeConverted",
        "comment": "Returns the number of items of a certain type we can stack in one inventory slot converted by its resource form to match a unit specification\neg. Liquid Descriptors will divided by 1000 to switch from liters to m^3",
        "returnType": "float"
      },
      {
        "name": "CanBeDiscarded",
        "comment": "Returns if this item can be discarded",
        "returnType": "bool"
      },
      {
        "name": "RememberPickUp",
        "comment": "Returns if we should store if this item ever has been picked up",
        "returnType": "bool"
      },
      {
        "name": "GetItemCategory",
        "comment": "Returns the item category",
        "returnType": "TSubclassOf<UFGItemCategory>"
      },
      {
        "name": "GetFluidDensity",
        "comment": "Returns the density if this is a fluid.",
        "returnType": "float"
      },
      {
        "name": "GetFluidViscosity",
        "comment": "Returns the viscosity if this is a fluid.",
        "returnType": "float"
      },
      {
        "name": "GetFluidFriction",
        "comment": "Returns the friction of this fluid.",
        "returnType": "float"
      },
      {
        "name": "GetFluidColor",
        "comment": "Returns the color of this is a fluid.",
        "returnType": "FColor"
      },
      {
        "name": "GetFluidColorLinear",
        "comment": "Returns the color of this fluid ( if it is one ) as type FLinearColor",
        "returnType": "FLinearColor"
      },
      {
        "name": "DeleteAllIcons",
        "comment": "Delete all icons in the game that's referenced by a FGItemDescriptor",
        "returnType": "void"
      },
      {
        "name": "GenerateAllIcons",
        "comment": "Go through all FGItemDescriptor and generate a Icon for them",
        "returnType": "void"
      },
      {
        "name": "GetCenterOfCollision",
        "comment": "Calculate the bounds of this item",
        "returnType": "FVector"
      },
      {
        "name": "GetItemNameInternal",
        "comment": "Internal function to get the display name.",
        "returnType": "FText"
      },
      {
        "name": "GetItemDescriptionInternal",
        "comment": "Internal function to get the display description.",
        "returnType": "FText"
      },
      {
        "name": "BeginGenerateIcons",
        "comment": "Setup for generating icons",
        "returnType": "void"
      },
      {
        "name": "EndGenerateIcons",
        "comment": "Cleanup after generating icon",
        "returnType": "void"
      },
      {
        "name": "ClearStage",
        "comment": "Clear the stage",
        "returnType": "void"
      },
      {
        "name": "SetupStage",
        "comment": "Let all the classes setup the stage the way it prefer, subclasses probably don't want to call Super",
        "returnType": "void"
      },
      {
        "name": "GenerateIcon",
        "comment": "Generate a icon for this item",
        "returnType": "void"
      },
      {
        "name": "GetItemName",
        "comment": "Get the item name from this class (Desc_IronScrew_C, becomes IronScrew)",
        "returnType": "void"
      },
      {
        "name": "GetCurrentFolderPath",
        "comment": "Get the folder path to the current class (/Game/FactoryGame/Resources/Parts/IronScrew)",
        "returnType": "void"
      },
      {
        "name": "GenerateIconName",
        "comment": "Let this class generate a package and asset name for the icon",
        "returnType": "void"
      },
      {
        "name": "GenerateMaterialInstanceName",
        "comment": "Let this class generate a package and asset name for the material instance",
        "returnType": "void"
      },
      {
        "name": "CreatePreviewComponent",
        "comment": "Decide what components we want in our icon preview",
        "returnType": "classUSceneComponent*"
      },
      {
        "name": "CalculateComponentBounds",
        "comment": "Abuse of the duplicate component system to calculate the bounds of a item... Ssssshhhh... Just walk away",
        "returnType": "classUSceneComponent*"
      }
    ],
    "properties": [
      {
        "name": "mUseDisplayNameAndDescription",
        "comment": "This is specified in the native constructor and is meant to be per class.\nE.g. vehicle descriptors get name and description from the vehicle class so the defaults are useless.",
        "type": "bool"
      },
      {
        "name": "mDisplayName",
        "comment": "Readable name of the item",
        "type": "FText"
      },
      {
        "name": "mDescription",
        "comment": "Readable description of the item",
        "type": "FText"
      },
      {
        "name": "mAbbreviatedDisplayName",
        "comment": "Abbreviated name of the item",
        "type": "FText"
      },
      {
        "name": "mStackSize",
        "comment": "How many of this item can be in the same slot in an inventory",
        "type": "EStackSize"
      },
      {
        "name": "mCanBeDiscarded",
        "comment": "Indicates if this item can be thrown in the trash or not",
        "type": "bool"
      },
      {
        "name": "mRememberPickUp",
        "comment": "Do we want to know if this item ever has been picked up",
        "type": "bool"
      },
      {
        "name": "mEnergyValue",
        "comment": "Energy value for this resource if used as fuel. In megawatt seconds (MWs), a.k.a. mega joule (MJ)",
        "type": "float"
      },
      {
        "name": "mRadioactiveDecay",
        "comment": "0 means no radiation and 1 is 10^15 (1 quadrillion) decays/s.\nGood values are in the range 0 to 1.",
        "type": "float"
      },
      {
        "name": "mForm",
        "comment": "The state of this resource (cannot change during it's lifetime).",
        "type": "EResourceForm"
      },
      {
        "name": "mInventoryIcon",
        "comment": "@todo @save Maybe clean this up at a later point? /G2 2018-10-25\nOld brush used for UI, can't be DEPRECATED_ as it won't work in shipping builds during conversion then",
        "type": "FSlateBrush"
      },
      {
        "name": "mSmallIcon",
        "comment": "Small icon of the item, always in memory",
        "type": "UTexture2D*"
      },
      {
        "name": "mPersistentBigIcon",
        "comment": "Big icon of the item, SHOULD only be loaded by demand, but right now persistent in memory",
        "type": "UTexture2D*"
      },
      {
        "name": "mConveyorMesh",
        "comment": "The static mesh we want for representing the resource when they are in the production line.",
        "type": "classUStaticMesh*"
      },
      {
        "name": "mPreviewView",
        "comment": "The view in the build menu for this item",
        "type": "FItemView"
      },
      {
        "name": "mItemCategory",
        "comment": "The category for this item",
        "type": "TSubclassOf<classUFGItemCategory>"
      },
      {
        "name": "mComponentBounds",
        "comment": "Internal variable used when calculating the bounds of a descriptor",
        "type": "FBox"
      },
      {
        "name": "GenerateIconContext",
        "comment": "Context used when generating icon data",
        "type": "staticFGenerateIconContext"
      },
      {
        "name": "mIconYaw",
        "comment": "The jaw of the object when rendering the icon",
        "type": "float"
      },
      {
        "name": "mIconView",
        "comment": "The distance to the object when rendering the icon",
        "type": "FItemView"
      },
      {
        "name": "mFluidDensity",
        "comment": "Density for this fluid.\nForm must be liquid or gas for this to be useful.",
        "type": "float"
      },
      {
        "name": "mFluidViscosity",
        "comment": "Friction for this fluid, this is the friction inside the fluid itself.\nForm must be liquid or gas for this to be useful.",
        "type": "float"
      },
      {
        "name": "mFluidFriction",
        "comment": "Friction for this fluid, this is the friction between the fluid and the pipe.\nForm must be liquid or gas for this to be useful.",
        "type": "float"
      },
      {
        "name": "mFluidColor",
        "comment": "Color for this fluid, RGB is the color and A is the transparency of the fluid.\nForm must be liquid or gas for this to be useful.",
        "type": "FColor"
      }
    ]
  }
]