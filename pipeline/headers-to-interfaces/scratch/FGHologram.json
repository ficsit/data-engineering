[
  {
    "kind": "enum",
    "name": "EHologramScrollMode",
    "comment": "Enum for different scroll modes a hologram can implement.",
    "entries": [
      {
        "name": "HSM_NONE",
        "displayName": "None"
      },
      {
        "name": "HSM_ROTATE",
        "displayName": "Rotate"
      },
      {
        "name": "HSM_RAISE_LOWER",
        "displayName": "Raise/Lower"
      },
      {
        "name": "HSM_SPLINE_PATH_MODE",
        "displayName": "Spline Mode"
      },
      {
        "name": "HSM_MAX"
      }
    ]
  },
  {
    "kind": "class",
    "name": "AFGHologram",
    "category": "UCLASS",
    "extends": [
      "AActor",
      "IFGConstructionMessageInterface"
    ],
    "methods": [
      {
        "name": "AFGHologram"
      },
      {
        "name": "GetLifetimeReplicatedProps",
        "comment": "Replication",
        "returnType": "void"
      },
      {
        "name": "IsNetRelevantFor",
        "returnType": "bool"
      },
      {
        "name": "SpawnHologramFromRecipe",
        "comment": "Spawns a hologram from recipe",
        "returnType": "AFGHologram*"
      },
      {
        "name": "SpawnChildHologramFromRecipe",
        "comment": "Spawns a hologram from recipe and sets is as child to specified parent",
        "returnType": "AFGHologram*"
      },
      {
        "name": "SetRecipe",
        "comment": "Set the item descriptor for this hologram, called when setting up the hologram, before BeginPlay.",
        "returnType": "void"
      },
      {
        "name": "GetItemDescriptor",
        "comment": "Get the item descriptor for the building being built.",
        "returnType": "TSubclassOf<classUFGItemDescriptor>"
      },
      {
        "name": "SetConstructionInstigator",
        "comment": "Set who is building with this hologram.",
        "returnType": "void"
      },
      {
        "name": "GetConstructionInstigator",
        "returnType": "APawn*"
      },
      {
        "name": "SerializeOntoConstructHologramMessage",
        "comment": "Applies the hologram's net data serailization needed to send a valid constructHologramMessage",
        "returnType": "void"
      },
      {
        "name": "DeserializeFromConstructHologramMessage",
        "comment": "Deserializes hologram data and applies it to the hologram. This will also run hologram validation.",
        "returnType": "void"
      },
      {
        "name": "SerializeConstructMessage",
        "comment": "Net Construction Messages",
        "returnType": "void"
      },
      {
        "name": "ClientPreConstructMessageSerialization",
        "returnType": "void"
      },
      {
        "name": "ServerPostConstructMessageDeserialization",
        "returnType": "void"
      },
      {
        "name": "OnConstructMessagedDeserialized_Implementation",
        "returnType": "void"
      },
      {
        "name": "BeginPlay",
        "comment": "Do all custom initialization here.",
        "returnType": "void"
      },
      {
        "name": "Destroyed",
        "returnType": "void"
      },
      {
        "name": "SetActorHiddenInGame",
        "returnType": "void"
      },
      {
        "name": "IsValidHitResult",
        "comment": "@return true if the hit result is invalid for SetLocationAndRotation, this causes the hologram to be hidden and updating to be skipped.",
        "returnType": "bool"
      },
      {
        "name": "TryUpgrade",
        "comment": "See if the hit actor can be upgraded with this hologram and set the holograms location and rotation accordingly.\n@return true if an upgrade is possible; false if not.",
        "returnType": "bool"
      },
      {
        "name": "AdjustForGround",
        "comment": "Adjust the placement for the ground, this should be the last step in the placement. Usually for things such as updating legs on buildings and such.",
        "returnType": "void"
      },
      {
        "name": "TrySnapToActor",
        "comment": "\t   If returning true, we assume location and snapping is applied, and no further location and rotation will be updated this frame by the build gun.\n@return true if we can snap; false if not.",
        "returnType": "bool"
      },
      {
        "name": "SetHologramLocationAndRotation",
        "comment": "\n @param hitResult - the hit result from the trace preformed in BuildGun",
        "returnType": "void"
      },
      {
        "name": "OnInvalidHitResult",
        "comment": "Notify that the hologram hit result is NOT valid and that the hologram is sett to hidden in game. Will usually trigger when E.g. Aiming up in the sky.\n\t (Called when the IsValidHitResult returns false.)",
        "returnType": "void"
      },
      {
        "name": "ValidatePlacementAndCost",
        "comment": "Checks placement and cost. Default behavior is to call functions, CheckCanAfford, consider placement if the actor is visible and not an upgrade. Also responsible for applying the valid/invalid render materials with the SetMaterial function. Will do the same on all active child holograms.",
        "returnType": "void"
      },
      {
        "name": "DoMultiStepPlacement",
        "comment": "\n @return - true if placement is finished and Construct can be called; false if placement is not finished.",
        "returnType": "bool"
      },
      {
        "name": "Scroll",
        "comment": "Update scroll input on the hologram. Default is to branch on mScrollMode and call ScrollRotate() or change the mScrollRaiseLowerValue with the input.\n@param delta\tThe scroll direction and amount, negative is down and positive is up.",
        "returnType": "void"
      },
      {
        "name": "ScrollRotate",
        "comment": "@todoscroll Cleanup or use old scroll with modes, there are some problems with how it was implemented before -G2",
        "returnType": "void"
      },
      {
        "name": "GetScrollRotateValue",
        "returnType": "int32"
      },
      {
        "name": "SetScrollRotateValue",
        "returnType": "void"
      },
      {
        "name": "SetInitialScrollValue",
        "comment": "\n @param scrollMode - if this scroll mode isn't supported, no value will be set\n@param scrollValue - the value we want to set to the scroll mode",
        "returnType": "void"
      },
      {
        "name": "GetScrollValue",
        "comment": "\n @param scrollMode - the scroll mode we want to get the scroll value of\n@return if scrollMode is HSM_NONE or invalid, then we return 0",
        "returnType": "int32"
      },
      {
        "name": "SetScrollMode",
        "comment": "Change the scroll mode on the hologram if many.",
        "returnType": "void"
      },
      {
        "name": "GetScrollMode",
        "comment": "Get the currently active scroll mode.",
        "returnType": "EHologramScrollMode"
      },
      {
        "name": "IsScrollModeSupported",
        "comment": "Set the active scroll mode, changes what happens when Scroll is called.",
        "returnType": "bool"
      },
      {
        "name": "GetSupportedScrollModes",
        "comment": "Change the scroll mode on the hologram if many.\n@param out_modes\t\tArray with the supported modes in the preferred toggle order.",
        "returnType": "void"
      },
      {
        "name": "GetSupportedSplineModes",
        "comment": "Get the target spline path modes implemented for spline based holograms\n@param out_splineModes\t Array with all supported spline pathing modes",
        "returnType": "void"
      },
      {
        "name": "GetSplineMode",
        "returnType": "EHologramSplinePathMode"
      },
      {
        "name": "SetSplineMode",
        "returnType": "void"
      },
      {
        "name": "SetNoSnapMode",
        "comment": "Set the no snap mode. @see mNoSnapMode",
        "returnType": "void"
      },
      {
        "name": "SetSnapToGuideLines",
        "comment": "Set hologram to snap to guide lines",
        "returnType": "void"
      },
      {
        "name": "Server_SetSnapToGuideLines",
        "comment": "Set hologram to snap to guide lines on server",
        "returnType": "void"
      },
      {
        "name": "GetNoSnapMode",
        "comment": "@return true if no snap mode is enabled; false otherwise.",
        "returnType": "bool"
      },
      {
        "name": "SetPlacementMaterial",
        "comment": "Set the placement material, this is updated when calling ValidatePlacementAndCost, so call this only if you want to override it.\n@param material - This is represented as a bool valid placement material (true), invalid placement material (false).",
        "returnType": "void"
      },
      {
        "name": "IsChanged",
        "comment": "If the hologram contains changes that can be reset using the right mouse button, e.g. multi step placement and rotation.\n@return true if the hologram has changes; false if the hologram is in vanilla condition.",
        "returnType": "bool"
      },
      {
        "name": "IsUpgrade",
        "comment": "@return Does this hologram upgrade/replace another building.",
        "returnType": "bool"
      },
      {
        "name": "GetUpgradedActor",
        "comment": "@return The actor to replace when upgrading; if any. AKA, the target for the upgrade.",
        "returnType": "AActor*"
      },
      {
        "name": "CanConstruct",
        "comment": "@return true if the hologram can be constructed.",
        "returnType": "bool"
      },
      {
        "name": "CanTakeNextBuildStep",
        "returnType": "bool"
      },
      {
        "name": "Construct",
        "comment": "@param out_children All children constructed, if any.\n@return The constructed actor; nullptr on failure.",
        "returnType": "AActor*"
      },
      {
        "name": "OnPendingConstructionHologramCreated",
        "comment": "Even on if this hologram was constructed as a pending hologram",
        "returnType": "void"
      },
      {
        "name": "OnHologramTimeout",
        "returnType": "void"
      },
      {
        "name": "GetBaseCost",
        "comment": "The base cost for this hologram.",
        "returnType": "TArray<FItemAmount>"
      },
      {
        "name": "GetBaseCostMultiplier",
        "comment": "Get the multiplier for the base cost, e.g. if this hologram cost per length unit.",
        "returnType": "int32"
      },
      {
        "name": "GetCost",
        "comment": "@param includeChildren Include child holograms cost in the cost.\n@note DO NOT expose this to blueprint, use the provided functions in the build guns build state.",
        "returnType": "TArray<FItemAmount>"
      },
      {
        "name": "GetClearanceDetector",
        "comment": "Can be null if the building has no clearance",
        "returnType": "classUBoxComponent*"
      },
      {
        "name": "GetRecipe",
        "returnType": "TSubclassOf<classUFGRecipe>"
      },
      {
        "name": "HasClearance",
        "comment": "Can be null if the building has no clearance",
        "returnType": "bool"
      },
      {
        "name": "SetDisabled",
        "comment": "Disable this hologram.",
        "returnType": "void"
      },
      {
        "name": "IsDisabled",
        "comment": "@return Is this hologram disabled.",
        "returnType": "bool"
      },
      {
        "name": "SpawnChildren",
        "comment": "@param state The build gun state responsible for spawning the states.\n             Use state->SpawnChildHologram( ... )",
        "returnType": "void"
      },
      {
        "name": "AddChild",
        "comment": "Add a child hologram",
        "returnType": "void"
      },
      {
        "name": "AddConstructDisqualifier",
        "comment": "Function to add disqualifiers",
        "returnType": "void"
      },
      {
        "name": "GetConstructDisqualifiers",
        "comment": "@return true if the hologram can be constructed.",
        "returnType": "void"
      },
      {
        "name": "ResetConstructDisqualifiers",
        "comment": "Empty the array of construct disqualifiers",
        "returnType": "void"
      },
      {
        "name": "UsesBuildClearanceOverlapSnapping",
        "comment": "Returns true if this building want to snap to other buildings clearances with it's own clearance when receiving invalid placements due to overlapping clearances",
        "returnType": "bool"
      },
      {
        "name": "SetUseAutomaticBuildClearanceOverlapSnapp",
        "comment": "Set how the mUseBuildClearanceOverlapSnapp should be applied when enabled",
        "returnType": "void"
      },
      {
        "name": "GetIsPendingToBeConstructed",
        "comment": "Returns whether or not this hologram is representing a construction event for client that is waiting for a server response.",
        "returnType": "bool"
      },
      {
        "name": "SetIsPendingToBeConstructed",
        "returnType": "void"
      },
      {
        "name": "UpdateRotationValuesFromTransform",
        "comment": "Take the current transform and apply it to the scroll rotation value.",
        "returnType": "void"
      },
      {
        "name": "SetLocalPendingConstructionID",
        "comment": "Adds a local construction ID associated with this hologram. Only used if this hologram is pending construction",
        "returnType": "void"
      },
      {
        "name": "GetLocalPendingConstructionID",
        "returnType": "FNetConstructionID"
      },
      {
        "name": "SetBuildClass",
        "comment": "\t/\n Set the build class for this hologram, called before BeginPlay.",
        "returnType": "void"
      },
      {
        "name": "SetupClearance",
        "comment": "etup clearance if possible and needed\nefault is to assign the mClearanceDetector by making a copy. This will happen and override the existing detector if called multiple times...",
        "returnType": "void"
      },
      {
        "name": "SetupClearanceDetector",
        "returnType": "void"
      },
      {
        "name": "DuplicateComponent",
        "comment": "Duplicate component for the hologram",
        "returnType": "T*"
      },
      {
        "name": "CheckValidPlacement",
        "comment": "@return true if the placement is valid, false otherwise.",
        "returnType": "void"
      },
      {
        "name": "CheckCanAfford",
        "comment": "@return true if we can afford to build the hologram; false otherwise.",
        "returnType": "void"
      },
      {
        "name": "OnSnap",
        "comment": "E.g. a conveyor snapped to an output.\nNOT called when we align to a grid, e.g. building placed on a foundation or wall \"snapped\" to another wall.",
        "returnType": "void"
      },
      {
        "name": "OnRep_PlacementMaterial",
        "comment": "So we can set the material on client.",
        "returnType": "void"
      },
      {
        "name": "SetMaterial",
        "comment": "\n @param material - The new override material.",
        "returnType": "void"
      },
      {
        "name": "GetActorClass",
        "comment": "@todo This has the same name as a deprecated function in Actor, rename.",
        "returnType": "TSubclassOf<AActor>"
      },
      {
        "name": "SetupComponent",
        "comment": "@param componentTemplate - Create the component using this template.\n@return - The newly created component.",
        "returnType": "USceneComponent*"
      },
      {
        "name": "SetupDepthMeshComponent",
        "comment": "@note This does not work well with animated skeletal meshes, so do not add animations to holograms.\n@todo FIXME when custom depth works with translucent materials.",
        "returnType": "void"
      },
      {
        "name": "SetIsChanged",
        "comment": "Mark the hologram as changed.",
        "returnType": "void"
      },
      {
        "name": "IsLocalHologram",
        "comment": "@return true if this is a local hologram, placed by a locally controlled player; false if a remote hologram.",
        "returnType": "bool"
      },
      {
        "name": "AddValidHitClass",
        "comment": "Use this to add a valid hit class for this hologram in blueprints begin play.",
        "returnType": "void"
      },
      {
        "name": "IsValidHitActor",
        "comment": "Check if a class is a valid hit.",
        "returnType": "bool"
      },
      {
        "name": "GetRotationStep",
        "comment": "@return The overridden rotation step size to use when rotating.",
        "returnType": "int32"
      },
      {
        "name": "ApplyScrollRotationTo",
        "comment": "Applies the user rotation to the given base rotation. [degrees]\n@return The rotation with the users rotation applied.",
        "returnType": "float"
      },
      {
        "name": "SetupComponents",
        "comment": "This initiate all the component copying and other setup calls. Called in early begin play.\nSetup the components from the buildable, meshes, collisions, connections etc.",
        "returnType": "void"
      },
      {
        "name": "Client_PlaySnapSound",
        "comment": "Play snapping sound. @todo Now when things are simulated, this can be done locally",
        "returnType": "void"
      },
      {
        "name": "OnRep_InitialScrollModeValue",
        "returnType": "void"
      }
    ],
    "properties": [
      {
        "name": "mHologramTimeoutTimerHandler",
        "type": "FTimerHandle"
      },
      {
        "name": "mValidHitClasses",
        "comment": "By default all static geometry is considered valid.\nBuildings, vehicles and pawns are not considered valid by default.",
        "type": "TArray<TSubclassOf<classAActor>>"
      },
      {
        "name": "mRecipe",
        "comment": "The recipe for this hologram.",
        "type": "TSubclassOf<classUFGRecipe>"
      },
      {
        "name": "mLoopSound",
        "comment": "Looping sound to play on holograms",
        "type": "classUAkComponent*"
      },
      {
        "name": "mClearanceDetector",
        "comment": "Clearance detector box. Used to detect nearby clearances an display them during the build steps",
        "type": "classUBoxComponent*"
      },
      {
        "name": "mNoSnapMode",
        "comment": "No enforced snapping, foundations use this for now.",
        "type": "bool"
      },
      {
        "name": "mSnapToGuideLines",
        "comment": "Whether the hologram should snap to guide lines or not",
        "type": "bool"
      },
      {
        "name": "mScrollMode",
        "comment": "Current scroll mode, determines what calls to Scroll() does.",
        "type": "EHologramScrollMode"
      },
      {
        "name": "mScrollRotation",
        "comment": "Current scroll value of the rotation. How this is interpreted as a rotation is up to the hologram placement code.",
        "type": "int32"
      },
      {
        "name": "mScrollRaiseLowerValue",
        "comment": "Current scroll value of the raise/lower. How this is interpreted as a height is up to the hologram placement code.",
        "type": "int32"
      },
      {
        "name": "mSplineMode",
        "comment": "Current scroll value of the Spline path enum. How this enum is used depends on individual spline based hologram implementation",
        "type": "EHologramSplinePathMode"
      },
      {
        "name": "mPlacementMaterial",
        "comment": "Can we construct the building, updated by SetCanConstruct from the build gun.",
        "type": "bool"
      },
      {
        "name": "mValidPlacementMaterial",
        "comment": "Material on hologram for valid placement.",
        "type": "classUMaterialInstance*"
      },
      {
        "name": "mInvalidPlacementMaterial",
        "comment": "Material on hologram for invalid placement.",
        "type": "classUMaterialInstance*"
      },
      {
        "name": "HOLOGRAM_MESH_TAG",
        "comment": "Tags for marking components in the hologram.",
        "type": "staticconstFName"
      },
      {
        "name": "HOLOGRAM_DEPTH_MESH_TAG",
        "type": "staticconstFName"
      },
      {
        "name": "mChildren",
        "comment": " - validate placement for children.\n - set correct materials on children.",
        "type": "TArray<classAFGHologram*>"
      },
      {
        "name": "mUseSimplifiedHologramMaterial",
        "comment": "Should we use the simplified material for valid placement?",
        "type": "bool"
      },
      {
        "name": "mLocalNetConstructionID",
        "comment": "Used to identify buildables on client once server has spawned the building",
        "type": "FNetConstructionID"
      },
      {
        "name": "mBuildClass",
        "comment": "The class for the build actor this hologram wants to construct. Set on spawn.",
        "type": "TSubclassOf<AActor>"
      },
      {
        "name": "mUseBuildClearanceOverlapSnapp",
        "type": "bool"
      },
      {
        "name": "mUseAutomaticBuildClearanceOverlapSnapp",
        "type": "bool"
      },
      {
        "name": "mConstructDisqualifiers",
        "comment": "The reason why we couldn't construct this hologram, if it's empty then we can construct it",
        "type": "TArray<TSubclassOf<classUFGConstructDisqualifier>>"
      },
      {
        "name": "mConstructionInstigator",
        "comment": "Who is building",
        "type": "APawn*"
      },
      {
        "name": "mIsDisabled",
        "comment": "If this hologram is disabled and should not be visible or constructed.",
        "type": "bool"
      },
      {
        "name": "mIsChanged",
        "comment": "If the hologram has changed, i.e. multi step placement or rotation.",
        "type": "bool"
      },
      {
        "name": "mInitialScrollModeValue",
        "comment": "The client needs to know the initial saved scroll mode value from the BuildGun.",
        "type": "int32"
      },
      {
        "name": "mIsPendingToBeConstructed",
        "comment": "This hologram is marked to be constructed, will not disappear if the build gun is unequipped for client",
        "type": "bool"
      },
      {
        "name": "mConstructionPosition",
        "comment": "Temp memory holders for when holograms are serialized for construction messages (replication)",
        "type": "FVector"
      },
      {
        "name": "mConstructionRotation",
        "comment": "Temp memory holders for when holograms are serialized for construction messages (replication)",
        "type": "FRotator"
      }
    ]
  }
]