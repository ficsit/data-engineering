[
  {
    "kind": "enum",
    "name": "EEquipmentSlot",
    "comment": "Equipments are equip on different slots on the player. One EQ per slot. These are the slots.",
    "entries": [
      {
        "name": "ES_NONE",
        "displayName": "Please specify a slot."
      },
      {
        "name": "ES_ARMS",
        "displayName": "Arms"
      },
      {
        "name": "ES_BACK",
        "displayName": "Body"
      },
      {
        "name": "ES_MAX"
      }
    ]
  },
  {
    "kind": "class",
    "name": "AFGEquipment",
    "category": "UCLASS",
    "comment": "Base class for all kinds of equipment in the game.",
    "extends": [
      "AActor",
      "IFGSaveInterface",
      "IFGReplicationDependencyActorInterface"
    ],
    "methods": [
      {
        "name": "AFGEquipment"
      },
      {
        "name": "GetLifetimeReplicatedProps",
        "comment": "Begin AActor interface",
        "returnType": "void"
      },
      {
        "name": "PreReplication",
        "returnType": "void"
      },
      {
        "name": "BeginPlay",
        "returnType": "void"
      },
      {
        "name": "PreSaveGame_Implementation",
        "comment": "Begin IFGSaveInterface",
        "returnType": "void"
      },
      {
        "name": "PostSaveGame_Implementation",
        "returnType": "void"
      },
      {
        "name": "PreLoadGame_Implementation",
        "returnType": "void"
      },
      {
        "name": "PostLoadGame_Implementation",
        "returnType": "void"
      },
      {
        "name": "GatherDependencies_Implementation",
        "returnType": "void"
      },
      {
        "name": "NeedTransform_Implementation",
        "returnType": "bool"
      },
      {
        "name": "ShouldSave_Implementation",
        "returnType": "bool"
      },
      {
        "name": "Equip",
        "comment": "Equips the equipment.",
        "returnType": "void"
      },
      {
        "name": "UnEquip",
        "comment": "Put the equipment away.",
        "returnType": "void"
      },
      {
        "name": "OnDefaultPrimaryFirePressed",
        "comment": "Called on the owner, client or server but not both.",
        "returnType": "void"
      },
      {
        "name": "Server_DefaultPrimaryFire",
        "comment": "Only server implementation of primary fire",
        "returnType": "void"
      },
      {
        "name": "DoDefaultPrimaryFire",
        "comment": "BP hook for implementing what should actually happen when pressing fire",
        "returnType": "void"
      },
      {
        "name": "DoDefaultPrimaryFireEffects",
        "comment": "Plays effects when using default primary fire",
        "returnType": "void"
      },
      {
        "name": "DoDefaultPrimaryFire_Native",
        "comment": "Native only function that does default stuff needed for the default primary fire event",
        "returnType": "void"
      },
      {
        "name": "CanDoDefaultPrimaryFire",
        "comment": "Native only function that does default stuff needed for the default primary fire event",
        "returnType": "bool"
      },
      {
        "name": "IsEquipped",
        "comment": "Is this equipment equipped.\n@return - true if equiped; otherwise false.",
        "returnType": "bool"
      },
      {
        "name": "GetInstigatorCharacter",
        "comment": "Convenience blueprint function to return Instigator as a FGCharacterPlayer\n@return The instigator for this equipment; nullptr if not equipped or Instigator is not an FGCharacterPlayer.",
        "returnType": "classAFGCharacterPlayer*"
      },
      {
        "name": "IsLocalInstigator",
        "comment": "@return Is the instigator locally controlled; false if no instigator.",
        "returnType": "bool"
      },
      {
        "name": "ShouldSaveState",
        "comment": "@todo Refine this for equipments that could have a null state, i.e. unloaded weapons can be discarded but loaded weapons need to be saved.\n@todo Expose to blurre for mods.",
        "returnType": "bool"
      },
      {
        "name": "SetAttachment",
        "comment": "Sets the current attachment for this weapon",
        "returnType": "void"
      },
      {
        "name": "SetSecondaryAttachment",
        "comment": "Sets the current attachment for this weapon",
        "returnType": "void"
      },
      {
        "name": "GetArmsAnimation",
        "comment": "Get the arms animation to play on the player",
        "returnType": "EArmEquipment"
      },
      {
        "name": "GetBackAnimation",
        "comment": "Get the back animation to play on the player",
        "returnType": "EBackEquipment"
      },
      {
        "name": "GetAttachment",
        "comment": "Get the attachment for this equipment.",
        "returnType": "classAFGEquipmentAttachment*"
      },
      {
        "name": "GetSecondaryAttachment",
        "returnType": "classAFGEquipmentAttachment*"
      },
      {
        "name": "GetAttachment",
        "comment": "Get the attachment for this equipment.\n@return - The attachment; nullptr if attachment is not a child of class C.",
        "returnType": "C*"
      },
      {
        "name": "GetSecondaryAttachment",
        "comment": "Get the secondary attachment for this equipment.\n@return - The attachment; nullptr if attachment is not a child of class C.",
        "returnType": "C*"
      },
      {
        "name": "Server_UpdateAttachmentUseState",
        "comment": "This is called to update the relevant attachments' use state so that animations can be played etc.",
        "returnType": "void"
      },
      {
        "name": "GetEquipmentSlot",
        "comment": "\t/\n Returns the enum for the equipment slot, ARMS, BACK etc.",
        "returnType": "EEquipmentSlot"
      },
      {
        "name": "SpawnChildEquipment",
        "comment": "Called after the spawning of this equipment to spawn any child dependencies",
        "returnType": "void"
      },
      {
        "name": "ShouldShowStinger",
        "comment": "Should we play stinger animation",
        "returnType": "bool"
      },
      {
        "name": "SetFirstTimeEquipped",
        "comment": "Sets if this is the first time this was equipped",
        "returnType": "void"
      },
      {
        "name": "GetIdlePoseAnimation",
        "comment": "@return idle pose animation, can be NULL",
        "returnType": "classUAnimSequence*"
      },
      {
        "name": "GetIdlePoseAnimation3p",
        "comment": "@return idle pose animation for 3p, can be NULL",
        "returnType": "classUAnimSequence*"
      },
      {
        "name": "WasEquipped",
        "comment": "Was the equipment equipped.",
        "returnType": "void"
      },
      {
        "name": "WasUnEquipped",
        "comment": "Was the equipment put away.",
        "returnType": "void"
      },
      {
        "name": "AddEquipmentHUD",
        "comment": "Add HUD that this equipment needs",
        "returnType": "void"
      },
      {
        "name": "RemoveEquipmentHUD",
        "comment": "Removes HUD for the equipment",
        "returnType": "void"
      },
      {
        "name": "SetEquipmentTicks",
        "comment": "Sets tick status for actor and all components",
        "returnType": "void"
      },
      {
        "name": "BindActionHelper",
        "comment": "Helper for binding actions and setting their consume status",
        "returnType": "void"
      },
      {
        "name": "AddEquipmentActionBindings",
        "comment": "Add custom bindings for this equipment",
        "returnType": "void"
      },
      {
        "name": "ClearEquipmentActionBindings",
        "comment": "Clear all action bindings for this equipment, meaning that we will remove all inputs we are listening for",
        "returnType": "void"
      },
      {
        "name": "CanAffordUse",
        "comment": "True if we can afford the cost of using this equipment",
        "returnType": "bool"
      },
      {
        "name": "DidNotAffordUse",
        "comment": "Called if we couldn't afford to use the equipment",
        "returnType": "void"
      },
      {
        "name": "ChargeForUse",
        "comment": "Consumes the cost of using this equipment, will call Server_ChargeForUse if we don't have authority",
        "returnType": "void"
      },
      {
        "name": "Server_ChargeForUse",
        "comment": "Will call ChargeForUse_Internal on server",
        "returnType": "void"
      },
      {
        "name": "ChargeForUse_Internal",
        "comment": "Does the actual charging of cost on both server and client",
        "returnType": "void"
      }
    ],
    "properties": [
      {
        "name": "mAttachmentClass",
        "comment": "This is the attachment for this class",
        "type": "TSubclassOf<classAFGEquipmentAttachment>"
      },
      {
        "name": "mSecondaryAttachmentClass",
        "comment": "This is the secondary attachment for this class",
        "type": "TSubclassOf<classAFGEquipmentAttachment>"
      },
      {
        "name": "mEquipmentSlot",
        "comment": "To what slot is this limited to?",
        "type": "EEquipmentSlot"
      },
      {
        "name": "mSprintHeadBobShake",
        "comment": "Camera shake to play when sprinting",
        "type": "TSubclassOf<classUCameraShake>"
      },
      {
        "name": "mEquipSound",
        "comment": "@todo Are these used by Joel or legacy?\nSound played when equipping",
        "type": "classUAkAudioEvent*"
      },
      {
        "name": "mUnequipSound",
        "comment": "Sound played when unequipping",
        "type": "classUAkAudioEvent*"
      },
      {
        "name": "mEquipmentWidget",
        "comment": "Class of widget to add when equipping this equipment",
        "type": "TSubclassOf<UUserWidget>"
      },
      {
        "name": "mChildEquipment",
        "comment": "Holds a reference to the child equipment that may be spawned with this",
        "type": "classAFGEquipmentChild*"
      },
      {
        "name": "m1PAnimClass",
        "comment": "The AnimBlueprint class to use for the 1p anim for our pawn, specifying none here means that the pawn default 1p anim will be used",
        "type": "TSubclassOf<classUAnimInstance>"
      },
      {
        "name": "mAttachSocket",
        "comment": "If this equipment should attach to a socket, this is the socket.",
        "type": "FName"
      },
      {
        "name": "mChildEquipmentClass",
        "comment": "The class (if any) to use to spawn a child equipment",
        "type": "TSubclassOf<classAFGEquipmentChild>"
      },
      {
        "name": "mCostToUse",
        "comment": "@todo FIXUP Remove BlueprintReadOnly\nThe cost of using this equipment",
        "type": "TArray<FItemAmount>"
      },
      {
        "name": "mArmAnimation",
        "comment": "Arms animation this should play on the when the equipment is equipped (only used if mEquipmentSlot == ES_ARMS)",
        "type": "EArmEquipment"
      },
      {
        "name": "mBackAnimation",
        "comment": "Arms animation this should play on the when the equipment is equipped (only used if mEquipmentSlot == ES_BACK)",
        "type": "EBackEquipment"
      },
      {
        "name": "mHasPersistentOwner",
        "comment": "If the owner is persistent throughout the lifetime of this equipment",
        "type": "bool"
      },
      {
        "name": "mAttachment",
        "comment": "This is the attachment of this equipment",
        "type": "classAFGEquipmentAttachment*"
      },
      {
        "name": "mSecondaryAttachment",
        "comment": "This is a potential secondary attachment",
        "type": "classAFGEquipmentAttachment*"
      },
      {
        "name": "mHave_AdjustDamage",
        "comment": "True if we have a blueprint version of some functions",
        "type": "uint8"
      },
      {
        "name": "mFirstTimeEquipped",
        "comment": "Was this the first time equipping this",
        "type": "uint8"
      },
      {
        "name": "mIdlePoseAnimation",
        "comment": "Idle animation to play when equipped. Can be null if we don't want to play any special animation",
        "type": "classUAnimSequence*"
      },
      {
        "name": "mIdlePoseAnimation3p",
        "comment": "Idle animation to play when equipped in 3p. Can be null if we don't want to play any special animation",
        "type": "classUAnimSequence*"
      },
      {
        "name": "mUseDefaultPrimaryFire",
        "comment": "Should we use the default primary fire implementation",
        "type": "bool"
      }
    ]
  }
]