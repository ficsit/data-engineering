[
  {
    "kind": "class",
    "name": "AFGFoliageRemovalSubsystem",
    "category": "UCLASS",
    "extends": [
      "AFGSubsystem"
    ],
    "methods": [
      {
        "name": "AFGFoliageRemovalSubsystem",
        "comment": "ctor"
      },
      {
        "name": "Destroyed",
        "comment": "Begin AActor interface",
        "returnType": "void"
      },
      {
        "name": "Init",
        "comment": "Called to initialize the subsystem and spawn actors for the levels that's already loaded when we was created",
        "returnType": "void"
      },
      {
        "name": "Get",
        "comment": "Get the foliage removal subsystem, this should always return something unless you call it really early",
        "returnType": "AFGFoliageRemovalSubsystem*"
      },
      {
        "name": "GetFoliageRemovalSubsystem",
        "comment": "Get the foliage removal subsystem from a world context, this should always return something unless you call it really early",
        "returnType": "AFGFoliageRemovalSubsystem*"
      },
      {
        "name": "GetFoliageRemovalActor",
        "comment": "Get the foliage removal actor that is associated with the component",
        "returnType": "classAFGFoliageRemoval*"
      },
      {
        "name": "GetFoliageRemovalActor",
        "comment": "Alternative way of getting a foliage removal actor",
        "returnType": "classAFGFoliageRemoval*"
      },
      {
        "name": "GetClosestFoliageArrayForComponent",
        "comment": "@param isLocalSpace - set this to true if the locations is in local-space\n@param out_instanceArray - id's in component for all the foliage instances",
        "returnType": "void"
      },
      {
        "name": "GetFoliageWithinRadius",
        "comment": "Finds foliage within a provided radius to a specified location.",
        "returnType": "bool"
      },
      {
        "name": "HasIdentifier",
        "comment": "@param foliageIdentifier - find foliage that matches this tag\n@returns true if the UHierarchicalInstanctedStaticMeshComponent has the given foliageIdentifier.",
        "returnType": "bool"
      },
      {
        "name": "Register",
        "comment": "\n @param actor - need to be valid and not already registered",
        "returnType": "void"
      },
      {
        "name": "UnRegister",
        "comment": "\n @param actor - need to be valid and registered",
        "returnType": "void"
      },
      {
        "name": "IsRemovable",
        "comment": "@return true if the static mesh is removable",
        "returnType": "bool"
      },
      {
        "name": "Stat_NumRemovedInstances",
        "comment": "Begin FactoryStatHelpers functions",
        "returnType": "int32"
      },
      {
        "name": "LevelFound",
        "comment": "\n @param level - valid level",
        "returnType": "void"
      },
      {
        "name": "MarkAsLevelAsWithoutRemovableFoliage",
        "comment": "Mark the level as it has no foliage actor",
        "returnType": "void"
      },
      {
        "name": "MarkAsLevelAsSpawnedRemovableFoliage",
        "comment": "Mark the level as it has spawned foliage actors",
        "returnType": "void"
      },
      {
        "name": "HasSpawnedFoliageActor",
        "comment": "@return true if the level has spawned a foliage removal actor",
        "returnType": "bool"
      },
      {
        "name": "OnLevelAddedToWorld",
        "comment": "\t/\n Called whenever a level is added to the world, used to gather more potential components to get foliage from",
        "returnType": "void"
      },
      {
        "name": "OnLevelRemovedFromWorld",
        "comment": "Called whenever a level is removed from the world, used to remove components that is no longer relevant for to be able to pickup",
        "returnType": "void"
      },
      {
        "name": "RemoveFoliageFromLevel",
        "comment": "\n @param inLevel - must be",
        "returnType": "void"
      },
      {
        "name": "SetupFoliageRemovalsForLevel",
        "comment": "\n @param level - must be valid, the level we want to gather components from",
        "returnType": "void"
      },
      {
        "name": "RemoveComponentsInLevel",
        "comment": "\n @param level - if null, all levels was removed from world, so just remove all components, else the level we want to remove the components in",
        "returnType": "void"
      },
      {
        "name": "GetLevelName",
        "comment": "\n @param level - must be valid\n@return the name of the level",
        "returnType": "FName"
      },
      {
        "name": "GetLevelCenter",
        "comment": "\n @param level - must be valid",
        "returnType": "FVector"
      },
      {
        "name": "GetLevelBounds",
        "comment": "\n @param level - must be valid",
        "returnType": "FBox"
      }
    ],
    "properties": [
      {
        "name": "mMapsWithNoRemovableFoliage",
        "comment": "SERVER ONLY: The maps that doesn't have any removable foliage on it  (@todonow: Remove?)",
        "type": "TArray<FName>"
      },
      {
        "name": "mDataForNonRelevantFoliageRemovals",
        "comment": "Store level data for non relevant foliage removal actors until they become relevant",
        "type": "TArray<FPendingLevelData>"
      },
      {
        "name": "mFoliageRemovalsInLevels",
        "comment": "Keep track of what foliage removal actors is in each level (FName is the name of the level)\n@todogc: Verify that this is safe have without UPROPERTY",
        "type": "TMultiMap<FName,classAFGFoliageRemoval*>"
      },
      {
        "name": "mMapsWithSpawnedFoliageRemovals",
        "comment": "Keep track of what maps has spawned their foliage removals",
        "type": "TArray<FName>"
      },
      {
        "name": "mFoilageMeshComponents",
        "comment": "All foliage mesh components that have potential for contain instances to remove\n@todogc: Verify that this is safe have without UPROPERTY",
        "type": "TArray<classUHierarchicalInstancedStaticMeshComponent*>"
      }
    ]
  }
]