[
  {
    "kind": "class",
    "name": "AFGBuildableConverter",
    "category": "UCLASS",
    "comment": "Copyright 2017 Coffee Stain Studios. All Rights Reserved.",
    "extends": [
      "AFGBuildableManufacturer"
    ],
    "methods": [
      {
        "name": "AFGBuildableConverter",
        "comment": "Constructor-chan"
      },
      {
        "name": "BeginPlay",
        "comment": "Begin AActor interface",
        "returnType": "void"
      },
      {
        "name": "GetNumberOfInputs",
        "comment": "@todo Converter can maybe use a recipe with the wildcard resource so the UI does not need to cast and take different path depending on if it's a converter or manufacturer, or move this to base.\nGet number of input connections",
        "returnType": "int32"
      },
      {
        "name": "Factory_CollectInput_Implementation",
        "comment": "Begin AFGBuildableFactory interface",
        "returnType": "void"
      },
      {
        "name": "SetUpInventoryFilters",
        "comment": "This function sets the filters on the input output inventories.",
        "returnType": "void"
      },
      {
        "name": "Factory_ConsumeIngredients",
        "comment": "This can differ between buildings (eg. Converters), so override if you need something special.\n@note this function assumes the available ingredients are there and have been checked with CanProduce()",
        "returnType": "void"
      },
      {
        "name": "HasRequiredIngredients",
        "comment": "Returns true if the required ingredients are in the input slots.\nHow this is checked can differ between buildings (eg. Converters), so override if you need something special.",
        "returnType": "bool"
      },
      {
        "name": "FilterIngredientClasses",
        "comment": "Bound to mItemFilter to filter what items can be used in the item slots.",
        "returnType": "bool"
      },
      {
        "name": "SetupItemFilter",
        "comment": "Setups the item filter without crashing",
        "returnType": "void"
      }
    ],
    "properties": [
      {
        "name": "mNumberOfIngredientsNeeded",
        "comment": "Number of ingredients needed to consume to produce",
        "type": "int32"
      },
      {
        "name": "mPreservedInputIndex",
        "comment": "this little guy ensures that the input index for consuming ingredients keeps cycling across all inputs.\notherwise there could be a bias between which inputs are used across production cycles.",
        "type": "int32"
      }
    ]
  }
]