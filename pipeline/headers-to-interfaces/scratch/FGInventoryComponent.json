[
  {
    "kind": "class",
    "name": "FInventoryItem",
    "category": "USTRUCT",
    "comment": "An item has a type and optionally a state.\nE.g. a weapon is of type 'Desc_NailGun' and has the state '9 nail loaded'.",
    "extends": [],
    "methods": [
      {
        "name": "FInventoryItem"
      },
      {
        "name": "FInventoryItem",
        "returnType": "explicit"
      },
      {
        "name": "Serialize",
        "comment": "Function called when serializing this struct to a FArchive.",
        "returnType": "bool"
      },
      {
        "name": "operator<<",
        "returnType": "FArchive&"
      },
      {
        "name": "IsValid",
        "comment": "@return true if this is a valid item; otherwise false.",
        "returnType": "bool"
      },
      {
        "name": "HasState",
        "comment": "@return true if this item has a state; otherwise false.",
        "returnType": "bool"
      }
    ],
    "properties": [
      {
        "name": "NullInventoryItem",
        "comment": "A null item.",
        "type": "staticconstFInventoryItem"
      },
      {
        "name": "ItemClass",
        "comment": "The type of item",
        "type": "TSubclassOf<classUFGItemDescriptor>"
      },
      {
        "name": "ItemState",
        "comment": "Optionally store an actor, e.g. an equipment, so we can remember it's state.",
        "type": "FSharedInventoryStatePtr"
      }
    ]
  },
  {
    "kind": "class",
    "name": "TStructOpsTypeTraits",
    "comment": "Enable custom serialization of FInventoryItem",
    "extends": [
      "TStructOpsTypeTraitsBase2"
    ],
    "methods": [],
    "properties": []
  },
  {
    "kind": "class",
    "name": "FInventoryStack",
    "category": "USTRUCT",
    "comment": "When handling single items outside an inventory, i.e. conveyor belt, the FInventoryItem struct is used.\nNote that single items in the inventory is described as a stack with 1 item.",
    "extends": [],
    "methods": [
      {
        "name": "FInventoryStack"
      },
      {
        "name": "FInventoryStack",
        "returnType": "explicit"
      },
      {
        "name": "FInventoryStack"
      },
      {
        "name": "HasItems",
        "comment": "@return true if this stack has any items; false if the stack is empty.",
        "returnType": "bool"
      }
    ],
    "properties": [
      {
        "name": "Item",
        "comment": "Type of item in this stack.",
        "type": "FInventoryItem"
      },
      {
        "name": "NumItems",
        "comment": "Number of items in this stack.",
        "type": "int32"
      }
    ]
  },
  {
    "kind": "class",
    "name": "TStructOpsTypeTraits",
    "extends": [
      "TStructOpsTypeTraitsBase2"
    ],
    "methods": [],
    "properties": []
  },
  {
    "kind": "class",
    "name": "UFGInventoryComponent",
    "category": "UCLASS",
    "comment": "object just collects them together and gives access to them\nThe outer object of this object needs to implement GetWorld",
    "extends": [
      "UActorComponent",
      "IFGSaveInterface"
    ],
    "methods": [
      {
        "name": "GetLifetimeReplicatedProps",
        "returnType": "void"
      },
      {
        "name": "PreReplication",
        "returnType": "void"
      },
      {
        "name": "PreNetReceive",
        "returnType": "void"
      },
      {
        "name": "UFGInventoryComponent"
      },
      {
        "name": "Serialize",
        "comment": "~ Begin UObject interface",
        "returnType": "void"
      },
      {
        "name": "PreSaveGame_Implementation",
        "comment": "Begin IFGSaveInterface",
        "returnType": "void"
      },
      {
        "name": "PostSaveGame_Implementation",
        "returnType": "void"
      },
      {
        "name": "PreLoadGame_Implementation",
        "returnType": "void"
      },
      {
        "name": "PostLoadGame_Implementation",
        "returnType": "void"
      },
      {
        "name": "GatherDependencies_Implementation",
        "returnType": "void"
      },
      {
        "name": "NeedTransform_Implementation",
        "returnType": "bool"
      },
      {
        "name": "ShouldSave_Implementation",
        "returnType": "bool"
      },
      {
        "name": "OnRegister",
        "comment": "Begin UActorComponent interface",
        "returnType": "void"
      },
      {
        "name": "SetDefaultSize",
        "comment": "\n @param defaultSize How many itemslots does this component have as default",
        "returnType": "void"
      },
      {
        "name": "Resize",
        "comment": "\n @param newSize How many itemslots does this component have",
        "returnType": "void"
      },
      {
        "name": "SortInventory",
        "comment": "2) other\n",
        "returnType": "void"
      },
      {
        "name": "Server_SortInventory",
        "returnType": "void"
      },
      {
        "name": "HasAuthority",
        "comment": "Checks if our owner has authority, and assumes that if they have, then so do we",
        "returnType": "bool"
      },
      {
        "name": "IsItemAllowed",
        "comment": "@todoinventory REFACTOR we need to consider state here somehow.\n@return true if the item is allowed in this inventory\nINDEX_NONE",
        "returnType": "bool"
      },
      {
        "name": "DECLARE_FUNCTION",
        "comment": "[FreiholtzK:Mon/16-12-2019] Temporary debug code that should be removed after we have managed to find what passes in a null item descriptor here"
      },
      {
        "name": "IsValidIndex",
        "comment": "@return true if the index is a valid index.",
        "returnType": "bool"
      },
      {
        "name": "FindEmptyIndex",
        "comment": "@return first empty index, -1 if none is found",
        "returnType": "int32"
      },
      {
        "name": "AddItem",
        "comment": "Adds one item to the inventory.",
        "returnType": "bool"
      },
      {
        "name": "AddStack",
        "comment": "\n @return Number of items added, may be less than the input if partial adds are allowed.",
        "returnType": "int32"
      },
      {
        "name": "AddStacks",
        "comment": "\n @note It is the callers responsibility to ensure that the inventory has enough space to store the items.",
        "returnType": "void"
      },
      {
        "name": "AddStackToIndex",
        "comment": "\n @return Number of items added, may be less than the input if partial adds are allowed.",
        "returnType": "int32"
      },
      {
        "name": "GetStackFromIndex",
        "comment": "\n @return true if valid index; false otherwise.",
        "returnType": "bool"
      },
      {
        "name": "Remove",
        "comment": "\n @param itemClass - Type of items to remove.\n@param num - Number of items to remove. Must be >= 0. If count is more than the items available, a partial remove is done and a warning is raised.",
        "returnType": "void"
      },
      {
        "name": "RemoveFromIndex",
        "comment": "\n @param idx - A valid index in mInventoryStacks.\n@param num - Number of items to remove. Must be >= 0. If count is more than the items available, nothing is removed.",
        "returnType": "void"
      },
      {
        "name": "RemoveAllFromIndex",
        "comment": "Clears the index, ALL items will be forever gone!",
        "returnType": "void"
      },
      {
        "name": "IsEmpty",
        "comment": "Check if the entire inventory is empty.",
        "returnType": "bool"
      },
      {
        "name": "IsIndexEmpty",
        "comment": "Check if the given index is empty.",
        "returnType": "bool"
      },
      {
        "name": "IsSomethingOnIndex",
        "comment": "Opposite of IsIndexEmpty",
        "returnType": "bool"
      },
      {
        "name": "Empty",
        "comment": "Clears the inventory, ALL items will be forever gone!",
        "returnType": "void"
      },
      {
        "name": "HasItems",
        "comment": "\n @return - true if the inventory has the amount requested.",
        "returnType": "bool"
      },
      {
        "name": "GetNumItems",
        "comment": "\n @return Total amount of the item we have in the inventory.",
        "returnType": "int32"
      },
      {
        "name": "HasEnoughSpaceForStacks",
        "comment": "\n @note This can be slow for large inventories and item quantities as it need to check every grid location, try stacking and consider stacking limits etc.",
        "returnType": "bool"
      },
      {
        "name": "HasEnoughSpaceForStack",
        "comment": "Check if the inventory has enough space to store the given items.",
        "returnType": "bool"
      },
      {
        "name": "HasEnoughSpaceForItem",
        "comment": "@return true if we have enough space for the item; false if not or not allowed.",
        "returnType": "bool"
      },
      {
        "name": "SetStateOnIndex",
        "comment": "Set the state for items at slot.",
        "returnType": "void"
      },
      {
        "name": "GetSizeLinear",
        "comment": "The total size of the inventory, when accessing inventory linearly using indices.",
        "returnType": "int32"
      },
      {
        "name": "GetFullestStackIndex",
        "comment": "Returns index of the stack that has percentually the most items",
        "returnType": "int32"
      },
      {
        "name": "GetInventoryStacks",
        "comment": "Get all stacks that's in the players inventory",
        "returnType": "void"
      },
      {
        "name": "GetRelevantStackIndexes",
        "comment": "Returns the indexes of relevant stacks depending on the given items classes,\n\tindexes are sorted first by class and secondly in ascending stack size",
        "returnType": "TArray<int32>"
      },
      {
        "name": "AddArbitrarySlotSize",
        "comment": "Adds or replaces a arbitrary size for a slot.",
        "returnType": "void"
      },
      {
        "name": "RemoveArbitrarySlotSize",
        "comment": "Removes an Arbitrary size for a slot.",
        "returnType": "void"
      },
      {
        "name": "GetSlotSize",
        "comment": "This returns the arbitrary slot size if one is set, otherwise the stack size",
        "returnType": "int32"
      },
      {
        "name": "GetAllowedItemOnIndex",
        "comment": "Set the allowed item type for this slot, can only be one item.\n@return Allowed item type if set; nullptr if any item is allowed or invalid index.",
        "returnType": "TSubclassOf<UFGItemDescriptor>"
      },
      {
        "name": "SetAllowedItemOnIndex",
        "comment": "@param idx Slot index, function does nullptr if this is invalid.\n@param allowedItemClass Item type to allow, if nothing then all items are allowed.",
        "returnType": "void"
      },
      {
        "name": "CanSplitStackAtIdx",
        "comment": "Returns true if we can split the stack that is on the passed idx",
        "returnType": "bool"
      },
      {
        "name": "SplitStackAtIdx",
        "comment": "Splits the stack at the current index and moves the passed amount of items to first valid slot",
        "returnType": "void"
      },
      {
        "name": "GetCanBeRearranged",
        "comment": "Can stuff in this inventory be rearranged, that is moved from one slot to the other?",
        "returnType": "bool"
      },
      {
        "name": "SetCanBeRearranged",
        "comment": "Setter for mCanBeRearranged",
        "returnType": "void"
      },
      {
        "name": "CopyFromOtherComponent",
        "comment": "Duplicates and overrides all relevant values from the other component",
        "returnType": "void"
      },
      {
        "name": "OnRep_InventoryStacks",
        "comment": "Used to call OnItemAdded/OnItemRemoved on clients",
        "returnType": "void"
      },
      {
        "name": "OnItemsAdded",
        "comment": "\n @param item - The index the item got added to.\n@param item - The number of items that were added.",
        "returnType": "void"
      },
      {
        "name": "OnItemsRemoved",
        "comment": "@param num - The number of items removed.\n@param item - The item that was removed, if not all items where removed this is the same as the item at the index.",
        "returnType": "void"
      },
      {
        "name": "GetStackFromIndex",
        "comment": "@param idx A valid index. Asserts otherwise.\n@return The stack at idx.",
        "returnType": "FInventoryStack&"
      },
      {
        "name": "UpdateRadioactivity",
        "returnType": "void"
      }
    ],
    "properties": [
      {
        "name": "ResizeInventoryDelegate",
        "comment": "Called when this inventory has been resized",
        "type": "FInventoryResized"
      },
      {
        "name": "OnItemAddedDelegate",
        "comment": "Called when this inventory has something added to it, @note: Client doesn't garantuee order of Added/Remove delegate",
        "type": "FOnItemAdded"
      },
      {
        "name": "OnItemRemovedDelegate",
        "comment": "Called when something has been removed from the inventory, @note: Client doesn't garantuee order of Added/Remove delegate",
        "type": "FOnItemRemoved"
      },
      {
        "name": "mItemFilter",
        "comment": "Set this to filter out what items are allowed and not allowed in the inventory",
        "type": "FItemFilter"
      },
      {
        "name": "mFormFilter",
        "comment": "Set this to filter out items by EResourceForm",
        "type": "FFormFilter"
      },
      {
        "name": "mDefaultInventorySize",
        "comment": "When we make an inventory by adding the component to an actor we use this to specify its size",
        "type": "int32"
      },
      {
        "name": "mAdjustedSizeDiff",
        "comment": "When we resize the inventory we save how much bigger or smaller the inventory was made",
        "type": "int32"
      },
      {
        "name": "mInventoryStacks",
        "comment": "All items in the inventory",
        "type": "TArray<FInventoryStack>"
      },
      {
        "name": "mClientLastFrameStacks",
        "comment": "Stored last frames data in PreNetReceive, so that we can derive what has happened since last inventory state we received",
        "type": "TArray<FInventoryStack>"
      },
      {
        "name": "mArbitrarySlotSizes",
        "comment": "In some rare cases we don't want to use the StackSize to limit the slot, so this way we can have larger or smaller slots",
        "type": "TArray<int32>"
      },
      {
        "name": "mAllowedItemDescriptors",
        "comment": "This are the allowed inventory items, this we we can \"filter\" in BluePrint as well.",
        "type": "TArray<TSubclassOf<UFGItemDescriptor>>"
      },
      {
        "name": "mCanBeRearrange",
        "comment": "Can stuff in this inventory be rearranged, that is moved from one slot to the other?",
        "type": "bool"
      }
    ]
  }
]