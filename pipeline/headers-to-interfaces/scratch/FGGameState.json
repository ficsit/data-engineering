[
  {
    "kind": "class",
    "name": "AFGGameState",
    "category": "UCLASS",
    "extends": [
      "AGameState",
      "IFGSaveInterface"
    ],
    "methods": [
      {
        "name": "AFGGameState"
      },
      {
        "name": "Serialize",
        "comment": "Begin UObject interface",
        "returnType": "void"
      },
      {
        "name": "GetLifetimeReplicatedProps",
        "comment": "Begin AActor interface",
        "returnType": "void"
      },
      {
        "name": "Tick",
        "returnType": "void"
      },
      {
        "name": "PreSaveGame_Implementation",
        "comment": "Begin IFGSaveInterface",
        "returnType": "void"
      },
      {
        "name": "PostSaveGame_Implementation",
        "returnType": "void"
      },
      {
        "name": "PreLoadGame_Implementation",
        "returnType": "void"
      },
      {
        "name": "PostLoadGame_Implementation",
        "returnType": "void"
      },
      {
        "name": "GatherDependencies_Implementation",
        "returnType": "void"
      },
      {
        "name": "NeedTransform_Implementation",
        "returnType": "bool"
      },
      {
        "name": "ShouldSave_Implementation",
        "returnType": "bool"
      },
      {
        "name": "HandleMatchIsWaitingToStart",
        "comment": "Begin AGameState interface",
        "returnType": "void"
      },
      {
        "name": "HandleMatchHasStarted",
        "returnType": "void"
      },
      {
        "name": "AddPlayerState",
        "returnType": "void"
      },
      {
        "name": "Init",
        "comment": "Init function, for setting up all our subsystems and save system",
        "returnType": "void"
      },
      {
        "name": "AreClientSubsystemsValid",
        "comment": "Check if subsystems are created or replicated",
        "returnType": "bool"
      },
      {
        "name": "FindFreeSlot",
        "comment": "Finds a free slot for a new player state",
        "returnType": "int32"
      },
      {
        "name": "IsTradingPostBuilt",
        "comment": "Is a trading post built? Works on both client and server",
        "returnType": "bool"
      },
      {
        "name": "SetIsTradingPostBuilt",
        "comment": "Set if the trading post is built or not",
        "returnType": "void"
      },
      {
        "name": "HasInitalTradingPostLandAnimPlayed",
        "comment": "Have we played the initial trading post land anim?",
        "returnType": "bool"
      },
      {
        "name": "SetHasInitalTradingPostLandAnimPlayed",
        "comment": "Set if the trading post is built or not",
        "returnType": "void"
      },
      {
        "name": "IsSpaceElevatorBuilt",
        "comment": "Is a towtruck built? Works on both client and server",
        "returnType": "bool"
      },
      {
        "name": "SetIsSpaceElevatorBuilt",
        "comment": "Set if the trading post is built or not",
        "returnType": "void"
      },
      {
        "name": "GetSchematicManager",
        "comment": "Returns the schematic manager",
        "returnType": "classAFGSchematicManager*"
      },
      {
        "name": "GetGamePhaseManager",
        "comment": "Returns the game phase manager",
        "returnType": "classAFGGamePhaseManager*"
      },
      {
        "name": "GetResearchManager",
        "comment": "Returns the research manager",
        "returnType": "classAFGResearchManager*"
      },
      {
        "name": "GetTutorialIntroManager",
        "comment": "Returns the tutorial intro manager",
        "returnType": "classAFGTutorialIntroManager*"
      },
      {
        "name": "GetTimeSubsystem",
        "comment": "Native subsystem getters.",
        "returnType": "classAFGTimeOfDaySubsystem*"
      },
      {
        "name": "GetRailroadSubsystem",
        "returnType": "classAFGRailroadSubsystem*"
      },
      {
        "name": "GetCircuitSubsystem",
        "returnType": "classAFGCircuitSubsystem*"
      },
      {
        "name": "GetStorySubsystem",
        "returnType": "classAFGStorySubsystem*"
      },
      {
        "name": "GetRadioactivitySubsystem",
        "returnType": "classAFGRadioactivitySubsystem*"
      },
      {
        "name": "GetChatManager",
        "returnType": "classAFGChatManager*"
      },
      {
        "name": "GetCentralStorageSubsystem",
        "returnType": "classAFGCentralStorageSubsystem*"
      },
      {
        "name": "GetRecipeManager",
        "returnType": "classAFGRecipeManager*"
      },
      {
        "name": "GetMapManager",
        "returnType": "classAFGMapManager*"
      },
      {
        "name": "GetUnlockSubsystem",
        "returnType": "classAFGUnlockSubsystem*"
      },
      {
        "name": "GetPipeSubsystem",
        "returnType": "classAFGPipeSubsystem*"
      },
      {
        "name": "GetResourceSinkSubsystem",
        "returnType": "classAFGResourceSinkSubsystem*"
      },
      {
        "name": "GetActorRepresentationManager",
        "comment": "Helper to access the actor representation manager",
        "returnType": "classAFGActorRepresentationManager*"
      },
      {
        "name": "GetVisitedMapAreas",
        "comment": "Gives you all the visited map areas on the current level",
        "returnType": "void"
      },
      {
        "name": "IsMapAreaVisisted",
        "comment": "Returns true if any of the players has visited the passed area",
        "returnType": "bool"
      },
      {
        "name": "AddUniqueVisistedMapArea",
        "comment": "Adds a new map area if it previously was unvisited",
        "returnType": "void"
      },
      {
        "name": "OnRep_MapAreaVisited",
        "comment": "Called when a new map area has been added",
        "returnType": "void"
      },
      {
        "name": "GetHubPartClass",
        "comment": "Getter for Hub Part Class",
        "returnType": "TSubclassOf<classUFGItemDescriptor>"
      },
      {
        "name": "GetForceAddHubPartOnSpawn",
        "comment": "Getter for if the Hub part is needed on spawn",
        "returnType": "bool"
      },
      {
        "name": "SetForceAddHubPartOnSpawn",
        "comment": "Setter for force adding Hub part on spawn",
        "returnType": "void"
      },
      {
        "name": "GetCheatNoCost",
        "comment": "Getter for NoCost",
        "returnType": "bool"
      },
      {
        "name": "GetCheatNoPower",
        "comment": "Getter for NoPower",
        "returnType": "bool"
      },
      {
        "name": "SetCheatNoPower",
        "comment": "Setter for no power",
        "returnType": "void"
      },
      {
        "name": "SetCheatNoCost",
        "comment": "Setter for no cost",
        "returnType": "void"
      },
      {
        "name": "NotifyPlayerAdded",
        "returnType": "void"
      },
      {
        "name": "SendMessageToAllPlayers",
        "comment": "Sends message to all players, will only be called on clients",
        "returnType": "void"
      },
      {
        "name": "SendMessageToPlayer",
        "comment": "Sends message to specified player, will only be called on clients",
        "returnType": "void"
      },
      {
        "name": "GetTotalPlayDuration",
        "comment": "The total time that has been played, including previous saves\n@note this will return wrong values between PreSave and PostSave.",
        "returnType": "int32"
      },
      {
        "name": "GetSessionName",
        "returnType": "FString"
      },
      {
        "name": "SetSessionName",
        "returnType": "void"
      },
      {
        "name": "SetupColorSlots",
        "comment": "No need to be a ufunction, as it is only used to set a start state from loading so far, when the game loads on the server.",
        "returnType": "void"
      },
      {
        "name": "SetAndReplicateBuildingColorInSlot",
        "returnType": "void"
      },
      {
        "name": "GetBuildingColorPrimary",
        "returnType": "FColor"
      },
      {
        "name": "GetBuildingColorSecondary",
        "returnType": "FColor"
      },
      {
        "name": "GetNbColorSlotsExposedToPlayers",
        "returnType": "uint8"
      },
      {
        "name": "OnRep_BuildingColorSlot",
        "returnType": "void"
      },
      {
        "name": "ClaimPlayerColor",
        "returnType": "void"
      },
      {
        "name": "ReleasePlayerColor",
        "returnType": "void"
      },
      {
        "name": "IsItemEverPickedUp",
        "comment": "return true if we have picked up and item of the given item class and it is marked to be remembered when picked up",
        "returnType": "bool"
      },
      {
        "name": "ItemPickedUp",
        "comment": "If the given item class is marked to be remembered when picked up we store it",
        "returnType": "void"
      },
      {
        "name": "SetPlannedServerRestartWorldTime",
        "comment": "Set the planned restart in time seconds",
        "returnType": "void"
      },
      {
        "name": "CheckRestartTime",
        "comment": "Check the restart time of server and restart it and notify clients of the countdown",
        "returnType": "void"
      },
      {
        "name": "OnRep_PlannedRestartTime",
        "comment": "Restart time has been replicated, recheck if the time has been updated",
        "returnType": "void"
      },
      {
        "name": "SpawnSubsystem",
        "comment": "Helper to spawn subsystems.",
        "returnType": "void"
      }
    ],
    "properties": [
      {
        "name": "MapAreaVisistedDelegate",
        "comment": "Called on all players when any player enters a new map area.",
        "type": "FVisitedMapAreaDelegate"
      },
      {
        "name": "mTurboModeMultiplier",
        "comment": "@todo When was this used last time? Cleanup?",
        "type": "float"
      },
      {
        "name": "mPowerCircuitFuseTriggeredMessage",
        "comment": "Message sent when a power fuse is triggered occurs.",
        "type": "TSubclassOf<classUFGMessageBase>"
      },
      {
        "name": "mAvailableRecipes",
        "comment": "@todo @save 2019-02-26 If this is cleaned up alpha saves will lose recipes unlocked by other means than through schematics, i.e. probably alternate recipes.\n_DEPRECATED",
        "type": "TArray<TSubclassOf<UFGRecipe>>"
      },
      {
        "name": "mTimeSubsystem",
        "comment": "Spawned subsystems",
        "type": "classAFGTimeOfDaySubsystem*"
      },
      {
        "name": "mStorySubsystem",
        "type": "classAFGStorySubsystem*"
      },
      {
        "name": "mRailroadSubsystem",
        "type": "classAFGRailroadSubsystem*"
      },
      {
        "name": "mCircuitSubsystem",
        "type": "classAFGCircuitSubsystem*"
      },
      {
        "name": "mRecipeManager",
        "type": "classAFGRecipeManager*"
      },
      {
        "name": "mSchematicManager",
        "type": "classAFGSchematicManager*"
      },
      {
        "name": "mGamePhaseManager",
        "type": "classAFGGamePhaseManager*"
      },
      {
        "name": "mResearchManager",
        "type": "classAFGResearchManager*"
      },
      {
        "name": "mTutorialIntroManager",
        "type": "classAFGTutorialIntroManager*"
      },
      {
        "name": "mActorRepresentationManager",
        "type": "classAFGActorRepresentationManager*"
      },
      {
        "name": "mMapManager",
        "type": "classAFGMapManager*"
      },
      {
        "name": "mRadioactivitySubsystem",
        "type": "classAFGRadioactivitySubsystem*"
      },
      {
        "name": "mChatManager",
        "type": "classAFGChatManager*"
      },
      {
        "name": "mCentralStorageSubsystem",
        "type": "classAFGCentralStorageSubsystem*"
      },
      {
        "name": "mPipeSubsystem",
        "type": "classAFGPipeSubsystem*"
      },
      {
        "name": "mUnlockSubsystem",
        "type": "classAFGUnlockSubsystem*"
      },
      {
        "name": "mResourceSinkSubsystem",
        "type": "classAFGResourceSinkSubsystem*"
      },
      {
        "name": "mVisitedMapAreas",
        "comment": "This array keeps track of what map areas have been visited this game",
        "type": "TArray<TSubclassOf<UFGMapArea>>"
      },
      {
        "name": "mPickedUpItems",
        "comment": "All items we have picked up that also are relevant to know if we picked up",
        "type": "TArray<TSubclassOf<classUFGItemDescriptor>>"
      },
      {
        "name": "mPlayDurationWhenLoaded",
        "comment": "The total play time when loaded this save",
        "type": "int32"
      },
      {
        "name": "mReplicatedSessionName",
        "type": "FString"
      },
      {
        "name": "mBuildingColorSlots",
        "comment": "System to keep track of color slot changes and comapre to buildable system to update and mark dirty",
        "type": "FFGBuildingColorSlotStruct"
      },
      {
        "name": "mPlayerColors",
        "comment": "The different colors to represent players over the network. We keep this if we need to loop back over the colors again",
        "type": "TArray<FSlotData>"
      },
      {
        "name": "mAvailablePlayerColors",
        "comment": "The remaining colors to represent players over the network",
        "type": "TArray<FSlotData>"
      },
      {
        "name": "mPlannedRestartTime",
        "comment": "Next time the server is planned to restart",
        "type": "float"
      },
      {
        "name": "mLastRestartTimeCheck",
        "type": "float"
      },
      {
        "name": "mOnRestartTimeNotification",
        "comment": "Called at regular times when the restart time reaches specific thresholds",
        "type": "FOnRestartTimeNotification"
      },
      {
        "name": "mHubPartClass",
        "comment": "Class used to construct the hub, this is used to guarantee players always have one if they don't have a hub",
        "type": "TSubclassOf<classUFGItemDescriptor>"
      },
      {
        "name": "mForceAddHubPartOnSpawn",
        "comment": "Track if a hub part is needed for adding to player inventory when they respawn",
        "type": "bool"
      },
      {
        "name": "mCheatNoCost",
        "comment": "Cheat bool for having no cost for stuff",
        "type": "bool"
      },
      {
        "name": "mCheatNoPower",
        "comment": "Cheat bool for not requiring power",
        "type": "bool"
      },
      {
        "name": "mIsTradingPostBuilt",
        "comment": "There can only be one trading post in the game, so we keep track it here so that we also can replicate it to client",
        "type": "bool"
      },
      {
        "name": "mHasInitalTradingPostLandAnimPlayed",
        "comment": "The first time you build a trading post we want the landing animation to play",
        "type": "bool"
      },
      {
        "name": "mIsSpaceElevatorBuilt",
        "comment": "There can only be one tow truck in the game, so we keep track it here so that we also can replicate it to client",
        "type": "bool"
      }
    ]
  }
]