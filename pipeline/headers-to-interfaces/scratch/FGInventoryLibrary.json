[
  {
    "kind": "class",
    "name": "UFGInventoryLibrary",
    "category": "UCLASS",
    "comment": "Function library to provide the glue between c++ and the inventory in blueprint so we can handle inventory items with a state easy in blueprint.",
    "extends": [
      "UBlueprintFunctionLibrary"
    ],
    "methods": [
      {
        "name": "CreateInventoryComponent",
        "comment": "Dynamically create an inventory component of a given type with a given size.",
        "returnType": "T*"
      },
      {
        "name": "CreateInventoryComponent",
        "comment": "Dynamically create a default inventory component with a given size.",
        "returnType": "classUFGInventoryComponent*"
      },
      {
        "name": "CreateInventoryComponentOfClass",
        "comment": "Dynamically create an inventory component of a given class with a given size.",
        "returnType": "classUFGInventoryComponent*"
      },
      {
        "name": "BreakInventoryStack",
        "comment": "Manual break for inventory stack.",
        "returnType": "void"
      },
      {
        "name": "BreakInventoryItem",
        "comment": "Manual break for inventory item.",
        "returnType": "void"
      },
      {
        "name": "MakeInventoryItem",
        "comment": "Manual make for inventory item.",
        "returnType": "FInventoryItem"
      },
      {
        "name": "MakeInventoryStack",
        "comment": "Manual make for inventory stack.",
        "returnType": "FInventoryStack"
      },
      {
        "name": "IsValidItem",
        "comment": "@return true if the inventory item is a valid item; otherwise false.",
        "returnType": "bool"
      },
      {
        "name": "HasState",
        "comment": "@return true if this inventory item has a state; otherwise false.",
        "returnType": "bool"
      },
      {
        "name": "GetAmountConvertedByForm",
        "comment": "Returns the amount of inventory items converted to the appropriate units for displaying in the UI\n@param amount - quantity of unmodified inventory items. eg. 1000 Liquid inventory will be divided by 1000.f to return 1 m^3",
        "returnType": "float"
      },
      {
        "name": "GetProductionSuffixFromFormType",
        "comment": "Returns the UI Suffix for production quantities based on a Resource Form Type",
        "returnType": "FText"
      },
      {
        "name": "GetConversionScalarByForm",
        "returnType": "float"
      },
      {
        "name": "GetAmountConvertedFromItemAmount",
        "comment": "@param itemClass - (Out) The item class of the FItemAmount\n@param amountConverted - The amount converted to the correct representation in the UI. eg. 1000 Liquid inventory will be divided by 1000.f to return 1.f ( m^3 )",
        "returnType": "void"
      },
      {
        "name": "GetUIDataPartialForInventoryStack",
        "comment": "@param numItemsConverted - (Out) The numItems converted to the correct representation for the UI. eg. 1000 Liquid inventory will be divided by 1000.f to return 1.f ( m^3 )\n@param maxItemsConverted - (Out) The max stack size for this InventoryStack. If a buildableClass was passed and the resource form is not SOLID, this value will also be scaled to by the buildables stack size scalar.",
        "returnType": "void"
      },
      {
        "name": "GetUIDataFullForInventoryStack",
        "comment": "@param suffix - (Out) The UI suffix for this part form ( Tex. Solid = \"Parts\", Liquid = \"m^3\" )\n@param form - (Out) The resource form of this ItemStack",
        "returnType": "void"
      },
      {
        "name": "GetNullInventoryItem",
        "comment": "@return a none item.",
        "returnType": "FInventoryItem"
      },
      {
        "name": "HasItems",
        "comment": "@return true if the stack has any items; false if the stack is empty.",
        "returnType": "bool"
      },
      {
        "name": "MoveInventoryItem",
        "comment": "@todoinventory RENAME Stack",
        "returnType": "bool"
      },
      {
        "name": "GrabAllItemsFromInventory",
        "comment": "\n @return true on success; false if something goes wrong during the move.",
        "returnType": "bool"
      },
      {
        "name": "ConsolidateInventoryItems",
        "comment": "@todoinventory RENAME Stacks",
        "returnType": "void"
      },
      {
        "name": "GetMinNumSlotsForItems",
        "comment": "\n ASSUMES CONSOLIDATED ARRAY",
        "returnType": "int32"
      },
      {
        "name": "MergeInventoryItem",
        "comment": "@todoinventory RENAME Stack",
        "returnType": "void"
      },
      {
        "name": "ConsolidateItemsAmount",
        "comment": "\n @note This do not apply any stacking limits.",
        "returnType": "void"
      },
      {
        "name": "RemoveAllItemsNotOfResourceForm",
        "comment": "@param items - Array of items by ref to remove from\n@param validForm - Keep items of this form. Default == RF_SOLID",
        "returnType": "void"
      }
    ],
    "properties": []
  }
]