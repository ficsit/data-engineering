[
  {
    "kind": "class",
    "name": "AFGBuildableGeneratorFuel",
    "category": "UCLASS",
    "comment": "Copyright 2016 Coffee Stain Studios. All Rights Reserved.",
    "extends": [
      "AFGBuildableGenerator"
    ],
    "methods": [
      {
        "name": "AFGBuildableGeneratorFuel"
      },
      {
        "name": "GetLifetimeReplicatedProps",
        "comment": "Begin AActor interface",
        "returnType": "void"
      },
      {
        "name": "PreReplication",
        "returnType": "void"
      },
      {
        "name": "BeginPlay",
        "returnType": "void"
      },
      {
        "name": "PostLoad",
        "comment": "Begin UObject interface",
        "returnType": "void"
      },
      {
        "name": "Factory_Tick",
        "comment": "Begin Factory_ interface",
        "returnType": "void"
      },
      {
        "name": "GetReplicationDetailActorClass",
        "comment": "Begin IFGReplicationDetailActorOwnerInterface",
        "returnType": "UClass*"
      },
      {
        "name": "GetDismantleRefund_Implementation",
        "comment": "Begin IFGDismantleInterface",
        "returnType": "void"
      },
      {
        "name": "IsValidFuel",
        "comment": "@param resource - Resource class to check.\n@return - true if resource valid as fuel; false if not valid or if generator does not run on fuel.",
        "returnType": "bool"
      },
      {
        "name": "IsValidSupplementalResource",
        "comment": "@param resource - Item or Resource class to check if it matches the set Supplemental Resouce Class\n@return - true if they're the same item / resource; otherwise false",
        "returnType": "bool"
      },
      {
        "name": "GetFuelInventory",
        "comment": "@return a valid pointer to the inventory if this machine runs on fuel. Can be nullptr on client.",
        "returnType": "classUFGInventoryComponent*"
      },
      {
        "name": "HasFuel",
        "comment": "Check if this generator has fuel.\n@return - true if this generator has fuel; false if it has no fuel.",
        "returnType": "bool"
      },
      {
        "name": "GetFuelResourceForm",
        "comment": "Get the specified resource form for Fuel allowed to be used in this generator.",
        "returnType": "EResourceForm"
      },
      {
        "name": "HasSuppleentalResource",
        "comment": "Check if this generator has the required supplemental resource available\n@return - true if the resource is present OR if a supplemental resource is not needed. False otherwise.",
        "returnType": "bool"
      },
      {
        "name": "GetRequiresSupplementalResource",
        "comment": "Returns true if this generator requires a supplemental resource to run",
        "returnType": "bool"
      },
      {
        "name": "GetSupplementalConsumptionRateCurrent",
        "comment": "Get the current Supplemental resource consumption rate in M^3/s (Cubic Meters per Second)",
        "returnType": "float"
      },
      {
        "name": "GetSupplementalConsumptionRateMaximum",
        "comment": "Get the maximum Supplemental resource consumption rate in M^3/s (Cubic Meters per Second)",
        "returnType": "float"
      },
      {
        "name": "GetFuelAmount",
        "comment": "How much of the fuel have we burned? In range [0,1].",
        "returnType": "float"
      },
      {
        "name": "GetSupplementalAmount",
        "comment": "How much of the supplemental resource is remaining? In range [0,1]",
        "returnType": "float"
      },
      {
        "name": "SetPendingPotential",
        "comment": "We want to change the potential instantly on generators ?",
        "returnType": "void"
      },
      {
        "name": "GetCurrentFuelClass",
        "comment": "Returns the currently used fuel class",
        "returnType": "TSubclassOf<classUFGItemDescriptor>"
      },
      {
        "name": "GetAvailableFuelClasses",
        "comment": "Returns all fuel classes this generator can use",
        "returnType": "TArray<TSubclassOf<classUFGItemDescriptor>>"
      },
      {
        "name": "GetSupplementalResourceClass",
        "comment": "Returns the class of the supplemental resource required (can be null)",
        "returnType": "TSubclassOf<classUFGItemDescriptor>"
      },
      {
        "name": "Factory_CollectFuel",
        "comment": "Try to collect fuel from an input.",
        "returnType": "void"
      },
      {
        "name": "Factory_CollectSupplimentalResource",
        "comment": "Try to collect secondary resource from an input ( if one is specified )",
        "returnType": "void"
      },
      {
        "name": "LoadFuel",
        "comment": "Try load fuel into the burner.",
        "returnType": "void"
      },
      {
        "name": "LoadSupplemental",
        "comment": "Try to load supplemental resource needed for generating",
        "returnType": "void"
      },
      {
        "name": "CanStartPowerProduction_Implementation",
        "comment": "Begin AFGBuildableGenerator interface",
        "returnType": "bool"
      },
      {
        "name": "Factory_StartPowerProduction_Implementation",
        "returnType": "void"
      },
      {
        "name": "Factory_StopPowerProduction_Implementation",
        "returnType": "void"
      },
      {
        "name": "Factory_TickPowerProduction_Implementation",
        "returnType": "void"
      },
      {
        "name": "CanLoadFuel",
        "comment": "Can we load fuel in to the generator",
        "returnType": "bool"
      },
      {
        "name": "CanLoadSupplenmental",
        "comment": "Can we load supplemental resources into the generator",
        "returnType": "bool"
      },
      {
        "name": "OnRep_ReplicationDetailActor",
        "returnType": "void"
      },
      {
        "name": "FilterFuelClasses",
        "comment": "Filter out what we consider as fuel for our fuel inventory.\n@see IsValidFuel",
        "returnType": "bool"
      },
      {
        "name": "OnRep_FuelInventory",
        "comment": "Set up the fuel inventory when replicated",
        "returnType": "void"
      },
      {
        "name": "GetCastRepDetailsActor",
        "returnType": "classAFGReplicationDetailActor_GeneratorFuel*"
      }
    ],
    "properties": [
      {
        "name": "mFuelInventoryHandler",
        "comment": "Maintainer of the active storage component for this actor. Use this to get the active inventory component.",
        "type": "classUFGReplicationDetailInventoryComponent*"
      },
      {
        "name": "mFuelClasses_DEPRECATED",
        "comment": "Fuel classes this machine can run on. Leave empty if it does not run on fuel.",
        "type": "TArray<TSubclassOf<classUFGItemDescriptor>>"
      },
      {
        "name": "mDefaultFuelClasses",
        "comment": "Fuel classes this machine can run on. Leave empty if it does not run on fuel.",
        "type": "TArray<TSoftClassPtr<classUFGItemDescriptor>>"
      },
      {
        "name": "mAvailableFuelClasses",
        "comment": "Current fuel classes of the generator, useful for runtime adding of fuel classes",
        "type": "TArray<TSubclassOf<classUFGItemDescriptor>>"
      },
      {
        "name": "mFuelResourceForm",
        "comment": "The form of resource this generator is allowed to accept. ie. SOLID or LIQUID",
        "type": "EResourceForm"
      },
      {
        "name": "mRequiresSupplementalResource",
        "comment": "Does this generator require a secondary NON fuel source to generate power?",
        "type": "bool"
      },
      {
        "name": "mSupplementalResourceClass",
        "comment": "Required secondary resource class to continue with generation. Tex. Water. Leave empty if none is desired",
        "type": "TSubclassOf<classUFGItemDescriptor>"
      },
      {
        "name": "mSupplementalLoadAmount",
        "comment": "of generation of electricity.\n@note - 1 unit equates to 1 Liter. So 1000 units would be 1 Cubic Meter.",
        "type": "int32"
      },
      {
        "name": "mSupplementalToPowerRatio",
        "comment": "The quantity of supplemental resource to consume per megawatt of power produced",
        "type": "float"
      },
      {
        "name": "mFuelInventory",
        "comment": "@todo: Cleanup, this shouldn't need to be replicated, clients should be able to fetch this anyway. Static index of fuel slot?",
        "type": "classUFGInventoryComponent*"
      },
      {
        "name": "mCachedInputConnections",
        "comment": "Cached input connections",
        "type": "TArray<classUFGFactoryConnectionComponent*>"
      },
      {
        "name": "mCachedPipeInputConnections",
        "comment": "Cached pipe input connections",
        "type": "TArray<classUFGPipeConnectionComponent*>"
      },
      {
        "name": "mFuelInventoryIndex",
        "comment": "Input inventory index to store the fuel",
        "type": "int32"
      },
      {
        "name": "mSupplementalInventoryIndex",
        "comment": "Input inventory index to store the supplemental resource",
        "type": "int32"
      },
      {
        "name": "mCurrentFuelAmount",
        "comment": "Amount left of the currently burned piece of fuel. In megawatt seconds (MWs).",
        "type": "float"
      },
      {
        "name": "mCurrentSupplementalAmount",
        "comment": "Amount left of the currently loaded supplemental resource. In Liters ( 1 Liquid inventory item = 1 Liter )",
        "type": "float"
      },
      {
        "name": "mHasFuelCached",
        "comment": "Used so clients know how if they have available fuel or not. Could be removed later if we start syncing the production indicator state",
        "type": "mutablebool"
      },
      {
        "name": "mHasSupplementalCached",
        "comment": "Like the mHasFuelCached - Used to notify clients if there is enough supplemental resource available",
        "type": "mutablebool"
      },
      {
        "name": "mCurrentFuelClass",
        "comment": "Type of the currently burned piece of fuel.",
        "type": "TSubclassOf<classUFGItemDescriptor>"
      }
    ]
  }
]