[
  {
    "kind": "class",
    "name": "FSharedInventoryStatePtr",
    "category": "USTRUCT",
    "comment": "Copyright 2016 Coffee Stain Studios. All Rights Reserved.",
    "extends": [
      "SharedPointerInternals::FReferenceControllerBase"
    ],
    "methods": [
      {
        "name": "MakeShared",
        "comment": "Make a shared pointer of for an actor.\n@note Only valid to call on the server.",
        "returnType": "FSharedInventoryStatePtr"
      },
      {
        "name": "FSharedInventoryStatePtr"
      },
      {
        "name": "FSharedInventoryStatePtr"
      },
      {
        "name": "FSharedInventoryStatePtr"
      },
      {
        "name": "operator=",
        "returnType": "FSharedInventoryStatePtr&"
      },
      {
        "name": "operator=",
        "returnType": "FSharedInventoryStatePtr&"
      },
      {
        "name": "operator=",
        "returnType": "FSharedInventoryStatePtr&"
      },
      {
        "name": "Serialize",
        "comment": "Use a custom serialize so we can start the reference counting on a loaded pointer.",
        "returnType": "bool"
      },
      {
        "name": "operator<<",
        "returnType": "FArchive&"
      },
      {
        "name": "NetSerialize",
        "comment": "Use a custom net serialize to only allow replication from server to client and never the other way around.",
        "returnType": "bool"
      },
      {
        "name": "operator->",
        "returnType": "AActor*"
      },
      {
        "name": "IsValid",
        "comment": "@return true if pointer points to a valid actor; false if not valid or null.",
        "returnType": "bool"
      },
      {
        "name": "Get",
        "comment": "@return the actor held by this pointer; nullptr if actor is null or invalid.",
        "returnType": "AActor*"
      },
      {
        "name": "GetSharedReferenceCount",
        "returnType": "int32"
      },
      {
        "name": "Reset",
        "comment": "Set the pointer to null and release the reference.",
        "returnType": "void"
      },
      {
        "name": "operator==",
        "returnType": "bool"
      },
      {
        "name": "operator!=",
        "returnType": "bool"
      },
      {
        "name": "NewReferenceControllerWithNextFrameDeleter",
        "returnType": "SharedPointerInternals::FReferenceControllerBase*"
      },
      {
        "name": "FSharedInventoryStatePtr",
        "comment": "Private constructor to create a pointer with reference counting enabled."
      }
    ],
    "properties": [
      {
        "name": "NullState",
        "comment": "Null inventory state, use this to null an inventory state pointer.",
        "type": "staticFSharedInventoryStatePtr"
      },
      {
        "name": "ActorPtr",
        "comment": "The actor we've shared ownership over.",
        "type": "classAActor*"
      },
      {
        "name": "SharedReferenceCount",
        "comment": "Reference counter for this state pointer.\nthis is only setup on the server and is completely ignored on clients and replication.",
        "type": "SharedPointerInternals::FSharedReferencer<ESPMode::Fast>"
      }
    ]
  },
  {
    "kind": "class",
    "name": "TIsZeroConstructType",
    "extends": [],
    "methods": [],
    "properties": []
  },
  {
    "kind": "class",
    "name": "TStructOpsTypeTraits",
    "extends": [
      "TStructOpsTypeTraitsBase2"
    ],
    "methods": [],
    "properties": []
  }
]