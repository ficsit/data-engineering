[
  {
    "kind": "class",
    "name": "AFGTimeOfDaySubsystem",
    "category": "UCLASS",
    "extends": [
      "AFGSubsystem",
      "IFGSaveInterface"
    ],
    "methods": [
      {
        "name": "AFGTimeOfDaySubsystem"
      },
      {
        "name": "BeginPlay",
        "comment": "Begin AActor interface",
        "returnType": "void"
      },
      {
        "name": "Tick",
        "returnType": "void"
      },
      {
        "name": "PreSaveGame_Implementation",
        "comment": "Begin IFGSaveInterface",
        "returnType": "void"
      },
      {
        "name": "PostSaveGame_Implementation",
        "returnType": "void"
      },
      {
        "name": "PreLoadGame_Implementation",
        "returnType": "void"
      },
      {
        "name": "PostLoadGame_Implementation",
        "returnType": "void"
      },
      {
        "name": "GatherDependencies_Implementation",
        "returnType": "void"
      },
      {
        "name": "NeedTransform_Implementation",
        "returnType": "bool"
      },
      {
        "name": "ShouldSave_Implementation",
        "returnType": "bool"
      },
      {
        "name": "SetDaySeconds",
        "comment": "Set the value of daySeconds, most useful for editor preview",
        "returnType": "void"
      },
      {
        "name": "GetDayLength",
        "comment": "Get how long a day is (in minutes)",
        "returnType": "float"
      },
      {
        "name": "GetNightLength",
        "comment": "Get how long a night is (in minutes)",
        "returnType": "float"
      },
      {
        "name": "Get",
        "comment": "Get the current time subsystem",
        "returnType": "AFGTimeOfDaySubsystem*"
      },
      {
        "name": "Get",
        "comment": "Get the time of day manager for the current world",
        "returnType": "AFGTimeOfDaySubsystem*"
      },
      {
        "name": "GetNormalizedTimeOfDay",
        "comment": "Get the (game) time of day as a normalized form (0->1, where 0 is 00:00 and 1 is 24:00)",
        "returnType": "float"
      },
      {
        "name": "GetDayPct",
        "comment": "Get a value of how much \"day\" it is (0 means night, 1 means that the sun is at it's highest, and 0.5 means that it's halfway to day)",
        "returnType": "float"
      },
      {
        "name": "GetNightPct",
        "comment": "Get a value of how much \"night\" it is (0 means day, 1 means that it's \"in the middle of the night\", and 0.5 means that it's halfway there)",
        "returnType": "float"
      },
      {
        "name": "GetTimeOfDayHours",
        "comment": "Get the (game) time of day as a float in the range (0->24)",
        "returnType": "float"
      },
      {
        "name": "GetDaySeconds",
        "comment": "How many (game) seconds has passed in our current day (0->86400)",
        "returnType": "float"
      },
      {
        "name": "GetSeconds",
        "comment": "How many (game) seconds has passed since our last minute (0->60)",
        "returnType": "float"
      },
      {
        "name": "GetDayMinutes",
        "comment": "How many (game) minutes has passed in our current day (0->1440)",
        "returnType": "int32"
      },
      {
        "name": "GetMinutes",
        "comment": "How many (game) minutes has passed since our last hour (0->60)",
        "returnType": "int32"
      },
      {
        "name": "GetHours",
        "comment": "How many (game) hours has passed in our current day (0->24)",
        "returnType": "int32"
      },
      {
        "name": "GetPassedDays",
        "comment": "How many (game) days has passed since we started the server",
        "returnType": "int32"
      },
      {
        "name": "IsDay",
        "comment": "Return true if it's daytime",
        "returnType": "bool"
      },
      {
        "name": "IsNight",
        "comment": "Return true if it's nighttime",
        "returnType": "bool"
      },
      {
        "name": "GetDaytimeSeconds",
        "comment": "Get how many real seconds the daytime consists of",
        "returnType": "float"
      },
      {
        "name": "GetNighttimeSeconds",
        "comment": "Get how many real seconds the nighttime consists of",
        "returnType": "float"
      },
      {
        "name": "ForceReplicateTimeToClients",
        "comment": "Force a net update to clients",
        "returnType": "void"
      },
      {
        "name": "SetTimeSpeedMultiplier",
        "comment": "Sets multiplier for speed of time",
        "returnType": "void"
      },
      {
        "name": "GetTimeOfDayUpdatedDelegate",
        "comment": "Accessor so we can hook ourself up on editor preview thingies",
        "returnType": "FTimeOfDayUpdated&"
      },
      {
        "name": "GetDaytimeSpeed",
        "comment": "Get the daytime speed multiplier used to calculate delta seconds",
        "returnType": "float"
      },
      {
        "name": "GetNighttimeSpeed",
        "comment": "Get the nighttime speed multiplier used to calculate delta seconds",
        "returnType": "float"
      },
      {
        "name": "OnRep_ReplicatedDaySeconds",
        "comment": "Called on client whenever we update the server time",
        "returnType": "void"
      },
      {
        "name": "UpdateServerDaySeconds",
        "comment": "Update the current time of day to be replicated to clients",
        "returnType": "void"
      },
      {
        "name": "GetAdjustedDaySeconds",
        "comment": "Used internally for clients to to get the time syncronized to server-time",
        "returnType": "float"
      },
      {
        "name": "GetGameDeltaTime",
        "comment": "Convert a \"real\" dt to a \"game\" dt",
        "returnType": "float"
      }
    ],
    "properties": [
      {
        "name": "mSyncronizeTimeOfDayInterval",
        "comment": "How often (in seconds) we should synchronize the time of day with the server",
        "type": "float"
      },
      {
        "name": "mDayLengthMinutes",
        "comment": "In minutes, how long is the day part of a day? (normally 06-18).\nthat is, how many minutes should it take to for the time 06 -> 18 to pass?",
        "type": "float"
      },
      {
        "name": "mNightLengthMinutes",
        "comment": "In minutes, how long is the night part of a day? (normally 18-06).\nthat is, how many minutes should it take to for the time 18 -> 06 to pass?",
        "type": "float"
      },
      {
        "name": "mDayStartTime",
        "comment": "In hours, when does the day start (if you want 06.45, enter 06.75)",
        "type": "float"
      },
      {
        "name": "mNightStartTime",
        "comment": "In hours, when does the night start (if you want 19.10, enter 19.1666667)",
        "type": "float"
      },
      {
        "name": "mSpeedMultiplier",
        "comment": "Multiplier for speeding up the day/night cycle",
        "type": "float"
      },
      {
        "name": "mServerDaySecondsDelta",
        "comment": "Difference in our time compared to the server",
        "type": "float"
      },
      {
        "name": "mDaySeconds",
        "comment": " How many seconds that has passed into our current day",
        "type": "float"
      },
      {
        "name": "mReplicatedDaySeconds",
        "comment": "Written to by server, sends over the time that the server currently have",
        "type": "float"
      },
      {
        "name": "mNumberOfPassedDays",
        "comment": "The current day that has passed",
        "type": "int32"
      },
      {
        "name": "mUpdateServerTimeTimer",
        "comment": "Used for regularly update the server time",
        "type": "FTimerHandle"
      },
      {
        "name": "mTimeOfDayUpdated",
        "comment": "Notify so that other can hook up themself on it to be notified in the editor if the time of day is updated",
        "type": "FTimeOfDayUpdated"
      },
      {
        "name": "mUpdateTime",
        "comment": "Will only update the time if we set this to true",
        "type": "bool"
      },
      {
        "name": "mOnNewDayDelegate",
        "comment": "Server and Client | Called when a new day starts",
        "type": "FNewDayDelegate"
      }
    ]
  }
]