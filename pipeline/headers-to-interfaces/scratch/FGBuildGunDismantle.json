[
  {
    "kind": "class",
    "name": "FDismantleRefunds",
    "category": "USTRUCT",
    "extends": [],
    "methods": [
      {
        "name": "FDismantleRefunds",
        "comment": "Ctor"
      }
    ],
    "properties": [
      {
        "name": "NumPendingActors",
        "type": "uint32"
      },
      {
        "name": "PeekDismantleRefund",
        "type": "TArray<FInventoryStack>"
      }
    ]
  },
  {
    "kind": "class",
    "name": "UFGBuildGunStateDismantle",
    "category": "UCLASS",
    "comment": "Build guns dismantle state.",
    "extends": [
      "UFGBuildGunState"
    ],
    "methods": [
      {
        "name": "UFGBuildGunStateDismantle"
      },
      {
        "name": "GetLifetimeReplicatedProps",
        "returnType": "void"
      },
      {
        "name": "BeginState_Implementation",
        "comment": "Begin UFGBuildGunState",
        "returnType": "void"
      },
      {
        "name": "EndState_Implementation",
        "returnType": "void"
      },
      {
        "name": "TickState_Implementation",
        "returnType": "void"
      },
      {
        "name": "PrimaryFire_Implementation",
        "returnType": "void"
      },
      {
        "name": "SecondaryFire_Implementation",
        "returnType": "void"
      },
      {
        "name": "OnRecipeSampled_Implementation",
        "returnType": "void"
      },
      {
        "name": "SetMultiDismantleState",
        "comment": "Toggle between whether the multi select should be in effect as actors are being highlighted",
        "returnType": "void"
      },
      {
        "name": "GetSelectedActor",
        "comment": "Gets the selected actor; null if none selected.",
        "returnType": "classAActor*"
      },
      {
        "name": "GetNumPendingDismantleActors",
        "comment": "Returns the number of actors that are pending for dismantle",
        "returnType": "int32"
      },
      {
        "name": "GetMaxNumPendingDismantleActors",
        "comment": "Returns the maximum number of actors that can be selected for mass-dismantle",
        "returnType": "int32"
      },
      {
        "name": "HasReachedMaxNumPendingDismantleActors",
        "comment": "Returns true whether the limit for maximum number of actors pending dismantle has been reached",
        "returnType": "bool"
      },
      {
        "name": "GetPeekDismantleRefund",
        "returnType": "TArray<FInventoryStack>"
      },
      {
        "name": "CanDismantle",
        "comment": "Can the selected actor be dismantled (Only call this on the server).",
        "returnType": "bool"
      },
      {
        "name": "GetDismantleRefund",
        "comment": "What do we get by dismantling the actor (Only call this on the server).",
        "returnType": "TArray<FInventoryStack>"
      },
      {
        "name": "CanBeginBuildGunDelay",
        "comment": "returns true if build gun delay is ok to start",
        "returnType": "bool"
      },
      {
        "name": "BeginBuildGunDelay",
        "comment": "Overriden for feedback purposes",
        "returnType": "void"
      },
      {
        "name": "ResetBuildGunDelay",
        "comment": "Overriden for feedback purposes",
        "returnType": "void"
      },
      {
        "name": "OnStopDismantle",
        "comment": "Give blueprint a chance to do effect when stopping dismantle",
        "returnType": "void"
      },
      {
        "name": "OnStartDismantle",
        "comment": "Give blueprint a chance to do effect when starting dismantle",
        "returnType": "void"
      },
      {
        "name": "Internal_OnMultiDismantleStateChanged",
        "returnType": "void"
      },
      {
        "name": "Server_DismantleActors",
        "comment": "Client selects actor, then tells the server what to dismantle. This function does that!",
        "returnType": "void"
      },
      {
        "name": "Server_PeekAtDismantleRefund",
        "returnType": "void"
      },
      {
        "name": "OnRep_PeekDismantleRefund",
        "returnType": "void"
      },
      {
        "name": "Internal_DismantleActor",
        "comment": "Dismantle a given actor. Refunds that couldn't fit in inventory from dismantled actor will be appended to out_overflowRefunds. Will place overflow refunds on ground if dropRefundsOnDismantle is true.",
        "returnType": "void"
      },
      {
        "name": "SetAimedAtActor",
        "comment": "Set the selected actor (Simulated on client). Deselects the actor is selected param is nullptr",
        "returnType": "void"
      },
      {
        "name": "AddPendingDismantleActor",
        "comment": "Adds dismantlable actors to the list of pending dismantles",
        "returnType": "void"
      },
      {
        "name": "ClearPendingSelectedActors",
        "comment": "Clears the list of pending dismantable actors",
        "returnType": "void"
      },
      {
        "name": "DoesReplicatedPeekDataMatch",
        "comment": "Checks whether or not the replicated data for inventory peeking matches the state for client",
        "returnType": "bool"
      },
      {
        "name": "UpdatePeekDismantleRefunds",
        "comment": "Sends server request to update the current dismantle refunds preview",
        "returnType": "void"
      },
      {
        "name": "ClearStaleDismantleActors",
        "comment": "Validates the list of pending dismantle actors and removes any stale pointers",
        "returnType": "void"
      }
    ],
    "properties": [
      {
        "name": "OnPeekRefundsChanged",
        "comment": "Delegate for when the refunds used to preview dismantle refunds have been updated on local machine",
        "type": "FOnDismantleRefundsChanged"
      },
      {
        "name": "OnPendingDismantleActorsChanged",
        "type": "FOnPendingDismantleActorListChanged"
      },
      {
        "name": "OnMultiDismantleStateChanged",
        "type": "FOnMultiDismantleStateChanged"
      },
      {
        "name": "mIsMultiSelectActive",
        "comment": "State bool for whether multi-select is in effect",
        "type": "bool"
      },
      {
        "name": "mDisablePeekDismantleRefundsBroadcast",
        "comment": "If true then this state won't broadcast when peek refunds have been updated. Used so that there won't be more than one broadcast per tick.",
        "type": "bool"
      },
      {
        "name": "mCurrentlySelectedActor",
        "comment": "Currently selected dismantable actor",
        "type": "classAActor*"
      },
      {
        "name": "mPendingDismantleActors",
        "comment": "The actor to dismantle (simulated locally on client).",
        "type": "TArray<classAActor*>"
      },
      {
        "name": "mPeekDismantleRefund",
        "comment": "Cached dismantle refunds on server that is replicated",
        "type": "FDismantleRefunds"
      }
    ]
  }
]