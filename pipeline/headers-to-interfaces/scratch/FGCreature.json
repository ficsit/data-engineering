[
  {
    "kind": "enum",
    "name": "EEnabled",
    "comment": "@todo: We should probably change this to EUndefinedBool",
    "entries": [
      {
        "name": "E_Enabled"
      },
      {
        "name": "E_Disabled"
      },
      {
        "name": "E_Unknown"
      }
    ]
  },
  {
    "kind": "enum",
    "name": "EMoveSpeed",
    "entries": [
      {
        "name": "MS_Undefined"
      },
      {
        "name": "MS_Walk",
        "displayName": "Slow speed"
      },
      {
        "name": "MS_Run",
        "displayName": "Normal"
      },
      {
        "name": "MS_Sprint",
        "displayName": "Extra fast"
      }
    ]
  },
  {
    "kind": "class",
    "name": "FMoveSpeedPair",
    "category": "USTRUCT",
    "extends": [],
    "methods": [],
    "properties": [
      {
        "name": "MoveSpeedType",
        "type": "EMoveSpeed"
      },
      {
        "name": "Speed",
        "type": "float"
      }
    ]
  },
  {
    "kind": "class",
    "name": "AFGCreature",
    "category": "UCLASS",
    "extends": [
      "AFGCharacterBase"
    ],
    "methods": [
      {
        "name": "GetLifetimeReplicatedProps",
        "returnType": "void"
      },
      {
        "name": "AFGCreature",
        "comment": "ctor"
      },
      {
        "name": "BeginPlay",
        "comment": "Begin AActor Interface",
        "returnType": "void"
      },
      {
        "name": "PreInitializeComponents",
        "returnType": "void"
      },
      {
        "name": "Tick",
        "returnType": "void"
      },
      {
        "name": "Died",
        "comment": "Begin FGCharacterBase",
        "returnType": "void"
      },
      {
        "name": "GetPawnViewLocation",
        "comment": "@return\tPawn's eye location",
        "returnType": "FVector"
      },
      {
        "name": "GetSplinePath",
        "comment": "Gets the spline we are set to follow",
        "returnType": "classAFGSplinePath*"
      },
      {
        "name": "CanSpawnDuringDay",
        "comment": "Getter for spawn variables",
        "returnType": "bool"
      },
      {
        "name": "CanSpawnDuringNight",
        "returnType": "bool"
      },
      {
        "name": "GetIsEnabled",
        "comment": "Gets the spline we are set to follow",
        "returnType": "bool"
      },
      {
        "name": "IsPersistent",
        "comment": "Indicates if we are persistent ( not removed after a distance specified in AISystem )",
        "returnType": "bool"
      },
      {
        "name": "SetPersistent",
        "comment": "Sets if we should persist or not",
        "returnType": "void"
      },
      {
        "name": "StartRotationMovement",
        "comment": "Starts the rotation movement",
        "returnType": "void"
      },
      {
        "name": "CancelRotationMovement",
        "comment": "Cancels the rotation movement",
        "returnType": "void"
      },
      {
        "name": "GetTargetRotation",
        "comment": "Gets the target rotation",
        "returnType": "FRotator"
      },
      {
        "name": "GetIsArachnid",
        "comment": "Is this creature an arachnid?",
        "returnType": "bool"
      },
      {
        "name": "GetArachnophobiaModeMaterials",
        "comment": "Gets the array of sprites that may be used for arachnophobia mode",
        "returnType": "TArray<UMaterialInstance*>"
      },
      {
        "name": "ConfigureArachnophobiaMode",
        "comment": "Sets up the Arachnophobia mode",
        "returnType": "void"
      },
      {
        "name": "GetDayTimePctAsNight",
        "comment": "How much of day time percentage ( 0.0 - 1.0 ) should count towards night time",
        "returnType": "float"
      },
      {
        "name": "OnArachnophobiaModeChanged",
        "comment": "Called when the Arachnophobia mode setting is changed",
        "returnType": "void"
      },
      {
        "name": "CheckRotationMovement",
        "comment": "Checks when we are done rotating and calls the complete delegate",
        "returnType": "void"
      },
      {
        "name": "Multicast_ConsumeItem",
        "comment": "Notify when creature consumes a item",
        "returnType": "void"
      },
      {
        "name": "PlayConsumeItemEffect",
        "comment": "Play effects when creature consumes a item",
        "returnType": "void"
      },
      {
        "name": "SetMoveSpeed",
        "comment": "Updates the movement speed ( server side )",
        "returnType": "void"
      },
      {
        "name": "AiCalculateLeadTrajectory",
        "comment": "\n\t@InterceptPoint Position of interception if possible, otherwise an approximate logical position is set, so it looks like it at least tries to predict/hit",
        "returnType": "void"
      },
      {
        "name": "SpawnDeathItem",
        "comment": "Called when creature died to spawn death item",
        "returnType": "void"
      },
      {
        "name": "GetSpawner",
        "comment": "Returns the spawner that created this creature. Can be null",
        "returnType": "classAFGCreatureSpawner*"
      },
      {
        "name": "SetSpawner",
        "comment": "Sets the spawner for this creature",
        "returnType": "void"
      },
      {
        "name": "OnRep_TargetRotation",
        "returnType": "void"
      },
      {
        "name": "OnRep_IsEnabled",
        "returnType": "void"
      },
      {
        "name": "SetEnabled",
        "comment": "Set our enabled state",
        "returnType": "void"
      }
    ],
    "properties": [
      {
        "name": "mNavigationGenerationRadius",
        "comment": "How big navmesh do we want to generate",
        "type": "float"
      },
      {
        "name": "mNavigationRemovalRadius",
        "comment": "Navigation outside this radius will be removed",
        "type": "float"
      },
      {
        "name": "mArachnophobiaModeMaterials",
        "comment": "Materials that may be used on arachnids",
        "type": "TArray<UMaterialInstance*>"
      },
      {
        "name": "mIsArachnid",
        "comment": "Is creature considered an arachnid",
        "type": "bool"
      },
      {
        "name": "mIsEnabled",
        "comment": "True if optimized by the AI system",
        "type": "TEnumAsByte<EEnabled>"
      },
      {
        "name": "mItemToDrop",
        "comment": "Class of item to drop when dead",
        "type": "TSubclassOf<classAFGItemPickup>"
      },
      {
        "name": "mSpline",
        "comment": "Spline we are set to follow",
        "type": "classAFGSplinePath*"
      },
      {
        "name": "mRotationDoneDelegate",
        "comment": "Called when we are done with rotation movement",
        "type": "FRotationDoneDelegate"
      },
      {
        "name": "mMoveSpeedData",
        "comment": "Array with information about different speeds that this creature can use",
        "type": "TArray<FMoveSpeedPair>"
      },
      {
        "name": "mShouldOptimizeMeshWhenVisible",
        "comment": "Indicates if we should optimize this creatures mesh ( disable ticking ) when looking at it from a distance ( not good on large creatures )",
        "type": "bool"
      },
      {
        "name": "mIsPersistent",
        "comment": "Should this creature be able to persist in the world",
        "type": "bool"
      },
      {
        "name": "mActualAIControllerClass",
        "comment": "We specify our own controller class because we need to delay the spawning. Set this instead of \"AIControllerClass",
        "type": "TSubclassOf<AController>"
      },
      {
        "name": "mRotationTimerHandle",
        "comment": "Timer handle used when rotating the pawn with our custom rotate movement",
        "type": "FTimerHandle"
      },
      {
        "name": "mTargetRotation",
        "comment": "Target rotation for custom rotate movement",
        "type": "FRotator"
      },
      {
        "name": "mMaxRotationTime",
        "comment": "How long time we can take on rotation at max",
        "type": "float"
      },
      {
        "name": "mRotationDt",
        "comment": "The timestep we use when rotating",
        "type": "float"
      },
      {
        "name": "mTimeSpentRotating",
        "comment": "How long we have been rotating for",
        "type": "float"
      },
      {
        "name": "mCanSpawnDuringDay",
        "comment": "Can creatures spawn during day?",
        "type": "bool"
      },
      {
        "name": "mCanSpawnDuringNight",
        "comment": "Can creatures spawn during night?",
        "type": "bool"
      },
      {
        "name": "mMoveDuringRotation",
        "comment": "Used in combination with BTT_RotateToTarget if we need the creature to move while rotating",
        "type": "bool"
      },
      {
        "name": "mRotationSpeedMultiplier",
        "comment": "Scale value for input vector when rotating and moving",
        "type": "float"
      },
      {
        "name": "mEyeLocationComponent",
        "comment": "Component used to determine eye location for a creature",
        "type": "USceneComponent*"
      },
      {
        "name": "mArachnophobia_Sprite",
        "comment": "Sprite for the arachnophobia mode",
        "type": "classUBillboardComponent*"
      },
      {
        "name": "mArachnophobia_Material",
        "comment": "Material for the arachnophobia mode",
        "type": "classUMaterialBillboardComponent*"
      },
      {
        "name": "mArachnophobia_Particle",
        "comment": "Particle for the arachnophobia mode",
        "type": "classUParticleSystemComponent*"
      },
      {
        "name": "mDayTimePctCountAsNight",
        "comment": "How much of day time percentage ( 0.0 - 1.0 ) should count towards night time",
        "type": "float"
      },
      {
        "name": "mOwningSpawner",
        "comment": "Reference to the spawner that handles this creature",
        "type": "classAFGCreatureSpawner*"
      }
    ]
  }
]