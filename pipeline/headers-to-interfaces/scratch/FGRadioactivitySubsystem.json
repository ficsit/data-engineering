[
  {
    "kind": "class",
    "name": "FRadioactiveEmitter",
    "comment": "Description of a radioactive emitter.",
    "extends": [],
    "methods": [
      {
        "name": "FRadioactiveEmitter"
      }
    ],
    "properties": [
      {
        "name": "UID",
        "comment": "Optional unique ID for this emitter (unique per source). INDEX_NONE for set and forget emitters.",
        "type": "int32"
      },
      {
        "name": "ItemDecay",
        "comment": "Decays per second for one item.",
        "type": "float"
      },
      {
        "name": "ItemAmount",
        "comment": "Number of items.",
        "type": "int32"
      },
      {
        "name": "LocalLocation",
        "comment": "Location where radiation is emitted.",
        "type": "FVector"
      },
      {
        "name": "CachedWorldLocation",
        "type": "FVector"
      }
    ]
  },
  {
    "kind": "class",
    "name": "FRadioactiveSource",
    "category": "USTRUCT",
    "comment": "Description of a radioactive source.",
    "extends": [],
    "methods": [],
    "properties": [
      {
        "name": "AttachRoot",
        "comment": "Where the emitters are attached.",
        "type": "USceneComponent*"
      },
      {
        "name": "Emitters",
        "type": "TArray<FRadioactiveEmitter>"
      }
    ]
  },
  {
    "kind": "class",
    "name": "FRemoveEmitterID",
    "category": "USTRUCT",
    "extends": [],
    "methods": [
      {
        "name": "FRemoveEmitterID"
      },
      {
        "name": "FRemoveEmitterID"
      }
    ],
    "properties": [
      {
        "name": "Owner",
        "type": "UObject*"
      },
      {
        "name": "UID",
        "type": "int32"
      }
    ]
  },
  {
    "kind": "class",
    "name": "FSetEmitterID",
    "category": "USTRUCT",
    "extends": [],
    "methods": [
      {
        "name": "FSetEmitterID"
      },
      {
        "name": "FSetEmitterID"
      }
    ],
    "properties": [
      {
        "name": "Owner",
        "type": "UObject*"
      },
      {
        "name": "AttachRoot",
        "type": "USceneComponent*"
      },
      {
        "name": "AttachLocation",
        "type": "FVector"
      },
      {
        "name": "ItemClass",
        "type": "TSubclassOf<UFGItemDescriptor>"
      },
      {
        "name": "ItemAmount",
        "type": "int32"
      },
      {
        "name": "UID",
        "type": "int32"
      }
    ]
  },
  {
    "kind": "class",
    "name": "AFGRadioactivitySubsystem",
    "category": "UCLASS",
    "comment": "Actor for handling the radioactive items.",
    "extends": [
      "AFGSubsystem"
    ],
    "methods": [
      {
        "name": "AFGRadioactivitySubsystem"
      },
      {
        "name": "BeginPlay",
        "comment": "Begin AActor interface",
        "returnType": "void"
      },
      {
        "name": "Tick",
        "returnType": "void"
      },
      {
        "name": "DisplayDebug",
        "returnType": "void"
      },
      {
        "name": "OnActorSpawned",
        "comment": "End AActor interface",
        "returnType": "void"
      },
      {
        "name": "OnActorDestroyed",
        "returnType": "void"
      },
      {
        "name": "Get",
        "comment": "Get the radioactivity subsystem, this should always return something unless you call it really early.",
        "returnType": "AFGRadioactivitySubsystem*"
      },
      {
        "name": "Get",
        "comment": "Get the radioactivity subsystem from a world context, this should always return something unless you call it really early.",
        "returnType": "AFGRadioactivitySubsystem*"
      },
      {
        "name": "SetEmitter",
        "comment": "@param itemAmount\t\tThe amount of the radioactive item.\n@param UID\t\t\t\t(optional) unique identifier for later update the emitter, INDEX_NONE",
        "returnType": "void"
      },
      {
        "name": "SetEmitter_Threadsafe",
        "comment": "Thread safe version of SetEmitter. Queues the add/update of an radioactive emitter",
        "returnType": "void"
      },
      {
        "name": "SetEmitter",
        "comment": "\n @param decay     Decays per second for this source.",
        "returnType": "void"
      },
      {
        "name": "RemoveEmitter_Threadsafe",
        "comment": "Thread safe version of RemoveEmitter. Queues the removal of an radioactive emitter",
        "returnType": "void"
      },
      {
        "name": "RemoveEmitter",
        "comment": "Removes a specific emitter.",
        "returnType": "void"
      },
      {
        "name": "ResetEmitters",
        "comment": "Remove all the emitters but preserves the memory allocations.",
        "returnType": "void"
      },
      {
        "name": "RemoveEmitters",
        "comment": "Remove all emitters and free the memory allocations.",
        "returnType": "void"
      },
      {
        "name": "calculateIntensity",
        "comment": "Calculates the radiation intensity at a given distance",
        "returnType": "float"
      },
      {
        "name": "FindOrAddSource",
        "returnType": "FRadioactiveSource&"
      },
      {
        "name": "FindSource",
        "returnType": "FRadioactiveSource*"
      },
      {
        "name": "FindOrAddEmitter",
        "returnType": "FRadioactiveEmitter&"
      },
      {
        "name": "FindEmitter",
        "returnType": "int32"
      }
    ],
    "properties": [
      {
        "name": "mMinRadiationThreshold",
        "comment": "Radiation levels lower than this are ignored. (A good number is around 0.0001)",
        "type": "float"
      },
      {
        "name": "mRadiationFalloffByDistance",
        "comment": "How much radiation falls off during distance. (A good number is around 0.08)",
        "type": "float"
      },
      {
        "name": "mMinDistanceToSource",
        "comment": "The closest we can get to any radiation source. This can greatly limit the radiation received from items in the players inventory..",
        "type": "float"
      },
      {
        "name": "mRadiationDamageType",
        "comment": "The type of damage radiation deals.",
        "type": "TSubclassOf<classUFGDamageType>"
      },
      {
        "name": "mSources",
        "comment": "@todooptimize This can be optimized with an array if profiler says anything.\nAll the radioactive sources.",
        "type": "TMap<UObject*,FRadioactiveSource>"
      },
      {
        "name": "mEmittersToRemove",
        "comment": "Thread safe queue for storing emitters that shall be removed",
        "type": "TQueue<FRemoveEmitterID,EQueueMode::Mpsc>"
      },
      {
        "name": "mEmittersToSet",
        "comment": "Thread safe queue for storing emitters that shall be set",
        "type": "TQueue<FSetEmitterID,EQueueMode::Mpsc>"
      },
      {
        "name": "mAffectedActors",
        "comment": "All actors that can take damage from radiation.",
        "type": "TArray<classAActor*>"
      },
      {
        "name": "mCachedLocations",
        "comment": "All actors cached locations and exposures to radiation, this becomes invalid when a pawn is added/removed.",
        "type": "TArray<FVector>"
      },
      {
        "name": "mCachedExposures",
        "type": "TArray<float>"
      },
      {
        "name": "mMaxIntensity",
        "comment": "The max accumulated intensity that can be registered from radioactive emitters",
        "type": "float"
      }
    ]
  }
]