[
  {
    "kind": "class",
    "name": "FPendingInvite",
    "category": "USTRUCT",
    "extends": [],
    "methods": [
      {
        "name": "IsValid",
        "returnType": "bool"
      },
      {
        "name": "ToDebugString",
        "returnType": "FString"
      }
    ],
    "properties": [
      {
        "name": "Receiver",
        "comment": "Who was the invite intended to, mostly redundant, as we don't support splitscreen",
        "type": "TSharedPtr<constFUniqueNetId>"
      },
      {
        "name": "Sender",
        "comment": "Id of the sender of the invite",
        "type": "TSharedPtr<constFUniqueNetId>"
      },
      {
        "name": "SearchResult",
        "comment": "Information about the session the user is playing in",
        "type": "FOnlineSessionSearchResult"
      }
    ]
  },
  {
    "kind": "class",
    "name": "UFGOnlineSessionClient",
    "category": "UCLASS",
    "comment": "- HandleInvites\nWill detect that we receive a invite and expose functionality to join invites and react to the invite",
    "extends": [
      "UOnlineSessionClient"
    ],
    "methods": [
      {
        "name": "RegisterOnlineDelegates",
        "comment": "~Begin UOnlineSession interface",
        "returnType": "void"
      },
      {
        "name": "ClearOnlineDelegates",
        "returnType": "void"
      },
      {
        "name": "HandleDisconnect",
        "returnType": "void"
      },
      {
        "name": "GetPendingInvites",
        "comment": "Get invites that hasn't been accepted yet",
        "returnType": "void"
      },
      {
        "name": "AcceptInvite",
        "comment": "Accept a invite",
        "returnType": "void"
      },
      {
        "name": "JoinGameSession",
        "comment": "Properly join a game session and destroy existing session",
        "returnType": "void"
      },
      {
        "name": "DiscardInvite",
        "comment": "Discard a invite from our pending invites",
        "returnType": "void"
      },
      {
        "name": "BroadcastInviteReceived",
        "comment": "Make sure we broadcast information about a recevied invite when we get enough info about it",
        "returnType": "void"
      },
      {
        "name": "GetLocalUserId",
        "returnType": "int32"
      },
      {
        "name": "OnQueryUserInfoComplete",
        "returnType": "void"
      },
      {
        "name": "OnSessionInviteReceived",
        "comment": "~Begin session callbacks",
        "returnType": "void"
      },
      {
        "name": "OnJoinSessionComplete",
        "returnType": "void"
      },
      {
        "name": "ClearPresenceKeys",
        "comment": "Clear out all the presence data from our current players presence",
        "returnType": "void"
      }
    ],
    "properties": [
      {
        "name": "mOnSessionInviteReceivedHandle",
        "comment": "~Begin session delegates handles",
        "type": "FDelegateHandle"
      },
      {
        "name": "mOnQueryUserInfoCompleteHandle",
        "type": "FDelegateHandle"
      },
      {
        "name": "mPendingInvites",
        "comment": "Invites with enough information to accept",
        "type": "TArray<FPendingInvite>"
      },
      {
        "name": "mUninitializedInvites",
        "comment": "Invites that we don't have enough information to be able to accept, waiting for data from OSS",
        "type": "TArray<FPendingInvite>"
      }
    ]
  }
]