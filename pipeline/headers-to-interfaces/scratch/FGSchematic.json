[
  {
    "kind": "enum",
    "name": "ESchematicCategory",
    "comment": "@todo [MODSUPPORT] This should maybe be implemented the same way as UFGBuildCategories?",
    "entries": [
      {
        "name": "ESC_LOGISTICS",
        "displayName": "Logistics"
      },
      {
        "name": "ESC_PRODUCTION",
        "displayName": "Production"
      },
      {
        "name": "ESC_EQUIPMENT",
        "displayName": "Equipment"
      },
      {
        "name": "ESC_ORGANISATION",
        "displayName": "Organisation"
      }
    ]
  },
  {
    "kind": "enum",
    "name": "ESchematicType",
    "comment": "@todo [MODSUPPORT] This should maybe be implemented the same way as UFGBuildCategories?",
    "entries": [
      {
        "name": "EST_Custom",
        "displayName": "Custom"
      },
      {
        "name": "EST_Cheat",
        "displayName": "Cheat"
      },
      {
        "name": "EST_Tutorial",
        "displayName": "Tutorial"
      },
      {
        "name": "EST_Milestone",
        "displayName": "Milestone"
      },
      {
        "name": "EST_Alternate",
        "displayName": "Alternate"
      },
      {
        "name": "EST_Story",
        "displayName": "Story"
      },
      {
        "name": "EST_MAM",
        "displayName": "MAM"
      },
      {
        "name": "EST_ResourceSink",
        "displayName": "Resource Sink"
      },
      {
        "name": "EST_HardDrive",
        "displayName": "Hard Drive"
      }
    ]
  },
  {
    "kind": "class",
    "name": "FMultipleItemStruct",
    "category": "USTRUCT",
    "comment": "Holds info about a schematic cost.",
    "extends": [],
    "methods": [],
    "properties": [
      {
        "name": "ItemCost",
        "comment": "Cost of schematic if there are more than once item in this array the true cost will be randomly selected.",
        "type": "TArray<FItemAmount>"
      }
    ]
  },
  {
    "kind": "class",
    "name": "UFGSchematic",
    "category": "UCLASS",
    "comment": "This is a schematic. It is purchased in the trading post and grants the player resources and/or recipes.",
    "extends": [
      "UObject"
    ],
    "methods": [
      {
        "name": "UFGSchematic"
      },
      {
        "name": "GetType",
        "comment": "Returns the type of schematic.",
        "returnType": "ESchematicType"
      },
      {
        "name": "GetSchematicDisplayName",
        "comment": "Returns the display name of this schematic",
        "returnType": "FText"
      },
      {
        "name": "GetSchematicCategory",
        "comment": "Returns the category of this schematic",
        "returnType": "TSubclassOf<classUFGSchematicCategory>"
      },
      {
        "name": "GetSubCategories",
        "comment": "Returns the sub categories of this schematic",
        "returnType": "void"
      },
      {
        "name": "GetCost",
        "comment": "Returns the cost of this schematic",
        "returnType": "TArray<FItemAmount>"
      },
      {
        "name": "GetUnlocks",
        "comment": "Returns the unlocks granted by this schematic",
        "returnType": "TArray<UFGUnlock*>"
      },
      {
        "name": "GetTechTier",
        "comment": "Returns mTechOnionTier",
        "returnType": "int32"
      },
      {
        "name": "GetTimeToComplete",
        "comment": "Returns how long this schematics takes to complete its actions when we acquire it",
        "returnType": "float"
      },
      {
        "name": "GetItemIcon",
        "comment": "The icon to be used in UI.",
        "returnType": "FSlateBrush"
      },
      {
        "name": "GetDependentOnSchematic",
        "comment": "Gets the schematic this is dependent on for being unlocked",
        "returnType": "TSubclassOf<UFGSchematic>"
      },
      {
        "name": "GetAdditionalSchematicDependencies",
        "comment": "Gets an additional array of dependencies for this schematic to be available",
        "returnType": "TArray<TSubclassOf<UFGSchematic>>"
      },
      {
        "name": "IsRepeatPurchasesAllowed",
        "comment": "Returns true if this schematic is allowed to be purchased more than once",
        "returnType": "bool"
      },
      {
        "name": "IsIncludedInBuild",
        "comment": "Return true if we should include this schematic in the current build",
        "returnType": "bool"
      },
      {
        "name": "PostLoad",
        "comment": "Begin UObject interface",
        "returnType": "void"
      },
      {
        "name": "Serialize",
        "returnType": "void"
      },
      {
        "name": "PreSave",
        "returnType": "void"
      },
      {
        "name": "AddRecipe",
        "comment": "Add a recipe to this schematic. Only for editor use",
        "returnType": "void"
      },
      {
        "name": "UpdateAssetBundleData",
        "comment": "This scans the class for AssetBundles metadata on asset properties and initializes the AssetBundleData with InitializeAssetBundlesFromMetadata",
        "returnType": "void"
      },
      {
        "name": "GetPrimaryAssetId",
        "returnType": "FPrimaryAssetId"
      },
      {
        "name": "MigrateDataToNewSchematicCategory",
        "comment": "This uses the old schematic category enum to add the new object based type category",
        "returnType": "void"
      }
    ],
    "properties": [
      {
        "name": "mType",
        "comment": "What type of schematic is this.",
        "type": "ESchematicType"
      },
      {
        "name": "mDisplayName",
        "comment": "The name to be displayed to the player",
        "type": "FText"
      },
      {
        "name": "mSchematicCategory",
        "comment": "The category this schematic belongs to.",
        "type": "TSubclassOf<classUFGSchematicCategory>"
      },
      {
        "name": "mSubCategories",
        "comment": "The sub categories this schematic belongs to.",
        "type": "TArray<TSubclassOf<classUFGSchematicCategory>>"
      },
      {
        "name": "mTechTier",
        "comment": "The tech tier that this Schematic belongs to. [0...N]",
        "type": "int32"
      },
      {
        "name": "mCost",
        "comment": "The cost of this schematic.",
        "type": "TArray<FItemAmount>"
      },
      {
        "name": "mTimeToComplete",
        "comment": "When we acquire this schematic how long does it take for it to complete its actions",
        "type": "float"
      },
      {
        "name": "mUnlocks",
        "comment": "The unlocks you get when purchasing",
        "type": "TArray<classUFGUnlock*>"
      },
      {
        "name": "mSchematicIcon",
        "comment": "Icon used when displaying this schematic",
        "type": "FSlateBrush"
      },
      {
        "name": "mDependsOnSchematic",
        "comment": "Is this schematic dependant on any other for being unlocked?",
        "type": "TSubclassOf<UFGSchematic>"
      },
      {
        "name": "mAdditionalSchematicDependencies",
        "comment": "Additional list of schematics for more specific dependency checking",
        "type": "TArray<TSubclassOf<UFGSchematic>>"
      },
      {
        "name": "mSchematicCategoryDeprecated",
        "comment": "Begin Deprecated\nThe category this schematic belongs to.",
        "type": "ESchematicCategory"
      },
      {
        "name": "mAssetBundleData",
        "comment": "Asset Bundle data computed at save time. In cooked builds this is accessible from AssetRegistry",
        "type": "FAssetBundleData"
      },
      {
        "name": "mIncludeInBuilds",
        "comment": "Slightly misleading name, as this doesn't only apply to builds. If set to Never, it won't show up in editor",
        "type": "EIncludeInBuilds"
      }
    ]
  }
]