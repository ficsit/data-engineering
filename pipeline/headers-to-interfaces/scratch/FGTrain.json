[
  {
    "kind": "enum",
    "name": "ESelfDrivingLocomotiveError",
    "comment": "Error codes for the self driving locomotives.",
    "entries": [
      {
        "name": "SDLE_NoError",
        "displayName": "No Error"
      },
      {
        "name": "SDLE_NoPower",
        "displayName": "No Power"
      },
      {
        "name": "SDLE_NoTimeTable",
        "displayName": "No Time Table"
      },
      {
        "name": "SDLE_InvalidNextStop",
        "displayName": "Invalid Next Stop"
      },
      {
        "name": "SDLE_InvalidLocomotivePlacement",
        "displayName": "Invalid Locomotive Placement"
      },
      {
        "name": "SDLE_NoPath",
        "displayName": "No Path"
      }
    ]
  },
  {
    "kind": "enum",
    "name": "ERailroadSignalAspect",
    "comment": "Signal aspects used for signaling and ATC points.",
    "entries": [
      {
        "name": "RSA_None",
        "displayName": "None"
      },
      {
        "name": "RSA_Clear",
        "displayName": "Clear"
      },
      {
        "name": "RSA_ClearThenStop",
        "displayName": "Clear Then Stop"
      },
      {
        "name": "RSA_Stop",
        "displayName": "Stop"
      },
      {
        "name": "RSA_Dock",
        "displayName": "Dock"
      }
    ]
  },
  {
    "kind": "enum",
    "name": "ETrainDockingState",
    "comment": "Docked state.",
    "entries": [
      {
        "name": "TDS_None",
        "displayName": "None"
      },
      {
        "name": "TDS_ReadyToDock",
        "displayName": "Ready To Dock"
      },
      {
        "name": "TDS_Docked",
        "displayName": "Docked"
      }
    ]
  },
  {
    "kind": "class",
    "name": "TrainConstants",
    "comment": "Global constants for trains.",
    "extends": [],
    "methods": [],
    "properties": [
      {
        "name": "CATCH_DISTANCE",
        "comment": "At which distance can a station start catching the train. [cm]",
        "type": "staticfloat"
      },
      {
        "name": "STOP_OFFSET",
        "comment": "At which offset should a locomotive stop at a signal or station. [cm]",
        "type": "staticfloat"
      },
      {
        "name": "DOCK_DISTANCE",
        "comment": "At which distance a locomotive can dock to a station. [cm]",
        "type": "staticfloat"
      },
      {
        "name": "DOCK_SPEED",
        "comment": "At which speed is docking allowed. [cm/s]",
        "type": "staticfloat"
      },
      {
        "name": "RESTRICTED_SPEED",
        "comment": "This is the speed on a restricted section, e.g. before docking. [cm/s]",
        "type": "staticfloat"
      }
    ]
  },
  {
    "kind": "class",
    "name": "FTrainConsist",
    "category": "USTRUCT",
    "comment": "Describes the static properties of a train consist.\nI.e. the locomotives, railcars, length and tare weight.",
    "extends": [],
    "methods": [],
    "properties": [
      {
        "name": "Vehicles",
        "comment": "The vehicles in this consist.",
        "type": "TArray<TSubclassOf<AFGRailroadVehicle>>"
      },
      {
        "name": "Length",
        "comment": "Length of the consist, [cm]",
        "type": "float"
      },
      {
        "name": "Mass",
        "comment": "Mass of the consist, [kg]",
        "type": "float"
      },
      {
        "name": "MaxSpeed",
        "comment": "Maximum speed for the slowest vehicle in the consist. [cm/s]",
        "type": "float"
      },
      {
        "name": "MaxAirBrakingEffort",
        "comment": "The sustained braking force the consist can apply in it's operational speed range. [N] [kg cm/s^2]",
        "type": "float"
      },
      {
        "name": "HighSpeedDynamicBrakingEffort",
        "type": "float"
      },
      {
        "name": "LimitedSpeedDynamicBrakingEffort",
        "type": "float"
      },
      {
        "name": "MaxTractiveEffort",
        "type": "float"
      }
    ]
  },
  {
    "kind": "class",
    "name": "FTrainAtcPoint",
    "category": "USTRUCT",
    "extends": [],
    "methods": [],
    "properties": [
      {
        "name": "TrackConnection",
        "comment": "The track connection.",
        "type": "UFGRailroadTrackConnectionComponent*"
      },
      {
        "name": "LongDistance",
        "comment": "How far away is this point in whole segments.",
        "type": "float"
      },
      {
        "name": "Distance",
        "comment": "How far away is this point.",
        "type": "float"
      },
      {
        "name": "AverageGrade",
        "comment": "How high up is this.",
        "type": "float"
      },
      {
        "name": "SpeedLimit",
        "comment": "The speed the train should have when passing this point. No limit if 0.",
        "type": "float"
      },
      {
        "name": "SignalAspect",
        "comment": "Signal output at this point. If any.",
        "type": "ERailroadSignalAspect"
      }
    ]
  },
  {
    "kind": "class",
    "name": "FTrainAtcData",
    "category": "USTRUCT",
    "comment": "For the AI to make the correct decisions.\nAs a safety/guidance system for when the player is driving.",
    "extends": [],
    "methods": [
      {
        "name": "SetPath",
        "comment": "Functions to help manage the path.",
        "returnType": "bool"
      },
      {
        "name": "ClearPath",
        "returnType": "void"
      },
      {
        "name": "HasPath",
        "returnType": "bool"
      },
      {
        "name": "UpdateTargetPoints",
        "comment": "Update the target points ahead from the current connection.",
        "returnType": "void"
      },
      {
        "name": "UpdateCurrentPathSegment",
        "comment": "Function to update which path segment we're on based on what our current connection is up ahead.",
        "returnType": "bool"
      },
      {
        "name": "IsRelevantForATC",
        "comment": "If a connection is relevant for controlling the train.",
        "returnType": "bool"
      }
    ],
    "properties": [
      {
        "name": "Path",
        "comment": "The route this train should follow.",
        "type": "FRailroadPathSharedPtr"
      },
      {
        "name": "CurrentPathSegment",
        "comment": "Index of the next point along the route.",
        "type": "int32"
      },
      {
        "name": "CurrentConnection",
        "comment": "The next connection up ahead.",
        "type": "TWeakObjectPtr<UFGRailroadTrackConnectionComponent>"
      },
      {
        "name": "CurrentConnectionDistance",
        "type": "float"
      },
      {
        "name": "TargetPoints",
        "comment": "Does not contain a point that is only a pass-through (not relevant).\nIndex 0 may not be the same as NextConnection.",
        "type": "TArray<FTrainAtcPoint>"
      },
      {
        "name": "CurrentSpeed",
        "comment": "Speed and distance indicators.",
        "type": "float"
      },
      {
        "name": "TargetSpeed",
        "type": "float"
      },
      {
        "name": "NextSignalConnection",
        "comment": "A signal in this context is something that announces a change in speed, e.g. a station we should dock to.\nThis is not necessarily the first signal that appears in target points but rather the most restricting for our speed.",
        "type": "TWeakObjectPtr<UFGRailroadTrackConnectionComponent>"
      },
      {
        "name": "NextSignalSpeed",
        "type": "float"
      },
      {
        "name": "NextSignalDistance",
        "type": "float"
      },
      {
        "name": "NextSignalGrade",
        "comment": "[%]",
        "type": "float"
      },
      {
        "name": "NextSignalAspect",
        "type": "ERailroadSignalAspect"
      },
      {
        "name": "CatchAtSignalDistance",
        "comment": "If >= 0 we want to be catched at that distance.",
        "type": "float"
      }
    ]
  },
  {
    "kind": "enum",
    "name": "ESelfDrivingLocomotiveState",
    "comment": "States for self driving locomotives.",
    "entries": [
      {
        "name": "SDLS_Idle"
      },
      {
        "name": "SDLS_FollowPath"
      },
      {
        "name": "SDLS_Docking"
      },
      {
        "name": "SDLS_DockingCompleted"
      }
    ]
  },
  {
    "kind": "class",
    "name": "FTrainSelfDrivingData",
    "category": "USTRUCT",
    "comment": "Realtime data for the ai.",
    "extends": [],
    "methods": [],
    "properties": [
      {
        "name": "State",
        "comment": "The state the ai is in, determines which functions to run.",
        "type": "ESelfDrivingLocomotiveState"
      },
      {
        "name": "NextStop",
        "comment": "Next stop we're aiming for, also look at the current stop in the time table, this is updated from there.",
        "type": "int32"
      },
      {
        "name": "TimeOfLastFindPath",
        "comment": "When did we find this path.",
        "type": "float"
      },
      {
        "name": "LastSpeedControl",
        "comment": "If the last speed was up or down or none.",
        "type": "int8"
      }
    ]
  },
  {
    "kind": "class",
    "name": "FTrainSimulationData",
    "category": "USTRUCT",
    "comment": "The physics simulation data for the trains.",
    "extends": [],
    "methods": [],
    "properties": [
      {
        "name": "IsSimulatingPhysics",
        "comment": "Is this train simulating physics and not just moving along the track.",
        "type": "bool"
      },
      {
        "name": "SimulatedVehicles",
        "comment": "Cached vehicles in the direction of travel.",
        "type": "TArray<classAFGRailroadVehicle*>"
      },
      {
        "name": "SimulatedMovements",
        "comment": "Cached movements in the same order as the vehicles.",
        "type": "TArray<classUFGRailroadVehicleMovementComponent*>"
      },
      {
        "name": "SimulationDirection",
        "comment": "If we're simulating the train front to back (1) or back to front (-1).",
        "type": "float"
      },
      {
        "name": "MasterMovement",
        "comment": "Cached master locomotive.",
        "type": "classUFGLocomotiveMovementComponent*"
      },
      {
        "name": "GravitationalForce",
        "comment": "Real-time measurements from the simulation.",
        "type": "float"
      },
      {
        "name": "TractiveForce",
        "type": "float"
      },
      {
        "name": "GradientForce",
        "type": "float"
      },
      {
        "name": "ResistiveForce",
        "type": "float"
      },
      {
        "name": "BrakingForce",
        "type": "float"
      },
      {
        "name": "Velocity",
        "comment": "Velocity of this train [directional] [cm/s]",
        "type": "float"
      }
    ]
  },
  {
    "kind": "class",
    "name": "AFGTrain",
    "category": "UCLASS",
    "comment": "Simulation, the physics simulation is per train, the cars are just following the first vehicle.\nATC, the automatic train control system",
    "extends": [
      "AActor",
      "IFGSaveInterface",
      "IFGSignificanceInterface"
    ],
    "methods": [
      {
        "name": "AFGTrain"
      },
      {
        "name": "GetLifetimeReplicatedProps",
        "comment": "Begin AActor Interface",
        "returnType": "void"
      },
      {
        "name": "Tick",
        "returnType": "void"
      },
      {
        "name": "BeginPlay",
        "returnType": "void"
      },
      {
        "name": "Destroyed",
        "returnType": "void"
      },
      {
        "name": "EndPlay",
        "returnType": "void"
      },
      {
        "name": "IsLevelBoundsRelevant",
        "returnType": "bool"
      },
      {
        "name": "PreSaveGame_Implementation",
        "comment": "Begin IFGSaveInterface",
        "returnType": "void"
      },
      {
        "name": "PostSaveGame_Implementation",
        "returnType": "void"
      },
      {
        "name": "PreLoadGame_Implementation",
        "returnType": "void"
      },
      {
        "name": "PostLoadGame_Implementation",
        "returnType": "void"
      },
      {
        "name": "GatherDependencies_Implementation",
        "returnType": "void"
      },
      {
        "name": "NeedTransform_Implementation",
        "returnType": "bool"
      },
      {
        "name": "ShouldSave_Implementation",
        "returnType": "bool"
      },
      {
        "name": "TickAtc",
        "comment": "@todotrains Put stat counters in these.",
        "returnType": "void"
      },
      {
        "name": "TickSelfDriving",
        "returnType": "void"
      },
      {
        "name": "GainedSignificance_Implementation",
        "comment": "Begin IFGSignificanceInterface",
        "returnType": "void"
      },
      {
        "name": "LostSignificance_Implementation",
        "returnType": "void"
      },
      {
        "name": "GainedSignificance_Native",
        "returnType": "void"
      },
      {
        "name": "LostSignificance_Native",
        "returnType": "void"
      },
      {
        "name": "GetSignificanceRange",
        "returnType": "float"
      },
      {
        "name": "IsSignificant",
        "comment": "Significance helpers",
        "returnType": "bool"
      },
      {
        "name": "GetSignificanceLocation",
        "returnType": "FVector"
      },
      {
        "name": "GetSignificanceRadius",
        "returnType": "float"
      },
      {
        "name": "GetTrainName",
        "comment": "Get the name of this train.",
        "returnType": "FText"
      },
      {
        "name": "SetTrainName",
        "comment": "Get the name of this train, must be called on server.",
        "returnType": "void"
      },
      {
        "name": "GetTrackGraphID",
        "comment": "Get the track for this train.",
        "returnType": "int32"
      },
      {
        "name": "IsPlayerDriven",
        "comment": "Is this train driven by a player.",
        "returnType": "bool"
      },
      {
        "name": "IsSelfDrivingEnabled",
        "comment": "@return true if the train has the autopilot enabled.",
        "returnType": "bool"
      },
      {
        "name": "SetSelfDrivingEnabled",
        "comment": "Enable/disable the autopilot on a train, does nothing if enabled/disabled twice, must be called server.",
        "returnType": "void"
      },
      {
        "name": "GetSelfDrivingError",
        "comment": "Get the self driving error for this locomotive.",
        "returnType": "ESelfDrivingLocomotiveError"
      },
      {
        "name": "GetMultipleUnitMaster",
        "comment": "@return The master locomotive in the train; nullptr if MU is disabled.",
        "returnType": "classAFGLocomotive*"
      },
      {
        "name": "CanSetMultipleUnitMaster",
        "comment": "@return true if we can set the multiple unit master to be the given locomotive without forcing; false if we cannot.",
        "returnType": "bool"
      },
      {
        "name": "SetMultipleUnitMaster",
        "comment": "@param if true the new master is forced; if false the new master will only be set if MU is disabled (current master is nullptr).\n@return true a new master was set or forced; false if not set.",
        "returnType": "bool"
      },
      {
        "name": "IsInputDisabled",
        "comment": "@return true if input is blocked, e.g. we're docked or self driving is enabled.",
        "returnType": "bool"
      },
      {
        "name": "GetTimeTable",
        "comment": "Get the time table for this train.",
        "returnType": "classAFGRailroadTimeTable*"
      },
      {
        "name": "NewTimeTable",
        "comment": "Create a new time table for this train.",
        "returnType": "classAFGRailroadTimeTable*"
      },
      {
        "name": "HasTimeTable",
        "comment": "If this train has a valid time table.",
        "returnType": "bool"
      },
      {
        "name": "GetFirstVehicle",
        "comment": "Get the first vehicle in the consist.",
        "returnType": "classAFGRailroadVehicle*"
      },
      {
        "name": "GetLastVehicle",
        "comment": "Get the last vehicle in the consist.",
        "returnType": "classAFGRailroadVehicle*"
      },
      {
        "name": "Dock",
        "comment": "Dock this train to the station we're at, must be called on the server.",
        "returnType": "void"
      },
      {
        "name": "GetDockingState",
        "comment": "Get the current status on the docking.",
        "returnType": "ETrainDockingState"
      },
      {
        "name": "IsDocked",
        "comment": "If this train has docked at a station.",
        "returnType": "bool"
      },
      {
        "name": "OnDocked",
        "comment": "Callbacks from the station with regards to docking.",
        "returnType": "void"
      },
      {
        "name": "OnDockingComplete",
        "returnType": "void"
      },
      {
        "name": "OnConsistChanged",
        "comment": "Called when the train consist changes so constants can be recalculated.",
        "returnType": "void"
      },
      {
        "name": "ReportSelfDrivingError",
        "returnType": "void"
      },
      {
        "name": "ClearSelfDrivingError",
        "returnType": "void"
      },
      {
        "name": "FindPath",
        "comment": "Try to find a path for this train, in any direction.",
        "returnType": "bool"
      },
      {
        "name": "SetDockingState",
        "comment": "Called to set the current docking state.",
        "returnType": "void"
      },
      {
        "name": "GotoSelfDrivingState",
        "comment": "Called to toggle state for next tick.",
        "returnType": "void"
      },
      {
        "name": "TickSelfDriving_Idle",
        "comment": "Self driving state handlers.",
        "returnType": "void"
      },
      {
        "name": "TickSelfDriving_FollowPath",
        "returnType": "void"
      },
      {
        "name": "TickSelfDriving_Docking",
        "returnType": "void"
      },
      {
        "name": "TickSelfDriving_DockingCompleted",
        "returnType": "void"
      },
      {
        "name": "CalcBrakeDistance",
        "comment": "Help functions for speed related calculations.",
        "returnType": "float"
      },
      {
        "name": "CalcTargetSpeed",
        "returnType": "float"
      },
      {
        "name": "CalcTargetAcceleration",
        "returnType": "float"
      },
      {
        "name": "CalcTargetDeceleration",
        "returnType": "float"
      },
      {
        "name": "OnRep_DockingState",
        "comment": "On reps",
        "returnType": "void"
      },
      {
        "name": "OnRep_IsSelfDrivingEnabled",
        "returnType": "void"
      }
    ],
    "properties": [
      {
        "name": "mOnSelfDrivingChanged",
        "comment": "Called when the self driving is turn on or off.",
        "type": "FIsSelfDrivingDelegate"
      },
      {
        "name": "mOnDockingStateChanged",
        "comment": "Called when the docking state changes.",
        "type": "FDockingStateDelegate"
      },
      {
        "name": "mConsistData",
        "comment": "Static information about the consist, it changes when rolling stock is added/removed or a container is loaded/unloaded.",
        "type": "FTrainConsist"
      },
      {
        "name": "mAtcData",
        "comment": "Runtime data for the automatic train control. See struct for more info.",
        "type": "FTrainAtcData"
      },
      {
        "name": "mSimulationData",
        "comment": "@todotrains This should be simulated on the client as well without the need for replication.\nPhysics simulation for the train",
        "type": "FTrainSimulationData"
      },
      {
        "name": "mSelfDrivingData",
        "comment": "Runtime data for the self driving AI.",
        "type": "FTrainSelfDrivingData"
      },
      {
        "name": "mTrainName",
        "comment": "The name of this train.",
        "type": "FText"
      },
      {
        "name": "mTrackGraphID",
        "comment": "The track this train is on.",
        "type": "int32"
      },
      {
        "name": "FirstVehicle",
        "comment": "Train are a doubly linked list, use TTrainIterator to iterate over a train.",
        "type": "classAFGRailroadVehicle*"
      },
      {
        "name": "LastVehicle",
        "type": "classAFGRailroadVehicle*"
      },
      {
        "name": "mMultipleUnitMaster",
        "comment": "This is the master locomotives that sends its input (throttle/brake/etc) to all other locomotives in the train.",
        "type": "classAFGLocomotive*"
      },
      {
        "name": "TimeTable",
        "comment": "This trains time table.",
        "type": "classAFGRailroadTimeTable*"
      },
      {
        "name": "mIsSelfDrivingEnabled",
        "comment": "Is this train self driving",
        "type": "bool"
      },
      {
        "name": "mSelfDrivingError",
        "comment": "Error reported by the AI.",
        "type": "ESelfDrivingLocomotiveError"
      },
      {
        "name": "mDockingState",
        "comment": "The status for an ongoing dock, this is not saved, it's updated from the station we're docked to on load.",
        "type": "ETrainDockingState"
      },
      {
        "name": "MaxAirBrakeDeceleration",
        "comment": "How much the brakes decelerate the train. [cm/s^2]",
        "type": "float"
      },
      {
        "name": "mSoundComponent",
        "comment": "Sound component controlling all the moving/idle sounds for the train",
        "type": "classUFGRailroadVehicleSoundComponent*"
      },
      {
        "name": "mIsSignificant",
        "comment": "Significance data",
        "type": "bool"
      },
      {
        "name": "mSignificanceLocation",
        "type": "FVector"
      },
      {
        "name": "mSignificanceRadius",
        "type": "float"
      },
      {
        "name": "mSignificanceRange",
        "type": "float"
      }
    ]
  }
]