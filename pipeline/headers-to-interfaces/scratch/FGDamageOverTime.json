[
  {
    "kind": "class",
    "name": "UFGDamageOverTime",
    "category": "UCLASS",
    "comment": "Shareable info about damage over time",
    "extends": [
      "UObject"
    ],
    "methods": [
      {
        "name": "UFGDamageOverTime",
        "comment": "ctor"
      },
      {
        "name": "GetDamageInterval",
        "comment": "Returns the the damage interval of the dot\n@return -1 if dotClass is nullptr",
        "returnType": "float"
      },
      {
        "name": "GetDamageAmount",
        "comment": "Returns how much damage the dot does every interval\n@return The damage to take; no damage if dotClass is nullptr.",
        "returnType": "float"
      },
      {
        "name": "GetDamageClass",
        "comment": "Returns the damage type of the dot-class\n@return nullptr if dotClass is nullptr",
        "returnType": "TSubclassOf<classUFGDamageType>"
      },
      {
        "name": "ShouldBeAppliedToActor",
        "comment": "Returns true if this dot-class should be applied to the actor\n@return false if dotClass or actor is nullptr",
        "returnType": "bool"
      },
      {
        "name": "GetDamageInterval",
        "comment": "Accessors",
        "returnType": "float"
      },
      {
        "name": "GetDamageAmount",
        "returnType": "float"
      },
      {
        "name": "GetDamageClass",
        "returnType": "TSubclassOf<classUFGDamageType>"
      },
      {
        "name": "ShouldBeAppliedToActor",
        "comment": "\n @param actor - the actor we want to check if we want to apply the damage over time on\n@return false if actor is nullptr",
        "returnType": "bool"
      }
    ],
    "properties": [
      {
        "name": "mDamageInterval",
        "comment": "How often should we damage actors inside of this cloud (in seconds)",
        "type": "float"
      },
      {
        "name": "mDamageAmount",
        "comment": "How much damage should the actor take each time it receives damage",
        "type": "float"
      },
      {
        "name": "mDamageClass",
        "comment": "What type of damage should we give the character",
        "type": "TSubclassOf<classUFGDamageType>"
      },
      {
        "name": "mActorFilter",
        "comment": "Only deal damage to subclasses of these actor classes",
        "type": "TArray<TSubclassOf<classAActor>>"
      }
    ]
  }
]