[
  {
    "kind": "class",
    "name": "FDebrisMesh",
    "category": "USTRUCT",
    "comment": "Debris meshes that can be spawned and how many.",
    "extends": [],
    "methods": [
      {
        "name": "FDebrisMesh"
      }
    ],
    "properties": [
      {
        "name": "Mesh",
        "comment": "Mesh to spawn.",
        "type": "classUStaticMesh*"
      },
      {
        "name": "Num",
        "comment": "How many to spawn, note that the upper limit is guaranteed while the lower limit is not.",
        "type": "FInt32Interval"
      }
    ]
  },
  {
    "kind": "class",
    "name": "FDebrisActor",
    "category": "USTRUCT",
    "comment": "Debris actors that can be spawned and how many.",
    "extends": [],
    "methods": [
      {
        "name": "FDebrisActor"
      }
    ],
    "properties": [
      {
        "name": "ActorClass",
        "comment": "Mesh to spawn.",
        "type": "TSubclassOf<AActor>"
      },
      {
        "name": "Num",
        "comment": "How many to spawn, note that the upper limit is guaranteed while the lower limit is not.",
        "type": "FInt32Interval"
      }
    ]
  },
  {
    "kind": "class",
    "name": "FDebrisItemDrop",
    "category": "USTRUCT",
    "comment": "Item drops that can be spawned and how many.",
    "extends": [],
    "methods": [
      {
        "name": "FDebrisItemDrop"
      },
      {
        "name": "GetItemClass",
        "comment": "Get the item class of this item drop",
        "returnType": "TSubclassOf<classUFGItemDescriptor>"
      },
      {
        "name": "IsValid",
        "comment": "If the items descriptor is cooked away, this is not valid",
        "returnType": "bool"
      }
    ],
    "properties": [
      {
        "name": "NumItems",
        "comment": "How many items to spawn, note that the upper limit is guaranteed while the lower limit is not.",
        "type": "FInt32Interval"
      },
      {
        "name": "ItemClass",
        "comment": "Item to create pickup for.",
        "type": "TSoftClassPtr<classUFGItemDescriptor>"
      }
    ]
  },
  {
    "kind": "class",
    "name": "FSimulatedMeshTransform",
    "category": "USTRUCT",
    "comment": "Struct containing the saved simulation for meshes.",
    "extends": [],
    "methods": [
      {
        "name": "FSimulatedMeshTransform"
      },
      {
        "name": "FSimulatedMeshTransform"
      }
    ],
    "properties": [
      {
        "name": "StaticMesh",
        "type": "classUStaticMesh*"
      },
      {
        "name": "MeshTransform",
        "type": "FTransform"
      }
    ]
  },
  {
    "kind": "class",
    "name": "FSimulatedActorTransform",
    "category": "USTRUCT",
    "comment": "Struct containing the saved simulation for actors.",
    "extends": [],
    "methods": [
      {
        "name": "FSimulatedActorTransform"
      },
      {
        "name": "FSimulatedActorTransform"
      }
    ],
    "properties": [
      {
        "name": "ActorClass",
        "type": "TSubclassOf<AFGCrashSiteDebrisActor>"
      },
      {
        "name": "ActorTransform",
        "type": "FTransform"
      }
    ]
  },
  {
    "kind": "class",
    "name": "FSimulatedItemDropTransform",
    "category": "USTRUCT",
    "comment": "Struct containing the saved simulation for actors.",
    "extends": [],
    "methods": [
      {
        "name": "FSimulatedItemDropTransform"
      }
    ],
    "properties": [
      {
        "name": "ItemDropTransform",
        "type": "FTransform"
      }
    ]
  },
  {
    "kind": "class",
    "name": "AFGCrashSiteDebris",
    "category": "UCLASS",
    "comment": "Actor for spawning debris around a crash site.",
    "extends": [
      "AActor"
    ],
    "methods": [
      {
        "name": "AFGCrashSiteDebris"
      },
      {
        "name": "~AFGCrashSiteDebris"
      },
      {
        "name": "OnConstruction",
        "returnType": "void"
      },
      {
        "name": "BeginPlay",
        "returnType": "void"
      },
      {
        "name": "Tick",
        "returnType": "void"
      },
      {
        "name": "PostEditChangeChainProperty",
        "returnType": "void"
      },
      {
        "name": "OnPreBeginPIE",
        "returnType": "void"
      },
      {
        "name": "OnEndPIE",
        "returnType": "void"
      },
      {
        "name": "SpawnSimulation",
        "returnType": "void"
      },
      {
        "name": "ResetSavedSimulation",
        "returnType": "void"
      },
      {
        "name": "DestroySavedSimulation",
        "returnType": "void"
      },
      {
        "name": "SpawnSavedSimulation",
        "returnType": "void"
      }
    ],
    "properties": [
      {
        "name": "mDebrisMeshes",
        "comment": "Description of which meshes to spawn.",
        "type": "TArray<FDebrisMesh>"
      },
      {
        "name": "mDebrisActors",
        "comment": "Description of which actors to spawn.",
        "type": "TArray<FDebrisActor>"
      },
      {
        "name": "mItemDrops",
        "comment": "Description of which parts to spawn.",
        "type": "TArray<FDebrisItemDrop>"
      },
      {
        "name": "mNumItemDrops",
        "comment": "How many item drops to place, debris must be resimulated when this is updated.",
        "type": "int32"
      },
      {
        "name": "mSpawnAltitude",
        "comment": "How far up to spawn the debris.",
        "type": "float"
      },
      {
        "name": "mSpawnRadiusMultiplier",
        "comment": "If we want the debris to spread a bit more.",
        "type": "float"
      },
      {
        "name": "mDebrisPenetrateGroundByPercentage",
        "comment": "How much the parts should penetrate the ground.",
        "type": "float"
      },
      {
        "name": "mDespawnRadius",
        "comment": "Maximum distance from the center debris can end up, debris outside this radius is destroyed.",
        "type": "float"
      },
      {
        "name": "mRegenerateDebrisNextSimulation",
        "comment": "If true debris will be respawned next simulation.",
        "type": "bool"
      },
      {
        "name": "mIsSIEActor",
        "comment": "true if we currently run a simulation on this actor.",
        "type": "bool"
      },
      {
        "name": "mHasSIEEnded",
        "comment": "true if simulate in editor has ended.",
        "type": "bool"
      },
      {
        "name": "mHasUnsavedSimulation",
        "comment": "true if we have unsaved simulation changes, UPROPERTY so value will be copied from the SIE actor.",
        "type": "bool"
      },
      {
        "name": "mSimulatedDebrisActors",
        "comment": "Keep track of active simulation spawned actors.\nCannot be UPROPERTY as it crashes on keep simulation changes.",
        "type": "TArray<TWeakObjectPtr<AActor>>"
      },
      {
        "name": "mSavedSimulatedDebrisActors",
        "comment": "Actors spawned by this crash site.",
        "type": "TArray<AActor*>"
      },
      {
        "name": "mSavedSimulatedItemDropActors",
        "type": "TArray<AActor*>"
      },
      {
        "name": "mSavedMeshSimulationData",
        "comment": "Transforms saved during physics simulation.",
        "type": "TArray<FSimulatedMeshTransform>"
      },
      {
        "name": "mSavedActorSimulationData",
        "type": "TArray<FSimulatedActorTransform>"
      },
      {
        "name": "mSavedItemDropSimulationData",
        "type": "TArray<FSimulatedItemDropTransform>"
      }
    ]
  }
]