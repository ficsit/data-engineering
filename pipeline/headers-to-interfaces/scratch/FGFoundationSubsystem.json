[
  {
    "kind": "class",
    "name": "FBuilding",
    "category": "USTRUCT",
    "comment": "Copyright 2016 Coffee Stain Studios. All Rights Reserved.",
    "extends": [],
    "methods": [],
    "properties": [
      {
        "name": "Buildables",
        "comment": "Which buildables belong to this building.",
        "type": "TArray<classAFGBuildable*>"
      }
    ]
  },
  {
    "kind": "class",
    "name": "AFGFoundationSubsystem",
    "category": "UCLASS",
    "comment": "Class keeping track of which buildables that for a building.",
    "extends": [
      "AFGSubsystem",
      "IFGSaveInterface"
    ],
    "methods": [
      {
        "name": "Serialize",
        "comment": "Begin AActor interface",
        "returnType": "void"
      },
      {
        "name": "DisplayDebug",
        "returnType": "void"
      },
      {
        "name": "PreSaveGame_Implementation",
        "comment": "Begin IFGSaveInterface",
        "returnType": "void"
      },
      {
        "name": "PostSaveGame_Implementation",
        "returnType": "void"
      },
      {
        "name": "PreLoadGame_Implementation",
        "returnType": "void"
      },
      {
        "name": "PostLoadGame_Implementation",
        "returnType": "void"
      },
      {
        "name": "GatherDependencies_Implementation",
        "returnType": "void"
      },
      {
        "name": "NeedTransform_Implementation",
        "returnType": "bool"
      },
      {
        "name": "ShouldSave_Implementation",
        "returnType": "bool"
      },
      {
        "name": "Get",
        "comment": "Get the foundation subsystem, this should always return something unless you call it really early.",
        "returnType": "AFGFoundationSubsystem*"
      },
      {
        "name": "AddBuildable",
        "comment": "@param buildable - A valid buildable, this is where we get the foundation id from.\n@param isNewBuilding - Set this to allow the subsystem to generate and set a building ID.",
        "returnType": "void"
      },
      {
        "name": "RemoveBuildable",
        "comment": "Remove the buildable from a building, i.e. dismantled.\n@param buildable - A valid buildable, this is where we get the foundation id from.",
        "returnType": "void"
      },
      {
        "name": "GetTypedBuildable",
        "comment": "Get all buildables of the type in the given building.",
        "returnType": "void"
      },
      {
        "name": "GenerateUniqueBuildingID",
        "comment": "Generates a new UID.",
        "returnType": "int32"
      }
    ],
    "properties": [
      {
        "name": "mIDCounter",
        "comment": "Counter for generating new UIDs.",
        "type": "int32"
      },
      {
        "name": "mBuildings",
        "comment": "All the buildings in the game, map with foundation ID and the building struct.",
        "type": "TMap<int32,FBuilding>"
      }
    ]
  }
]