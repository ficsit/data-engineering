[
  {
    "kind": "class",
    "name": "UFGUseState",
    "category": "UCLASS",
    "extends": [
      "UObject"
    ],
    "methods": [
      {
        "name": "WantsAdditonalData",
        "comment": "Returns if we should allocate a instance of the state",
        "returnType": "bool"
      },
      {
        "name": "IsUsableState",
        "comment": "True if the state is usable",
        "returnType": "bool"
      },
      {
        "name": "CanUseInState",
        "comment": "Helper function to see if we can use the object in this state",
        "returnType": "bool"
      }
    ],
    "properties": [
      {
        "name": "mWantAdditonalData",
        "comment": "If true, we will allocate a instance of the state, so we can store information in the state",
        "type": "bool"
      },
      {
        "name": "mIsUsableState",
        "comment": "If true, we will allocate a instance of the state, so we can store information in the state",
        "type": "bool"
      }
    ]
  },
  {
    "kind": "class",
    "name": "UFGUseState_Valid",
    "category": "UCLASS",
    "comment": "Default valid state for things to use whenever things just works as they should",
    "extends": [
      "UFGUseState"
    ],
    "methods": [
      {
        "name": "UFGUseState_Valid"
      }
    ],
    "properties": []
  },
  {
    "kind": "class",
    "name": "FUseState",
    "category": "USTRUCT",
    "comment": "Describes a state of a useable object for the player that tries to use it",
    "extends": [],
    "methods": [
      {
        "name": "SetUseState",
        "comment": "Update the use state to a new use state, and allocates additional data if needed",
        "returnType": "void"
      },
      {
        "name": "GetState",
        "returnType": "TSubclassOf<UFGUseState>"
      }
    ],
    "properties": [
      {
        "name": "AdditionalData",
        "comment": "Additional data that might be heavy to calculate several times the same frame, the reason it's cached here and not in the object, is that several players might want to cache different things",
        "type": "classUFGUseState*"
      },
      {
        "name": "UseLocation",
        "comment": "Location of where the use happens",
        "type": "FVector"
      },
      {
        "name": "UseComponent",
        "comment": "Component that triggered the use",
        "type": "UPrimitiveComponent*"
      },
      {
        "name": "State",
        "comment": "Contains the usable state of the object, might be a error code",
        "type": "TSubclassOf<UFGUseState>"
      }
    ]
  },
  {
    "kind": "class",
    "name": "UFGUseableInterface",
    "category": "UINTERFACE",
    "comment": "For blueprint support of the interface, we will never add anything to it, just use it to\nhave a UCLASS to be able to access",
    "extends": [
      "UInterface"
    ],
    "methods": [],
    "properties": []
  },
  {
    "kind": "class",
    "name": "IFGUseableInterface",
    "comment": "@brief Interface for all useable classes out there",
    "extends": [],
    "methods": [
      {
        "name": "UpdateUseState",
        "comment": "@param componentHit\tThe component that the trace hit when looking at the object\n",
        "returnType": "void"
      },
      {
        "name": "OnUse",
        "comment": "\n @param byCharacter\tCharacter that uses the object.\n@param state\t\t\tThe state that describes how the object reacts to interaction",
        "returnType": "void"
      },
      {
        "name": "OnUseStop",
        "comment": "\n @param byCharacter\tCharacter that uses the object.\n@param state\t\t\tThe state that describes how the object reacts to interaction",
        "returnType": "void"
      },
      {
        "name": "IsUseable",
        "comment": "\n @return\ttrue if this object is in a useable state",
        "returnType": "bool"
      },
      {
        "name": "StartIsLookedAt",
        "comment": "Called on by the interface if we are looking at something that's useable",
        "returnType": "void"
      },
      {
        "name": "StopIsLookedAt",
        "comment": "Called when we stop looking at the item",
        "returnType": "void"
      },
      {
        "name": "GetLookAtDecription",
        "comment": "\n @param byCharacter\tCharacter that uses the object.\n@param state\t\t\tThe state that describes how the object reacts to interaction",
        "returnType": "FText"
      },
      {
        "name": "RegisterInteractingPlayer",
        "comment": "Called from widgets that are opened by the use functionality",
        "returnType": "void"
      },
      {
        "name": "UnregisterInteractingPlayer",
        "comment": "Called from widgets that are opened by the use functionality",
        "returnType": "void"
      }
    ],
    "properties": []
  }
]