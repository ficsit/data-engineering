[
  {
    "kind": "class",
    "name": "UFGCharacterAnimInstance",
    "category": "UCLASS",
    "comment": "Common base class for player and enemies so we can add functionality for hit animations and such",
    "extends": [
      "UAnimInstance"
    ],
    "methods": [
      {
        "name": "UFGCharacterAnimInstance",
        "comment": "Constructor"
      },
      {
        "name": "NativeUpdateAnimation",
        "comment": "Caching stuff",
        "returnType": "void"
      },
      {
        "name": "OnPointDamageTaken",
        "comment": "Our pawn has taken point damage",
        "returnType": "void"
      },
      {
        "name": "OnAnyDamageTaken",
        "comment": "Our pawn has taken any damage",
        "returnType": "void"
      },
      {
        "name": "OnRadialDamageTaken",
        "comment": "Our pawn has taken radial damage",
        "returnType": "void"
      },
      {
        "name": "GetDesiredWalkRotation",
        "comment": "Return desired character rotation based on floor",
        "returnType": "FRotator"
      },
      {
        "name": "GetDesiredRunLeanRotation",
        "comment": "Return desired character rotation based on floor",
        "returnType": "FRotator"
      },
      {
        "name": "GetCachedCharacter",
        "comment": "cached character of this animation",
        "returnType": "AFGCharacterBase*"
      },
      {
        "name": "GetVelocity",
        "comment": "Returns velocity",
        "returnType": "FVector"
      },
      {
        "name": "GetVelocityDirection",
        "comment": "Returns velocitys direction in degrees",
        "returnType": "float"
      },
      {
        "name": "GetAccelerationVectorLength",
        "comment": "Returns velocitys direction in degrees",
        "returnType": "float"
      },
      {
        "name": "TurnInPlaceEvent",
        "comment": "Event fired when creature turns in place",
        "returnType": "void"
      },
      {
        "name": "GetCharacterVelocity",
        "comment": "Gets velocity of the character",
        "returnType": "FVector"
      }
    ],
    "properties": [
      {
        "name": "mDirection",
        "comment": "in degrees",
        "type": "float"
      },
      {
        "name": "mAccelerationVectorLength",
        "comment": "acceleration length normalized",
        "type": "float"
      },
      {
        "name": "mVelocity",
        "comment": "Velocity",
        "type": "FVector"
      },
      {
        "name": "mVelocityLocalNormalized",
        "comment": "Velocity normalized in local space",
        "type": "FVector"
      },
      {
        "name": "mAccelerationLocalNormalized",
        "comment": "Acceleration normalized in local space",
        "type": "FVector"
      },
      {
        "name": "mActorTransform",
        "comment": "Velocity normalized in local space",
        "type": "FTransform"
      },
      {
        "name": "mCachedCharacter",
        "comment": "Caching the character one",
        "type": "AFGCharacterBase*"
      },
      {
        "name": "mCachedMovementMode",
        "comment": "Caching movement mode",
        "type": "TEnumAsByte<EMovementMode>"
      },
      {
        "name": "mCachedDefaultWalkMode",
        "comment": "Cached default value of movement mode",
        "type": "TEnumAsByte<EMovementMode>"
      },
      {
        "name": "mSpeed",
        "comment": "Speed in movement",
        "type": "float"
      },
      {
        "name": "mSpeedLastFrame",
        "comment": "Saved speed from last time we checked",
        "type": "float"
      },
      {
        "name": "mSpeedZ",
        "comment": "Speed in movement Z",
        "type": "float"
      },
      {
        "name": "mWalkRotation",
        "comment": "Walk rotation",
        "type": "float"
      },
      {
        "name": "mIsStandingStill",
        "comment": "Are we standing still",
        "type": "bool"
      },
      {
        "name": "mIsAccelerating",
        "comment": "Did we begin movement",
        "type": "bool"
      },
      {
        "name": "mYawDelta",
        "comment": "Used for lean/run calculations",
        "type": "float"
      },
      {
        "name": "mAimYaw",
        "comment": "Where do we want to aim",
        "type": "float"
      },
      {
        "name": "mAimYawInterpSpeed",
        "comment": "Configable interpspeed",
        "type": "float"
      },
      {
        "name": "mRootRotation",
        "comment": "Rotation of root component",
        "type": "FRotator"
      },
      {
        "name": "mTurnInPlaceLeft",
        "comment": "should we turn left",
        "type": "bool"
      },
      {
        "name": "mTurnInPlaceRight",
        "comment": "or right",
        "type": "bool"
      },
      {
        "name": "mTurnInPlaceComplete",
        "comment": "are we done turning?",
        "type": "bool"
      },
      {
        "name": "mTurnLeftCurve",
        "comment": "Rotation values when turning left",
        "type": "UCurveFloat*"
      },
      {
        "name": "mTurnRightCurve",
        "comment": "Rotation values when turning right",
        "type": "UCurveFloat*"
      },
      {
        "name": "mActorRotationForwardVector",
        "comment": "I don't even know anymore, converting BP stuff",
        "type": "FVector"
      },
      {
        "name": "mActorRotationForwardVectorReference",
        "comment": "I don't even know anymore, converting BP stuff",
        "type": "FVector"
      },
      {
        "name": "mAimYawReductionStartTime",
        "comment": "I don't even know anymore, converting BP stuff",
        "type": "float"
      },
      {
        "name": "mAimYawReductionCurrentTime",
        "comment": "I don't even know anymore, converting BP stuff",
        "type": "float"
      },
      {
        "name": "mActorRotationLastTick",
        "comment": "Last Rotation saved",
        "type": "FRotator"
      },
      {
        "name": "mYawRotationStrength",
        "comment": "Editable for Bigges sake",
        "type": "float"
      },
      {
        "name": "mYawRotationInterpSpeed",
        "comment": "Editable for Bigges sake",
        "type": "float"
      },
      {
        "name": "mRootRotationInterpSpeed",
        "comment": "Configable interp speed for root rotation",
        "type": "float"
      },
      {
        "name": "mAllowedToTurn",
        "comment": "reset variable for turn stuff",
        "type": "bool"
      },
      {
        "name": "mTurnInPlaceTimer",
        "comment": "Time we started a turninplace",
        "type": "float"
      },
      {
        "name": "mTurnInPlaceDefaultTime",
        "comment": "How long the turn should take",
        "type": "float"
      },
      {
        "name": "mUseTurnInPlace",
        "comment": "should we run the turn in place code",
        "type": "bool"
      },
      {
        "name": "mCanUpdateActorRotationReference",
        "comment": "should we run the turn in place code",
        "type": "bool"
      },
      {
        "name": "mYawAimMaxValue",
        "comment": "When should we turn to the right",
        "type": "float"
      },
      {
        "name": "mYawAimMinValue",
        "comment": "when should we turn to the left",
        "type": "float"
      },
      {
        "name": "mAimPitch",
        "comment": "Look up",
        "type": "float"
      },
      {
        "name": "mAimPitchInterpSpeed",
        "comment": "Interpspeed",
        "type": "float"
      },
      {
        "name": "mGetDeltaPitchRotation",
        "comment": "Used in the 1p anim of the player only",
        "type": "bool"
      },
      {
        "name": "mUsePreLand",
        "comment": "Should we do pre land calculations?",
        "type": "bool"
      },
      {
        "name": "mPreLand",
        "comment": "Pre land value",
        "type": "bool"
      },
      {
        "name": "mPreLandVelocityMultiplier",
        "comment": "Multiplier for velocity that determines how long the preland trace is",
        "type": "float"
      },
      {
        "name": "mPreLandCollisionChannels",
        "comment": "What to collide against in pre land",
        "type": "TArray<TEnumAsByte<ECollisionChannel>>"
      }
    ]
  }
]