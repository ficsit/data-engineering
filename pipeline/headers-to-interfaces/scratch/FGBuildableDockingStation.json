[
  {
    "kind": "class",
    "name": "AFGBuildableDockingStation",
    "category": "UCLASS",
    "comment": "Base class for docking stations in the game, this is a load/unload station depending on the conveyor connections given.",
    "extends": [
      "AFGBuildableFactory"
    ],
    "methods": [
      {
        "name": "AFGBuildableDockingStation"
      },
      {
        "name": "GetLifetimeReplicatedProps",
        "comment": "Begin AActor interface",
        "returnType": "void"
      },
      {
        "name": "PreReplication",
        "returnType": "void"
      },
      {
        "name": "BeginPlay",
        "returnType": "void"
      },
      {
        "name": "Destroyed",
        "returnType": "void"
      },
      {
        "name": "GetReplicationDetailActorClass",
        "comment": "Begin IFGReplicationDetailActorOwnerInterface",
        "returnType": "UClass*"
      },
      {
        "name": "GetFuelInventory",
        "comment": "@return a valid pointer to the fuel inventory",
        "returnType": "classUFGInventoryComponent*"
      },
      {
        "name": "GetInventory",
        "comment": "Get the inventory the docked vehicle loads/unloads to",
        "returnType": "classUFGInventoryComponent*"
      },
      {
        "name": "GetDockedActor",
        "comment": "Get the docked actor if any.",
        "returnType": "classAActor*"
      },
      {
        "name": "Dock",
        "comment": "Dock an actor to this docking station.",
        "returnType": "bool"
      },
      {
        "name": "Undock",
        "comment": "Undock the docked actor.",
        "returnType": "void"
      },
      {
        "name": "SetIsInLoadMode",
        "comment": "Set whether this station should load or unload from vehicles",
        "returnType": "void"
      },
      {
        "name": "GetIsInLoadMode",
        "comment": "Get whether this station should load or unload from vehicles",
        "returnType": "bool"
      },
      {
        "name": "IsLoadUnloading",
        "comment": "Get whether this station is currently loading or unloading from vehicles",
        "returnType": "bool"
      },
      {
        "name": "OnTransferComplete",
        "comment": "Notify for when unload and/or load transfers are completed",
        "returnType": "void"
      },
      {
        "name": "OnBeginUnloadVehicle",
        "comment": "Called when we start unloading the vehicle",
        "returnType": "void"
      },
      {
        "name": "OnBeginLoadVehicle",
        "comment": "Called when we start loading the vehicle",
        "returnType": "void"
      },
      {
        "name": "Factory_Tick",
        "comment": "Begin Factory_ interface",
        "returnType": "void"
      },
      {
        "name": "Factory_TickProducing",
        "returnType": "void"
      },
      {
        "name": "Factory_CollectInput_Implementation",
        "returnType": "void"
      },
      {
        "name": "CanProduce_Implementation",
        "comment": "Begin AFGBuildableFactory interface",
        "returnType": "bool"
      },
      {
        "name": "OnRep_ReplicationDetailActor",
        "comment": "End AFGBuildableFactory interface",
        "returnType": "void"
      },
      {
        "name": "GetCastRepDetailsActor",
        "returnType": "classAFGReplicationDetailActor_DockingStation*"
      },
      {
        "name": "OnRep_FuelInventory",
        "comment": "Set up the fuel inventory when replicated",
        "returnType": "void"
      },
      {
        "name": "IsValidFuel",
        "comment": "\n @param resource - Resource class to check.\n@return - true if resource valid as fuel; false if not valid or if generator does not run on fuel.",
        "returnType": "bool"
      },
      {
        "name": "FilterFuelClasses",
        "comment": "Filter out what we consider as fuel for our fuel inventory.\n@see IsValidFuel",
        "returnType": "bool"
      },
      {
        "name": "GetFirstIndexWithItem",
        "comment": "Returns the first slot index that has any items on it\nIf nothing exists in inventory -1 is returned",
        "returnType": "int32"
      },
      {
        "name": "Factory_LoadFuel",
        "comment": "Loads fuel into the docked vehicles inventory.\n@return true if we are done refueling (i.e. vehicle fuel inventory is full or we have no fuel to transfer)",
        "returnType": "bool"
      },
      {
        "name": "Factory_LoadDockedInventory",
        "comment": "Unloads one slot from the station to the docked inventory.",
        "returnType": "void"
      },
      {
        "name": "Factory_UnloadDockedInventory",
        "comment": "Unloads one slot from the docked inventory to the station.",
        "returnType": "void"
      },
      {
        "name": "LoadUnloadVehicleComplete",
        "comment": "Done loading or unloading vehicle",
        "returnType": "void"
      }
    ],
    "properties": [
      {
        "name": "sFuelTag",
        "comment": "All connection components tagged with this is considered fuel components",
        "type": "staticFName"
      },
      {
        "name": "mStorageSizeX",
        "comment": "SizeX of storage inventory",
        "type": "int8"
      },
      {
        "name": "mStorageSizeY",
        "comment": "SizeY of storage inventory",
        "type": "int8"
      },
      {
        "name": "mTransferSpeed",
        "comment": "How long time it takes to transfer one stack of item from/to docking station ( in seconds )",
        "type": "float"
      },
      {
        "name": "mFuelTransferSpeed",
        "comment": "How long time it takes to transfer 1 stack of fuel from/to docking station ( in seconds )",
        "type": "float"
      },
      {
        "name": "mTransferProgress",
        "comment": "Current progress on transfer from/to docking station ( in seconds )",
        "type": "float"
      },
      {
        "name": "mFuelInventoryHandler",
        "type": "classUFGReplicationDetailInventoryComponent*"
      },
      {
        "name": "mInventoryHandler",
        "type": "classUFGReplicationDetailInventoryComponent*"
      },
      {
        "name": "mFuelConnections",
        "comment": "All connections that can pull in fuel to the docking station, (References hold by Components array, no need for UPROPERTY)",
        "type": "TArray<classUFGFactoryConnectionComponent*>"
      },
      {
        "name": "mStorageInputConnections",
        "comment": "All connections that can pull to data to our storage, (References hold by Components array, no need for UPROPERTY)",
        "type": "TArray<classUFGFactoryConnectionComponent*>"
      },
      {
        "name": "mDockedActor",
        "comment": "The actor docked to this station.",
        "type": "classAActor*"
      },
      {
        "name": "mHasDockedActor",
        "comment": "If an actor is docked to this station. Used to detect actor becomes invalid due to e.g. dismantle.",
        "type": "uint8"
      },
      {
        "name": "mIsInLoadMode",
        "comment": "Have the player specified that this station should either load or unload to vehicles?",
        "type": "bool"
      },
      {
        "name": "mStackTransferSize",
        "comment": "How much of a stack to transfer in each separate transfer moment",
        "type": "float"
      },
      {
        "name": "mIsLoadUnloading",
        "comment": "Are we currently in the process of loading or unloading inventory",
        "type": "bool"
      },
      {
        "name": "mInventory",
        "comment": "Inventory where we transfer items to when unloading from a vehicle",
        "type": "classUFGInventoryComponent*"
      },
      {
        "name": "mFuelInventory",
        "comment": "Inventory for refueling the trucks.",
        "type": "classUFGInventoryComponent*"
      }
    ]
  }
]