[
  {
    "kind": "class",
    "name": "UFGSplineComponent",
    "category": "UCLASS",
    "comment": "\n @note Only use the provided AddSplinePointFromData, RemoveSplinePointData and ClearSplinePointsData to add/remove points.",
    "extends": [
      "USplineComponent"
    ],
    "methods": [
      {
        "name": "UFGSplineComponent",
        "comment": "Ctor"
      },
      {
        "name": "SetOverrideMaterial",
        "comment": "Set the override material to use on the spline meshes, otherwise the default is used.",
        "returnType": "void"
      },
      {
        "name": "UpdateSplineMeshes",
        "comment": "Update the spline meshes to fit on the spline.",
        "returnType": "void"
      },
      {
        "name": "DrawDebugSpline",
        "comment": "Draw the spline using debug lines.",
        "returnType": "void"
      },
      {
        "name": "GetNumberOfMeshes",
        "comment": "Get the number of segments this spline is made up of.",
        "returnType": "int32"
      },
      {
        "name": "GetMesh",
        "comment": "@return The mesh at index; returns nullptr if this is instanced.",
        "returnType": "classUSplineMeshComponent*"
      },
      {
        "name": "GetInstancedMesh",
        "comment": "@return The instanced mesh at index; returns nullptr if this is not instanced.",
        "returnType": "classUFGInstancedSplineMeshComponent*"
      },
      {
        "name": "SetVectorParameterOnInstancedMeshMaterials",
        "comment": "Gives you the meshes in this spline",
        "returnType": "void"
      },
      {
        "name": "UseInstancing",
        "comment": "@return true if this spline uses instanced spline meshes.",
        "returnType": "bool"
      },
      {
        "name": "SetUseInstancing",
        "comment": "If we should try to use instancing or not when using spline meshes",
        "returnType": "void"
      },
      {
        "name": "SetAdditionalCustomDepthPass",
        "comment": "If we set this to true, then we render our spline in a addition pass with custom depth",
        "returnType": "void"
      },
      {
        "name": "GetNumberOfCollisionShapes",
        "returnType": "int32"
      },
      {
        "name": "GetCollisionShapeAt",
        "returnType": "classUShapeComponent*"
      },
      {
        "name": "GenerateCollisionIdx",
        "comment": "Generate the box corresponding to collision index idx",
        "returnType": "void"
      },
      {
        "name": "IsSegmentStraight",
        "comment": "Check if a segment is a bend or straight (in 2D).\n@return true if straight; false if bend.",
        "returnType": "bool"
      },
      {
        "name": "GenerateSplineCollisions",
        "comment": "Place box collisions along the spline.",
        "returnType": "void"
      },
      {
        "name": "CreateInstancedSplineMeshComponent",
        "comment": "Create a basic setup of a UFGInstancedSplineMeshComponent that's shared between custom depth mesh and normal mesh",
        "returnType": "classUFGInstancedSplineMeshComponent*"
      },
      {
        "name": "CreateSplineMeshComponent",
        "comment": "Create a basic setup of a spline mesh component that's shared between custom depth mesh and normal mesh",
        "returnType": "classUSplineMeshComponent*"
      }
    ],
    "properties": [
      {
        "name": "mSplineMesh",
        "comment": "The mesh to repeat on curved sections.",
        "type": "classUStaticMesh*"
      },
      {
        "name": "mSplineMeshLength",
        "comment": "The size of each spline mesh.",
        "type": "float"
      },
      {
        "name": "mGenerateCollisions",
        "comment": "Spacing between the collision components.",
        "type": "bool"
      },
      {
        "name": "mCollisionSpacing",
        "comment": "Spacing between the collision components.",
        "type": "float"
      },
      {
        "name": "mCollisionExtent",
        "comment": "Extent of the collision components. X is forward.",
        "type": "FVector"
      },
      {
        "name": "mCollisionOffset",
        "comment": "Offset of the collision components. X is forward.",
        "type": "FVector"
      },
      {
        "name": "mOverrideMaterial",
        "comment": "The cached material, we cache this as the number of meshes grow/shrink as we drag the conveyor belt.",
        "type": "classUMaterialInterface*"
      },
      {
        "name": "mUseInstancing",
        "comment": "Whether to use instancing or not.",
        "type": "bool"
      },
      {
        "name": "mAdditionalCustomDepthPass",
        "comment": "If true, then we will render custom depth but not in main pass",
        "type": "bool"
      },
      {
        "name": "mSplineMeshComponents",
        "comment": "The meshes that make up the spline.",
        "type": "TArray<classUSplineMeshComponent*>"
      },
      {
        "name": "mCustomDepthSplineMeshComponents",
        "comment": "If we have enabled custom depth pass, then we store the custom depth spline meshes here",
        "type": "TArray<classUSplineMeshComponent*>"
      },
      {
        "name": "mSplineMeshInstances",
        "comment": "The meshes that make up the spline when instanced.",
        "type": "classUFGInstancedSplineMeshComponent*"
      },
      {
        "name": "mCustomDepthSplineMeshInstances",
        "comment": "If we have enabled custom depth pass, this will be non-null",
        "type": "classUFGInstancedSplineMeshComponent*"
      },
      {
        "name": "mSplineCollisionComponents",
        "comment": "The collisions that make up the spline.",
        "type": "TArray<classUShapeComponent*>"
      }
    ]
  }
]