[
  {
    "kind": "class",
    "name": "FFootstepEffect",
    "category": "USTRUCT",
    "comment": "Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.",
    "extends": [],
    "methods": [
      {
        "name": "Reset",
        "comment": "Remove all events from this effect",
        "returnType": "void"
      }
    ],
    "properties": [
      {
        "name": "Particle",
        "comment": "The particle to use when hitting the ground",
        "type": "classUParticleSystem*"
      },
      {
        "name": "GroundDecals",
        "comment": "The decal to place on the ground when walking around",
        "type": "TArray<classUMaterialInterface*>"
      }
    ]
  },
  {
    "kind": "class",
    "name": "FFootstepEffectSurface",
    "category": "USTRUCT",
    "extends": [],
    "methods": [],
    "properties": [
      {
        "name": "Surface",
        "comment": "The surface the foot hit",
        "type": "TEnumAsByte<EPhysicalSurface>"
      },
      {
        "name": "Effect",
        "comment": "The effect we want to play when hitting the surface",
        "type": "FFootstepEffect"
      }
    ]
  },
  {
    "kind": "class",
    "name": "FFootstepEffectWater",
    "category": "USTRUCT",
    "extends": [],
    "methods": [],
    "properties": [
      {
        "name": "MinWaterDepth",
        "comment": "When at this minimum water depth, then use this footstep effect instead",
        "type": "float"
      },
      {
        "name": "Effect",
        "comment": "The effect we want to play when hitting the surface",
        "type": "FFootstepEffect"
      }
    ]
  },
  {
    "kind": "class",
    "name": "AFGCharacterBase",
    "category": "UCLASS",
    "extends": [
      "ACharacter",
      "IFGSaveInterface"
    ],
    "methods": [
      {
        "name": "AFGCharacterBase"
      },
      {
        "name": "GetLifetimeReplicatedProps",
        "returnType": "void"
      },
      {
        "name": "BeginPlay",
        "comment": "Begin AActor interface",
        "returnType": "void"
      },
      {
        "name": "EndPlay",
        "returnType": "void"
      },
      {
        "name": "Tick",
        "returnType": "void"
      },
      {
        "name": "TakeDamage",
        "returnType": "float"
      },
      {
        "name": "ApplyDamageMomentum",
        "comment": "Apply momentum caused by damage.",
        "returnType": "void"
      },
      {
        "name": "PossessedBy",
        "comment": "Called when this Pawn is possessed. Only called on the server (or in standalone).\n@param C The controller possessing this pawn",
        "returnType": "void"
      },
      {
        "name": "UnPossessed",
        "returnType": "void"
      },
      {
        "name": "PreSaveGame_Implementation",
        "comment": "Begin IFGSaveInterface",
        "returnType": "void"
      },
      {
        "name": "PostSaveGame_Implementation",
        "returnType": "void"
      },
      {
        "name": "PreLoadGame_Implementation",
        "returnType": "void"
      },
      {
        "name": "PostLoadGame_Implementation",
        "returnType": "void"
      },
      {
        "name": "GatherDependencies_Implementation",
        "returnType": "void"
      },
      {
        "name": "NeedTransform_Implementation",
        "returnType": "bool"
      },
      {
        "name": "ShouldSave_Implementation",
        "returnType": "bool"
      },
      {
        "name": "Died",
        "comment": "Called when we died, need to be UFUNCTION as it's bound as a delegate",
        "returnType": "void"
      },
      {
        "name": "ReceiveDied",
        "comment": "Blueprint version of when we died",
        "returnType": "void"
      },
      {
        "name": "NotifyOnTakeDamage",
        "comment": "We have taken damage, called after controller has gotten a chance to response to the damage",
        "returnType": "void"
      },
      {
        "name": "OnTakeDamage",
        "comment": "Notify from our health component",
        "returnType": "void"
      },
      {
        "name": "NotifyOnTakePointDamage",
        "comment": "We have taken damage, called after controller has gotten a chance to response to the damage",
        "returnType": "void"
      },
      {
        "name": "NotifyOnWeakspotHit",
        "comment": "We have taken a weakspot hit",
        "returnType": "void"
      },
      {
        "name": "OnTakePointDamage",
        "comment": "Notify from our health component",
        "returnType": "void"
      },
      {
        "name": "OnTakeRadialDamage",
        "comment": "Notify from our health component",
        "returnType": "void"
      },
      {
        "name": "NotifyOnTakeRadialDamage",
        "comment": "We have taken radial damage, called after controller has gotten a chance to response to the damage",
        "returnType": "void"
      },
      {
        "name": "Landed",
        "comment": "Called when landing, used for fall damage",
        "returnType": "void"
      },
      {
        "name": "CalculateFallDamage",
        "comment": "Calculate damage we take from a fall",
        "returnType": "int32"
      },
      {
        "name": "SetFallDamageOverride",
        "comment": "Assign override to fall damage",
        "returnType": "void"
      },
      {
        "name": "PlayLandEffects",
        "comment": "Play effects for when landing",
        "returnType": "void"
      },
      {
        "name": "GetHealthComponent",
        "comment": "Get our current health component",
        "returnType": "classUFGHealthComponent*"
      },
      {
        "name": "GetFallDamageDamageType",
        "comment": "Get mFallDamageDamageType",
        "returnType": "TSubclassOf<classUFGDamageType>"
      },
      {
        "name": "GetTakeDamageSound",
        "comment": "Sound played when pawn takes damage",
        "returnType": "classUAkAudioEvent*"
      },
      {
        "name": "GetDeathSound",
        "comment": "Sound played when pawn dies",
        "returnType": "classUAkAudioEvent*"
      },
      {
        "name": "GetTakeDamageParticle",
        "comment": "Get mTakeDamageParticle",
        "returnType": "classUParticleSystem*"
      },
      {
        "name": "IsAliveAndWell",
        "comment": "@returns true if this character is alive and well, no health components means yes",
        "returnType": "bool"
      },
      {
        "name": "PushedByVehicle",
        "comment": "Player has collided with a vehicle and has received a push. This may be better as a general case function instead of specifically being for vehicles but it is what it is for now.",
        "returnType": "void"
      },
      {
        "name": "TraceForGround",
        "comment": "\n @return true if we hit something",
        "returnType": "bool"
      },
      {
        "name": "GetFootstepEffect",
        "comment": "\n @return nullpeter if there exist no footstep effect",
        "returnType": "FFootstepEffect&"
      },
      {
        "name": "IsRagdolled",
        "comment": "returns true if mesh is ragdolled",
        "returnType": "bool"
      },
      {
        "name": "RagdollCharacter",
        "comment": "if newRagdoll is true this function will ragdoll the player\n@Note: ONLY does something if called from the server.",
        "returnType": "void"
      },
      {
        "name": "GetMesh3P",
        "comment": "Returns Mesh3P subobject",
        "returnType": "USkeletalMeshComponent*"
      },
      {
        "name": "GetMainMesh",
        "comment": "Returns mesh depending on what camera mode we are in 1p or 3p",
        "returnType": "USkeletalMeshComponent*"
      },
      {
        "name": "CheckFallDamage",
        "comment": "Check if fall damage should be applied",
        "returnType": "void"
      },
      {
        "name": "SetLocallyPossessed",
        "comment": "Sets if this pawn is possessed and locally playable",
        "returnType": "void"
      },
      {
        "name": "OnLocallyPossessedChanged",
        "comment": "Event called when a locally controlled pawn gets possessed/unpossessed",
        "returnType": "void"
      },
      {
        "name": "AdjustDamage",
        "comment": "\t/\nBound function to our healthcomponent that cares about when we receive damage, passes it on to other AdjustDamage for BP",
        "returnType": "float"
      },
      {
        "name": "ReceivedAdjustDamage",
        "comment": "@param damageCauser - the actor who damaged us\n@return the adjusted damage",
        "returnType": "int32"
      },
      {
        "name": "PlayFootstepAudio",
        "comment": "@param hitInfo - information about how the hit looks when playing the effect\n@param waterDepth - how deep into the water the foot is when hitting the ground",
        "returnType": "void"
      },
      {
        "name": "PlayFootstepParticle",
        "comment": "@param precalculatedEffect - precalculatedEffect fetched effect with what sound we should play\n@param socketRotation - the rotation we should have of our effect",
        "returnType": "void"
      },
      {
        "name": "PlaceFootstepDecal",
        "comment": "@param socketRotation - the rotation we should have of our effect\n@param footDown - the index passed from UFGAnimNotify_FootDown::Notify in the animation",
        "returnType": "void"
      },
      {
        "name": "GetWaterFootstepEffect",
        "comment": "\n @return true if we found a suiteable effect",
        "returnType": "bool"
      },
      {
        "name": "CheckIfShouldDestroy",
        "comment": "Called regularly after we have been killed, will destroy us eventually",
        "returnType": "void"
      },
      {
        "name": "DoRagdoll_Internal",
        "comment": "this is what actually activates/deactivates the ragdoll",
        "returnType": "void"
      },
      {
        "name": "TryGetUpFromRagdoll",
        "comment": "this is called when the timer ticks down, and the character gets up from ragdoll if they are still alive",
        "returnType": "void"
      },
      {
        "name": "SyncRagdoll",
        "comment": "syncs ragdoll mesh and physics velocity",
        "returnType": "void"
      },
      {
        "name": "SetupDestroyTimer",
        "comment": "Setup we we should start checking of we should be destroyed",
        "returnType": "void"
      },
      {
        "name": "OnRep_IsRagdolled",
        "returnType": "void"
      },
      {
        "name": "OnRep_IsPossessed",
        "returnType": "void"
      },
      {
        "name": "FindSafePlaceToGetUp",
        "returnType": "FVector"
      }
    ],
    "properties": [
      {
        "name": "mFeetNames",
        "comment": "When receiving FootDown on index 2, then we will trace from mFeetNames[2] socket for ground",
        "type": "TArray<FName>"
      },
      {
        "name": "mDefaultFootstepEffect",
        "comment": "Default effects to play when a foot hits the ground when the material doesn't exist in mFootstepEffects",
        "type": "FFootstepEffect"
      },
      {
        "name": "mFootstepEffect",
        "comment": "Effects to play when a foot hits the ground",
        "type": "TArray<FFootstepEffectSurface>"
      },
      {
        "name": "mFootstepAudioEvents",
        "comment": "Audio event to play (where index in array is the feet index passed from AnimNotify_FootDown)",
        "type": "TArray<classUAkAudioEvent*>"
      },
      {
        "name": "mMaxFootstepParticleSpawnDistance",
        "comment": "Maximum distance we want to play footstep particles at",
        "type": "float"
      },
      {
        "name": "mMaxFootstepDecalSpawnDistance",
        "comment": "Maximum distance we want to spawn footsteps decals at",
        "type": "float"
      },
      {
        "name": "mFootstepDecalSize",
        "comment": "Size of footstep decals",
        "type": "TArray<FVector>"
      },
      {
        "name": "mFootstepDecalLifetime",
        "comment": "Lifetime of footstep decals",
        "type": "float"
      },
      {
        "name": "mHealthComponent",
        "comment": "Keeps track of our current health",
        "type": "classUFGHealthComponent*"
      },
      {
        "name": "mFallDamageCurve",
        "comment": "How much damage to take falling with a given velocity",
        "type": "UCurveFloat*"
      },
      {
        "name": "mFallDamageCurveOverride",
        "comment": "Overrides the default fall damage curve, utilized by Equipment",
        "type": "UCurveFloat*"
      },
      {
        "name": "mFallDamageDamageType",
        "comment": "@todo: This should not be specified for each pawn",
        "type": "TSubclassOf<classUFGDamageType>"
      },
      {
        "name": "mDeathRemovalHandle",
        "comment": "Handle, for removing the character from the game after it has died",
        "type": "FTimerHandle"
      },
      {
        "name": "mMaxDeathStayTime",
        "comment": "The maximum time after death (in seconds) the pawn will stay in the world, so it will be removed even if it's in sight after this time",
        "type": "float"
      },
      {
        "name": "mDeathRemoveCheckTime",
        "comment": "How often will we check if the pawn is in sight of any player",
        "type": "float"
      },
      {
        "name": "mEnemyTargetDesirability",
        "comment": "Multiplier for targeting desirability",
        "type": "float"
      },
      {
        "name": "mDeathTimestamp",
        "comment": "World time when we died",
        "type": "float"
      },
      {
        "name": "mTakeDamageSound",
        "comment": "Sound played when pawn takes damage",
        "type": "classUAkAudioEvent*"
      },
      {
        "name": "mDeathSound",
        "comment": "Sound played when pawn dies",
        "type": "classUAkAudioEvent*"
      },
      {
        "name": "mLandEvent",
        "comment": "Event posted when landing",
        "type": "classUAkAudioEvent*"
      },
      {
        "name": "mTakeDamageParticle",
        "comment": "Particle for when pawn takes damage",
        "type": "classUParticleSystem*"
      },
      {
        "name": "mMinVehiclePushVelocityForRagdoll",
        "comment": "Min push velocity required to start ragdoll",
        "type": "float"
      },
      {
        "name": "mTimeToGetUpFromRagdoll",
        "comment": "time in seconds until character gets up from ragdoll if alive",
        "type": "float"
      },
      {
        "name": "mMaxDistanceMovedToGetUp",
        "comment": "the furthest distance we can move during ragdoll before we are considered still enough to stand up from ragdoll",
        "type": "float"
      },
      {
        "name": "mGetUpFromRagdollHandle",
        "comment": "handle for the get up timer",
        "type": "FTimerHandle"
      },
      {
        "name": "mIsRagdolled",
        "comment": "true if ragdolled",
        "type": "bool"
      },
      {
        "name": "mShouldPlayLandEffect",
        "comment": "Used to avoid playing landing effect twice",
        "type": "bool"
      },
      {
        "name": "mFallVelocity",
        "comment": "Velicty we have when falling, updaten all the time when falling, never cleared",
        "type": "FVector"
      },
      {
        "name": "mRagdollMeshLoc",
        "type": "FVector"
      },
      {
        "name": "mRagdollMeshVelocity",
        "type": "FVector"
      },
      {
        "name": "mRagdollMeshLocBoneName",
        "comment": "Name of the bone we take mesh location from",
        "type": "FName"
      },
      {
        "name": "mRagdollMeshPhysicsBoneName",
        "comment": "Name of the bone we take physics velocity from",
        "type": "FName"
      },
      {
        "name": "mSyncBodyMaxDistance",
        "comment": "The maximum sync error distance between the current body location\nand the synced location before we teleport the ragdoll",
        "type": "float"
      },
      {
        "name": "mDefaultMeshRelativeTransform",
        "comment": "Stores the default mesh relative transform for ragdolling purposes",
        "type": "FTransform"
      },
      {
        "name": "mSqDistMovedDuringRagdoll",
        "comment": "squared distance moved during last frame when ragdolled. Used to detect if we are \"not moving\" and can get up",
        "type": "float"
      },
      {
        "name": "mHave_PlayFootstepEffect",
        "comment": "True if we have a blueprint version of some functions",
        "type": "uint8"
      },
      {
        "name": "mHave_AdjustDamage",
        "type": "uint8"
      },
      {
        "name": "mCanBeRevived",
        "comment": "Some things should auto destroy on death. Some shouldnt.",
        "type": "bool"
      },
      {
        "name": "mApplyDamageMomentum",
        "comment": "Should the auto momentum be applied when taking damage?",
        "type": "bool"
      },
      {
        "name": "mIgnoredDamageTypes",
        "comment": "Damage types that this character is immune to",
        "type": "TArray<TSubclassOf<classUDamageType>>"
      },
      {
        "name": "mWeakspotMultiplier",
        "comment": "How much more damage should be dealt when taking a weakspot hit",
        "type": "float"
      },
      {
        "name": "mWeakspotBoneNames",
        "comment": "Bone names that result in a weakspot hit",
        "type": "TArray<FName>"
      },
      {
        "name": "mNormalDamageMultiplier",
        "comment": "Multiplier for this creature and normal damage taken",
        "type": "float"
      },
      {
        "name": "mIsLocallyPossessed",
        "comment": "Used to keep track if we are locally possessed",
        "type": "bool"
      },
      {
        "name": "mIsPossessed",
        "comment": "Used to let client know when a pawn gets possessed/unpossessed",
        "type": "bool"
      }
    ]
  }
]