[
  {
    "kind": "class",
    "name": "AFGGameSession",
    "category": "UCLASS",
    "comment": "Internally it converts it to presence and posts it to the hosts presence.\n@todo DedicatedServers need to propagate this to a real matchmaking backend, as they have no presence to post that data to",
    "extends": [
      "AGameSession"
    ],
    "methods": [
      {
        "name": "AFGGameSession"
      },
      {
        "name": "UpdateGameSession",
        "comment": "Takes info from GameMode and GameState and sends it to the OSS to be published\nso players searching for games can see it.",
        "returnType": "void"
      },
      {
        "name": "Destroyed",
        "comment": "~Begin AActor interface",
        "returnType": "void"
      },
      {
        "name": "InitOptions",
        "comment": "~Begin AGameSession interface",
        "returnType": "void"
      },
      {
        "name": "OnStartSessionComplete",
        "returnType": "void"
      },
      {
        "name": "OnEndSessionComplete",
        "returnType": "void"
      },
      {
        "name": "PostLogin",
        "returnType": "void"
      },
      {
        "name": "NotifyLogout",
        "returnType": "void"
      },
      {
        "name": "HandleMatchHasStarted",
        "returnType": "void"
      },
      {
        "name": "HandleMatchHasEnded",
        "returnType": "void"
      },
      {
        "name": "KickPlayer",
        "returnType": "bool"
      },
      {
        "name": "AddAdmin",
        "returnType": "void"
      },
      {
        "name": "RemoveAdmin",
        "returnType": "void"
      },
      {
        "name": "IsPlayerAdmin",
        "comment": "Returns true if the player is classified as admin",
        "returnType": "bool"
      },
      {
        "name": "AdminLogin",
        "returnType": "void"
      },
      {
        "name": "GetSessionSettings",
        "comment": "Get session settings from the specified world",
        "returnType": "FFGOnlineSessionSettings"
      },
      {
        "name": "SetSessionVisibility",
        "comment": "Set the visibility of the current session",
        "returnType": "void"
      },
      {
        "name": "GetSessionVisibility",
        "comment": "Get the visibility of the current session",
        "returnType": "ESessionVisibility"
      },
      {
        "name": "ListenForIntroSequenceUpdated",
        "comment": "Make sure we have a tutorial intro managere",
        "returnType": "void"
      },
      {
        "name": "AllowsLoginAttempts",
        "comment": "@return true if we allow login attempts from the specified PC, if he/she/it failed too many times in a row, then we might lock them out",
        "returnType": "bool"
      },
      {
        "name": "ClearFailTracking",
        "comment": "Clear all failed login attempts of the user",
        "returnType": "void"
      },
      {
        "name": "IntroSequenceUpdated",
        "comment": "Game can become public after this, and the current visibility is applied",
        "returnType": "void"
      },
      {
        "name": "SetRandomAdminPassword",
        "comment": "Set a random admin password",
        "returnType": "void"
      },
      {
        "name": "GetNumPrivateConnections",
        "returnType": "int32"
      },
      {
        "name": "GetNumPublicConnections",
        "returnType": "int32"
      },
      {
        "name": "OnUpdateSessionComplete",
        "returnType": "void"
      }
    ],
    "properties": [
      {
        "name": "AdminPasswordOption",
        "comment": "Admin password option that's parsed from commandline",
        "type": "staticconstTCHAR*"
      },
      {
        "name": "mSessionVisibility",
        "comment": "Visibility of current game session",
        "type": "ESessionVisibility"
      },
      {
        "name": "mGameCanBePublic",
        "comment": "Set to true when the game is allowed to switch to public",
        "type": "bool"
      },
      {
        "name": "mUpdateGameSessionTimerHandle",
        "comment": "Timer holding the update",
        "type": "FTimerHandle"
      },
      {
        "name": "mOnUpdateSessionCompleteDelegate",
        "comment": "Handle for updating sessions",
        "type": "FDelegateHandle"
      },
      {
        "name": "mHashedAdminPassword",
        "comment": "Hashed admin password",
        "type": "FString"
      },
      {
        "name": "mLastLoginFailTime",
        "comment": "Used to keep track of players when they last tried to login and failed to detect brute force logins",
        "type": "TMap<classAPlayerController*,double>"
      },
      {
        "name": "mFailedLoginCount",
        "comment": "Used to keep track of how many times a player has failed to login in a row",
        "type": "TMap<classAPlayerController*,int32>"
      },
      {
        "name": "mLoggedInAdmins",
        "comment": "List of logged in admins",
        "type": "TArray<classAPlayerController*>"
      }
    ]
  }
]